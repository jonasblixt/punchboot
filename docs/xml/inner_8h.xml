<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="inner_8h" kind="file" language="C++">
    <compoundname>inner.h</compoundname>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="limits_8h" local="no">limits.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="bearssl__hash_8h" local="yes">bearssl_hash.h</includes>
    <incdepgraph>
      <node id="820">
        <label>stddef.h</label>
        <link refid="stddef_8h_source"/>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
      <node id="818">
        <label>stdint_.h</label>
      </node>
      <node id="821">
        <label>stddef_.h</label>
      </node>
      <node id="816">
        <label>limits_.h</label>
      </node>
      <node id="812">
        <label>/docs/lib/bearssl/inner.h</label>
        <link refid="inner_8h"/>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
      </node>
      <node id="815">
        <label>limits.h</label>
        <link refid="limits_8h_source"/>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="813">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="814" relation="include">
        </childnode>
      </node>
      <node id="819">
        <label>bearssl_hash.h</label>
        <link refid="bearssl__hash_8h"/>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
      </node>
      <node id="817">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="818" relation="include">
        </childnode>
      </node>
      <node id="814">
        <label>string_.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="unionbr__union__u16" prot="public">br_union_u16</innerclass>
    <innerclass refid="unionbr__union__u32" prot="public">br_union_u32</innerclass>
    <innerclass refid="unionbr__union__u64" prot="public">br_union_u64</innerclass>
    <innerclass refid="structbr__ec__curve__def" prot="public">br_ec_curve_def</innerclass>
    <innerclass refid="structbr__asn1__uint" prot="public">br_asn1_uint</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="inner_8h_1aa1f15f9a15aca064e6ae1165b1ef935f" prot="public" static="no">
        <name>BR_MAX_RSA_SIZE</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="56" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a2c1a9b6a061d8357e9db9b8f30f77f42" prot="public" static="no">
        <name>BR_MIN_RSA_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="65" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1ae6222398a2cef7c77185492316b35336" prot="public" static="no">
        <name>BR_MAX_RSA_FACTOR</name>
        <initializer>((BR_MAX_RSA_SIZE + 64) &gt;&gt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="74" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a345437ae65577082433659bb808c4a13" prot="public" static="no">
        <name>BR_MAX_EC_SIZE</name>
        <initializer>528</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="82" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1ad2f91399eef4e0286946e354673bd859" prot="public" static="no">
        <name>BR_TARGET</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="274" column="10" bodyfile="/docs/lib/bearssl/inner.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a14e32c27dc9b188856093ae003f78b5c" prot="public" static="no">
        <name>GE</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>NOT(GT(y, x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="809" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a375b5090161790d5783d4bdd92f3f750" prot="public" static="no">
        <name>LT</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>GT(y, x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="810" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a2196b2e9c04f037b20b9c064276ee7c9" prot="public" static="no">
        <name>LE</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>NOT(GT(x, y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="811" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1aa889ea1d4d3c4268b7eeaf64f18dbaa7" prot="public" static="no">
        <name>CCOPY</name>
        <initializer>br_ccopy</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="891" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a3181b6978c9b47c96208263c73c8c4a7" prot="public" static="no">
        <name>MUL</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((uint64_t)(x) * (uint64_t)(y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="934" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a0e2172f718e3f33e60343cc150d22baa" prot="public" static="no">
        <name>MUL31</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((uint64_t)(x) * (uint64_t)(y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="976" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a7e6cfe22ff8082061c89ba5c372992a7" prot="public" static="no">
        <name>MUL31_lo</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((uint32_t)(x) * (uint32_t)(y)) &amp; (uint32_t)0x7FFFFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="977" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1ac8350bcd01909a51c1c5337a92788c75" prot="public" static="no">
        <name>MUL15</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((uint32_t)(x) * (uint32_t)(y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="994" column="10" bodyfile="/docs/lib/bearssl/inner.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a7ee5328998598673f5248f83923ada19" prot="public" static="no">
        <name>ARSH</name>
        <param><defname>x</defname></param>
        <param><defname>n</defname></param>
        <initializer>((*(int32_t *)&amp;(x)) &gt;&gt; (n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1016" column="10" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a0e0712de330952e9b7e030806224376e" prot="public" static="no">
        <name>len_of_len</name>
        <param><defname>len</defname></param>
        <initializer>br_asn1_encode_length(NULL, len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2101" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a739920947e202fc5b0f118290a22ac66" prot="public" static="no">
        <name>BR_SSL_CHANGE_CIPHER_SPEC</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2138" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1aa96e91d724b1948b3c80d7629fe0dbc7" prot="public" static="no">
        <name>BR_SSL_ALERT</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2139" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a69f066b1fc92a38bf1830d6224d54e23" prot="public" static="no">
        <name>BR_SSL_HANDSHAKE</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2140" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a646f6a76471522c43ffe6728dfe73d7f" prot="public" static="no">
        <name>BR_SSL_APPLICATION_DATA</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2141" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a14f6a39ff494fc05a8569df9545f9b58" prot="public" static="no">
        <name>BR_SSL_HELLO_REQUEST</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2146" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a6af311346913f68cf3de240379447f73" prot="public" static="no">
        <name>BR_SSL_CLIENT_HELLO</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2147" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1afc47cee93795ddd347e404fff8b6e34b" prot="public" static="no">
        <name>BR_SSL_SERVER_HELLO</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2148" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a2e5b97dc6d0fc5310f65fb3c96d93d3b" prot="public" static="no">
        <name>BR_SSL_CERTIFICATE</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2149" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a54037b8852747ebf0d3cdeb45cfc91e3" prot="public" static="no">
        <name>BR_SSL_SERVER_KEY_EXCHANGE</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2150" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a17e69e133e08628fcdf85f828e5111aa" prot="public" static="no">
        <name>BR_SSL_CERTIFICATE_REQUEST</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2151" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a7036dd9945c6ffa488c52bc2bbfaaf10" prot="public" static="no">
        <name>BR_SSL_SERVER_HELLO_DONE</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2152" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a12582e959a3ab6d2fd13ee94387da1ee" prot="public" static="no">
        <name>BR_SSL_CERTIFICATE_VERIFY</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2153" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a53f61039be9cd71b69a614eacb93693e" prot="public" static="no">
        <name>BR_SSL_CLIENT_KEY_EXCHANGE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2154" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a1b20e973640a599593c5fdf33e8347a9" prot="public" static="no">
        <name>BR_SSL_FINISHED</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2155" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a106793e8cbebf0a970f247767cabf499" prot="public" static="no">
        <name>BR_LEVEL_WARNING</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2160" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1ae020e65d0a19813539d8e56c761ff55b" prot="public" static="no">
        <name>BR_LEVEL_FATAL</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2161" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a9afe6ed13e19b909517b8d78e8eb1ca5" prot="public" static="no">
        <name>BR_IO_FAILED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2166" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a9eb5c7337ba7324fed03946255b8becd" prot="public" static="no">
        <name>BR_IO_IN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2167" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a3a52b6d847f566eff58993a8b1b0c95f" prot="public" static="no">
        <name>BR_IO_OUT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2168" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inner_8h_1a24462157deda15f5c346546c2f58a635" prot="public" static="no">
        <name>BR_IO_INOUT</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2169" column="9" bodyfile="/docs/lib/bearssl/inner.h" bodystart="2169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="inner_8h_1a18ab666da463172df272547e831b13b7" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_i31_modpow_opt_type) (uint32_t *x, const unsigned char *e, size_t elen, const uint32_t *m, uint32_t m0i, uint32_t *tmp, size_t twlen)</definition>
        <argsstring>)(uint32_t *x, const unsigned char *e, size_t elen, const uint32_t *m, uint32_t m0i, uint32_t *tmp, size_t twlen)</argsstring>
        <name>br_i31_modpow_opt_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1584" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1584" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="inner_8h_1a88f09a3d36c2844a4545a2875bb7d310" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t br_md5_IV[]</definition>
        <argsstring>[]</argsstring>
        <name>br_md5_IV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="678" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1a015ea9f5ce6f585cd4f4f0e4937c5a4a" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t br_sha1_IV[]</definition>
        <argsstring>[]</argsstring>
        <name>br_sha1_IV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1a819d14bfc9b3f0c941337ab8c57077c1" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t br_sha224_IV[]</definition>
        <argsstring>[]</argsstring>
        <name>br_sha224_IV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1ae201c3ec12bcb727e8e7c59a84ac4aa6" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t br_sha256_IV[]</definition>
        <argsstring>[]</argsstring>
        <name>br_sha256_IV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="681" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1abcd87d1c03a7ddde5bb2afebc34c98a1" prot="public" static="no" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char br_aes_S[]</definition>
        <argsstring>[]</argsstring>
        <name>br_aes_S</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1684" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1a16e501dc186c9abdc371d6ea7d811487" prot="public" static="no" mutable="no">
        <type>const <ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref></type>
        <definition>const br_ec_curve_def br_secp256r1</definition>
        <argsstring></argsstring>
        <name>br_secp256r1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2030" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1a794dd4e989f3772bfc7c1864e91607d4" prot="public" static="no" mutable="no">
        <type>const <ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref></type>
        <definition>const br_ec_curve_def br_secp384r1</definition>
        <argsstring></argsstring>
        <name>br_secp384r1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2031" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1a85b979d1b84815d01f568c5a114b9388" prot="public" static="no" mutable="no">
        <type>const <ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref></type>
        <definition>const br_ec_curve_def br_secp521r1</definition>
        <argsstring></argsstring>
        <name>br_secp521r1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2032" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="inner_8h_1a53facfb733b302557357ec8248fd8264" prot="public" static="no" mutable="no">
        <type>const <ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref></type>
        <definition>const br_ec_curve_def br_curve25519</definition>
        <argsstring></argsstring>
        <name>br_curve25519</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2041" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="inner_8h_1a2e7e2c70fb45317299de93d8687f294b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_enc16le</definition>
        <argsstring>(void *dst, unsigned x)</argsstring>
        <name>br_enc16le</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="468" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="468" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1acbdccbc15287ef6bcb3d45492844208f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_enc16be</definition>
        <argsstring>(void *dst, unsigned x)</argsstring>
        <name>br_enc16be</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="482" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="482" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a815e038a8b68c82ddbf7cbb1069469b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned br_dec16le</definition>
        <argsstring>(const void *src)</argsstring>
        <name>br_dec16le</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="496" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="496" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a3a627e0899030fcc189d8ff8dc80dd87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned br_dec16be</definition>
        <argsstring>(const void *src)</argsstring>
        <name>br_dec16be</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="509" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="509" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a38232bb40f63f5fe030a0a241ccb634c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_enc32le</definition>
        <argsstring>(void *dst, uint32_t x)</argsstring>
        <name>br_enc32le</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="522" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="522" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a901c41158d568eedd29684bafd95e94d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_enc32be</definition>
        <argsstring>(void *dst, uint32_t x)</argsstring>
        <name>br_enc32be</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="538" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="538" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a1a9025f4f132c55b77ac13a177ed79e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t br_dec32le</definition>
        <argsstring>(const void *src)</argsstring>
        <name>br_dec32le</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="554" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="554" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aa1a3412c0221cd5e782538d5e07e7206" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t br_dec32be</definition>
        <argsstring>(const void *src)</argsstring>
        <name>br_dec32be</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="570" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="570" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab96673b7a216b3cf1dfc2dac589b80c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_enc64le</definition>
        <argsstring>(void *dst, uint64_t x)</argsstring>
        <name>br_enc64le</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="586" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="586" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a9b47bbc1d2a19a00a5dd81f1018adf2e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_enc64be</definition>
        <argsstring>(void *dst, uint64_t x)</argsstring>
        <name>br_enc64be</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="600" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="600" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad8e04a69f979f381d7cf5a3370a0eb47" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t br_dec64le</definition>
        <argsstring>(const void *src)</argsstring>
        <name>br_dec64le</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="614" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="614" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a55a558c555de6257d19ff0e23ba830ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t br_dec64be</definition>
        <argsstring>(const void *src)</argsstring>
        <name>br_dec64be</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="628" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="628" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1abc7d37773706c72b2215602642114d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_dec16le</definition>
        <argsstring>(uint16_t *v, size_t num, const void *src)</argsstring>
        <name>br_range_dec16le</name>
        <param>
          <type>uint16_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a8ecaf979cfef778dcac3b54766b8243d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_dec16be</definition>
        <argsstring>(uint16_t *v, size_t num, const void *src)</argsstring>
        <name>br_range_dec16be</name>
        <param>
          <type>uint16_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae999ec3762d46cb43938611434f4e11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_enc16le</definition>
        <argsstring>(void *dst, const uint16_t *v, size_t num)</argsstring>
        <name>br_range_enc16le</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab6b70ad4a789e969c656ab1113ae8b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_enc16be</definition>
        <argsstring>(void *dst, const uint16_t *v, size_t num)</argsstring>
        <name>br_range_enc16be</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aaa2ffd40f09dacf0ae38216aced8dc64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_dec32le</definition>
        <argsstring>(uint32_t *v, size_t num, const void *src)</argsstring>
        <name>br_range_dec32le</name>
        <param>
          <type>uint32_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a82fa0a72f1efc98d05b7b8db069d5c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_dec32be</definition>
        <argsstring>(uint32_t *v, size_t num, const void *src)</argsstring>
        <name>br_range_dec32be</name>
        <param>
          <type>uint32_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a5cb66461e076c9cc2ad050ecb11a740e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_enc32le</definition>
        <argsstring>(void *dst, const uint32_t *v, size_t num)</argsstring>
        <name>br_range_enc32le</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a6c12399436f9527bc7a2dfcb7bf5c0f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_enc32be</definition>
        <argsstring>(void *dst, const uint32_t *v, size_t num)</argsstring>
        <name>br_range_enc32be</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a347d47728b56cae1bb33f056a3f07fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_dec64le</definition>
        <argsstring>(uint64_t *v, size_t num, const void *src)</argsstring>
        <name>br_range_dec64le</name>
        <param>
          <type>uint64_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a799b08286526ae64423a0db92ce10788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_dec64be</definition>
        <argsstring>(uint64_t *v, size_t num, const void *src)</argsstring>
        <name>br_range_dec64be</name>
        <param>
          <type>uint64_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad4a5b6620b2025d65e29dac58a60020d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_enc64le</definition>
        <argsstring>(void *dst, const uint64_t *v, size_t num)</argsstring>
        <name>br_range_enc64le</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a9e908607161645b45a26701b96b64696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_range_enc64be</definition>
        <argsstring>(void *dst, const uint64_t *v, size_t num)</argsstring>
        <name>br_range_enc64be</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac8ec67f93ce82aeee8553e7f6dfcf0e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t br_swap32</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>br_swap32</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="663" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="663" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1afebb405a21c0d7de53493bb7a501b601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5_round</definition>
        <argsstring>(const unsigned char *buf, uint32_t *val)</argsstring>
        <name>br_md5_round</name>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a7b55946b82ca129e5e5658390a3ab975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha1_round</definition>
        <argsstring>(const unsigned char *buf, uint32_t *val)</argsstring>
        <name>br_sha1_round</name>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a082d6a8ecf88347f672d3027aad89ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha2small_round</definition>
        <argsstring>(const unsigned char *buf, uint32_t *val)</argsstring>
        <name>br_sha2small_round</name>
        <param>
          <type>const unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a7d7d96013774e59dcf9efcc074864810" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_multihash_copyimpl</definition>
        <argsstring>(br_multihash_context *dst, const br_multihash_context *src)</argsstring>
        <name>br_multihash_copyimpl</name>
        <param>
          <type><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="708" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1afec8a31b6603027d750d9349245be725" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t NOT</definition>
        <argsstring>(uint32_t ctl)</argsstring>
        <name>NOT</name>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="744" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="744" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1abc9f16cfe7c94541933eade334128950" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t MUX</definition>
        <argsstring>(uint32_t ctl, uint32_t x, uint32_t y)</argsstring>
        <name>MUX</name>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="753" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="753" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a3b474bf658b628ecb87a587efecd6192" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t EQ</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>EQ</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="762" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="762" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae03e5b3eaacb7464f451c2b4a4dbf1ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t NEQ</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>NEQ</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="774" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="774" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a2e986d1b9041a5acf345d32db2a70231" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t GT</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>GT</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="786" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="786" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a316aeed0270a5a7780cf77906ff4ecc2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t CMP</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>CMP</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="818" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="818" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a542c513bedd6a2a47db272930e0799e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t EQ0</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>EQ0</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="827" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="827" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a671568bb636097cac16d0c9df5d0d4b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t GT0</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>GT0</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="839" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="839" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a52bc9649e08fd0d80e8f06d531bc954b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t GE0</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>GE0</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="854" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="854" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1acec15050582ffd54845983cfd4e88bfa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t LT0</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>LT0</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="863" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="863" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a886de27814bb578ef5be7bd3ee31a0b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t LE0</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>LE0</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="872" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="872" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad71a86e0592c3a306e0749211a823b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ccopy</definition>
        <argsstring>(uint32_t ctl, void *dst, const void *src, size_t len)</argsstring>
        <name>br_ccopy</name>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0781a9ad6d5fb5975a1e45aaa9d21f1c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t BIT_LENGTH</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>BIT_LENGTH</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="898" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="898" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1af0191deb3e5843f7c562ffc03ca60fd9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t MIN</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>MIN</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="915" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab33d979a495f3b633147ca9f38e7e670" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t MAX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>MAX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="924" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="924" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0ce966e470749b0917e09d37e2ec417f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_divrem</definition>
        <argsstring>(uint32_t hi, uint32_t lo, uint32_t d, uint32_t *r)</argsstring>
        <name>br_divrem</name>
        <param>
          <type>uint32_t</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1026" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a4e1878b6b1d510fd650ee409948fe4eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t br_rem</definition>
        <argsstring>(uint32_t hi, uint32_t lo, uint32_t d)</argsstring>
        <name>br_rem</name>
        <param>
          <type>uint32_t</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1033" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1033" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aff338c28b3a4ae89b2ea0f2448fa47a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t br_div</definition>
        <argsstring>(uint32_t hi, uint32_t lo, uint32_t d)</argsstring>
        <name>br_div</name>
        <param>
          <type>uint32_t</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1046" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1046" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a8a7d79b5ff2da114728d8bcc1acf33b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i32_bit_length</definition>
        <argsstring>(uint32_t *x, size_t xlen)</argsstring>
        <name>br_i32_bit_length</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1088" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a255939e09bc58c8569f004d56bbc400f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_decode</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len)</argsstring>
        <name>br_i32_decode</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1097" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a8c850fcdc99c0c57c3096db730f37ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i32_decode_mod</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len, const uint32_t *m)</argsstring>
        <name>br_i32_decode_mod</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a3dd0184377f6f992223866ea308bc613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_reduce</definition>
        <argsstring>(uint32_t *x, const uint32_t *a, const uint32_t *m)</argsstring>
        <name>br_i32_reduce</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae2c3ed036e4c0c41c999b1b38407d79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_decode_reduce</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len, const uint32_t *m)</argsstring>
        <name>br_i32_decode_reduce</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aec9c7e0bf1316974efe0184a02e31752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_encode</definition>
        <argsstring>(void *dst, size_t len, const uint32_t *x)</argsstring>
        <name>br_i32_encode</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1add8721c42bc524ed03ead920418a4c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_muladd_small</definition>
        <argsstring>(uint32_t *x, uint32_t z, const uint32_t *m)</argsstring>
        <name>br_i32_muladd_small</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a362033b8703be43e1bed26bbf0d9e611" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t br_i32_word</definition>
        <argsstring>(const uint32_t *a, uint32_t off)</argsstring>
        <name>br_i32_word</name>
        <param>
          <type>const uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1163" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1163" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae0eef364a5c6b9b8e8c99eec99f51fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i32_iszero</definition>
        <argsstring>(const uint32_t *x)</argsstring>
        <name>br_i32_iszero</name>
        <param>
          <type>const uint32_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a350e57f10e58cce99426d783eae7f0df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i32_add</definition>
        <argsstring>(uint32_t *a, const uint32_t *b, uint32_t ctl)</argsstring>
        <name>br_i32_add</name>
        <param>
          <type>uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1afcaec0a3a179468f72643e1d7735bed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i32_sub</definition>
        <argsstring>(uint32_t *a, const uint32_t *b, uint32_t ctl)</argsstring>
        <name>br_i32_sub</name>
        <param>
          <type>uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac5f45e453de94a0850b5794ae462d1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_mulacc</definition>
        <argsstring>(uint32_t *d, const uint32_t *a, const uint32_t *b)</argsstring>
        <name>br_i32_mulacc</name>
        <param>
          <type>uint32_t *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a87923ca5689ba7fa67dd9edddad4ba6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_i32_zero</definition>
        <argsstring>(uint32_t *x, uint32_t bit_len)</argsstring>
        <name>br_i32_zero</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bit_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1218" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1218" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0480ad6336a8b7e086374a7845c29594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i32_ninv32</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>br_i32_ninv32</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a46a29043983aade9a5e2ed0598735816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_to_monty</definition>
        <argsstring>(uint32_t *x, const uint32_t *m)</argsstring>
        <name>br_i32_to_monty</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab140201dcf25c873458f817994995cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_from_monty</definition>
        <argsstring>(uint32_t *x, const uint32_t *m, uint32_t m0i)</argsstring>
        <name>br_i32_from_monty</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1abf59a5d7eb47cc9a3a0dc920ef7e523c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_montymul</definition>
        <argsstring>(uint32_t *d, const uint32_t *x, const uint32_t *y, const uint32_t *m, uint32_t m0i)</argsstring>
        <name>br_i32_montymul</name>
        <param>
          <type>uint32_t *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a8ceb7cc58d90fa1164e3fafa50b54d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i32_modpow</definition>
        <argsstring>(uint32_t *x, const unsigned char *e, size_t elen, const uint32_t *m, uint32_t m0i, uint32_t *t1, uint32_t *t2)</argsstring>
        <name>br_i32_modpow</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a839461fc3be4a098e89250ec3f989d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_iszero</definition>
        <argsstring>(const uint32_t *x)</argsstring>
        <name>br_i31_iszero</name>
        <param>
          <type>const uint32_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a2469a0399c003f96d59883866e65528b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_add</definition>
        <argsstring>(uint32_t *a, const uint32_t *b, uint32_t ctl)</argsstring>
        <name>br_i31_add</name>
        <param>
          <type>uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1af1339726d4ee1e2933e654d34133aa29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_sub</definition>
        <argsstring>(uint32_t *a, const uint32_t *b, uint32_t ctl)</argsstring>
        <name>br_i31_sub</name>
        <param>
          <type>uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a1c1dc978e5f031bca136549ac8455987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_bit_length</definition>
        <argsstring>(uint32_t *x, size_t xlen)</argsstring>
        <name>br_i31_bit_length</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1af8c6fc75e0e9e93805e2dcc894acff05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_decode</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len)</argsstring>
        <name>br_i31_decode</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a786ed533ff6210fead007fe62220e8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_decode_mod</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len, const uint32_t *m)</argsstring>
        <name>br_i31_decode_mod</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aab61437ba06d899740ea3dc2c650aca9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_i31_zero</definition>
        <argsstring>(uint32_t *x, uint32_t bit_len)</argsstring>
        <name>br_i31_zero</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bit_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1366" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1366" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a9064e6999811b9b1d76502bb04b3148a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_rshift</definition>
        <argsstring>(uint32_t *x, int count)</argsstring>
        <name>br_i31_rshift</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1acfc864e761954bfeb0ef05dce3f24025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_reduce</definition>
        <argsstring>(uint32_t *x, const uint32_t *a, const uint32_t *m)</argsstring>
        <name>br_i31_reduce</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a010d7882b4857c83b0198ab1c786cabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_decode_reduce</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len, const uint32_t *m)</argsstring>
        <name>br_i31_decode_reduce</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae95a6d723b53566dbb95b5d68344224b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_muladd_small</definition>
        <argsstring>(uint32_t *x, uint32_t z, const uint32_t *m)</argsstring>
        <name>br_i31_muladd_small</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a9ccd309b9617e5bec44404b719a11985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_encode</definition>
        <argsstring>(void *dst, size_t len, const uint32_t *x)</argsstring>
        <name>br_i31_encode</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae8de1aafac60f98e0947788b34eda345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_ninv31</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>br_i31_ninv31</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a8f99648a2c0b852f220c203a8145527d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_montymul</definition>
        <argsstring>(uint32_t *d, const uint32_t *x, const uint32_t *y, const uint32_t *m, uint32_t m0i)</argsstring>
        <name>br_i31_montymul</name>
        <param>
          <type>uint32_t *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0ceca04c829d231cc1a4fb0b6dc80b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_to_monty</definition>
        <argsstring>(uint32_t *x, const uint32_t *m)</argsstring>
        <name>br_i31_to_monty</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a39a07d3df2bc203a11c89c9c1ec5d518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_from_monty</definition>
        <argsstring>(uint32_t *x, const uint32_t *m, uint32_t m0i)</argsstring>
        <name>br_i31_from_monty</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a638cbda5adb717c3a657aac985a931c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_modpow</definition>
        <argsstring>(uint32_t *x, const unsigned char *e, size_t elen, const uint32_t *m, uint32_t m0i, uint32_t *t1, uint32_t *t2)</argsstring>
        <name>br_i31_modpow</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aa33cd735be0be66efbaa441421de256a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_modpow_opt</definition>
        <argsstring>(uint32_t *x, const unsigned char *e, size_t elen, const uint32_t *m, uint32_t m0i, uint32_t *tmp, size_t twlen)</argsstring>
        <name>br_i31_modpow_opt</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>twlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a4652261da260ec42fa2f092a036fddac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i31_mulacc</definition>
        <argsstring>(uint32_t *d, const uint32_t *a, const uint32_t *b)</argsstring>
        <name>br_i31_mulacc</name>
        <param>
          <type>uint32_t *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab5370930a59e45d51e847b3ab66c954d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i31_moddiv</definition>
        <argsstring>(uint32_t *x, const uint32_t *y, const uint32_t *m, uint32_t m0i, uint32_t *t)</argsstring>
        <name>br_i31_moddiv</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aefb0d35ca8a760e376dcab655dfffcd2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_i15_zero</definition>
        <argsstring>(uint16_t *x, uint16_t bit_len)</argsstring>
        <name>br_i15_zero</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>bit_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1520" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1520" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a98869bd7de502757dc1ddf3f4c4571be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_iszero</definition>
        <argsstring>(const uint16_t *x)</argsstring>
        <name>br_i15_iszero</name>
        <param>
          <type>const uint16_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac5f7d7a817215221c40ae2943644f167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t br_i15_ninv15</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>br_i15_ninv15</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1af0b1e4448f37d8884fd8b4e8abb47daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_add</definition>
        <argsstring>(uint16_t *a, const uint16_t *b, uint32_t ctl)</argsstring>
        <name>br_i15_add</name>
        <param>
          <type>uint16_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a8f2b97392a5e3fc50221497ced6cbbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_sub</definition>
        <argsstring>(uint16_t *a, const uint16_t *b, uint32_t ctl)</argsstring>
        <name>br_i15_sub</name>
        <param>
          <type>uint16_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aeb408fe1862d9daadfb7604c0156f623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_muladd_small</definition>
        <argsstring>(uint16_t *x, uint16_t z, const uint16_t *m)</argsstring>
        <name>br_i15_muladd_small</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ae85f5d0612ff630e55158a660a394562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_montymul</definition>
        <argsstring>(uint16_t *d, const uint16_t *x, const uint16_t *y, const uint16_t *m, uint16_t m0i)</argsstring>
        <name>br_i15_montymul</name>
        <param>
          <type>uint16_t *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>m0i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aece1d8eedda353fbe4082f20ff6473ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_to_monty</definition>
        <argsstring>(uint16_t *x, const uint16_t *m)</argsstring>
        <name>br_i15_to_monty</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a7a276221a39f741b97f84a5c23242605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_modpow</definition>
        <argsstring>(uint16_t *x, const unsigned char *e, size_t elen, const uint16_t *m, uint16_t m0i, uint16_t *t1, uint16_t *t2)</argsstring>
        <name>br_i15_modpow</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a3e5c6626e11370e38888f5f327ce857f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_modpow_opt</definition>
        <argsstring>(uint16_t *x, const unsigned char *e, size_t elen, const uint16_t *m, uint16_t m0i, uint16_t *tmp, size_t twlen)</argsstring>
        <name>br_i15_modpow_opt</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>twlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a882af7ecbe40ae43c94a090bce1b08b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_encode</definition>
        <argsstring>(void *dst, size_t len, const uint16_t *x)</argsstring>
        <name>br_i15_encode</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aad94325f79e8aa96cd82a71da4588f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_decode_mod</definition>
        <argsstring>(uint16_t *x, const void *src, size_t len, const uint16_t *m)</argsstring>
        <name>br_i15_decode_mod</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aaf8f11f4fad3245bce8bf671c10bae36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_rshift</definition>
        <argsstring>(uint16_t *x, int count)</argsstring>
        <name>br_i15_rshift</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a9101486f33e73d052b89fc86de01fc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_bit_length</definition>
        <argsstring>(uint16_t *x, size_t xlen)</argsstring>
        <name>br_i15_bit_length</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a102d853a6a7e5de9a8ce2a105c69e9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_decode</definition>
        <argsstring>(uint16_t *x, const void *src, size_t len)</argsstring>
        <name>br_i15_decode</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aec69bd110ef4cc942546eb4858328c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_from_monty</definition>
        <argsstring>(uint16_t *x, const uint16_t *m, uint16_t m0i)</argsstring>
        <name>br_i15_from_monty</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>m0i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad80992dcc3dc1ef5a2c463f678c11c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_decode_reduce</definition>
        <argsstring>(uint16_t *x, const void *src, size_t len, const uint16_t *m)</argsstring>
        <name>br_i15_decode_reduce</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab1af5034ee8617d52fc53e7498ca2946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_reduce</definition>
        <argsstring>(uint16_t *x, const uint16_t *a, const uint16_t *m)</argsstring>
        <name>br_i15_reduce</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a5c091a2305abd8b60b0266c21e60b283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_i15_mulacc</definition>
        <argsstring>(uint16_t *d, const uint16_t *a, const uint16_t *b)</argsstring>
        <name>br_i15_mulacc</name>
        <param>
          <type>uint16_t *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac4677427e324e80f739ee7bb388127f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i15_moddiv</definition>
        <argsstring>(uint16_t *x, const uint16_t *y, const uint16_t *m, uint16_t m0i, uint16_t *t)</argsstring>
        <name>br_i15_moddiv</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0f3101968ec284f092c13cab97c32299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i62_modpow_opt</definition>
        <argsstring>(uint32_t *x31, const unsigned char *e, size_t elen, const uint32_t *m31, uint32_t m0i31, uint64_t *tmp, size_t twlen)</argsstring>
        <name>br_i62_modpow_opt</name>
        <param>
          <type>uint32_t *</type>
          <declname>x31</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m31</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i31</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>twlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1af4e89c241d886b2faf4e3c25d0aa5ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_i62_modpow_opt_as_i31</definition>
        <argsstring>(uint32_t *x, const unsigned char *e, size_t elen, const uint32_t *m, uint32_t m0i, uint32_t *tmp, size_t twlen)</argsstring>
        <name>br_i62_modpow_opt_as_i31</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elen</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>m0i</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>twlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0d67ffbc37e620fbc423565cc243c16c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t br_digest_size</definition>
        <argsstring>(const br_hash_class *digest_class)</argsstring>
        <name>br_digest_size</name>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>digest_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1600" column="1" bodyfile="/docs/lib/bearssl/inner.h" bodystart="1600" bodyend="1604"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a00283abb05f132cb612f7c0d5974c9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_digest_size_by_ID</definition>
        <argsstring>(int digest_id)</argsstring>
        <name>br_digest_size_by_ID</name>
        <param>
          <type>int</type>
          <declname>digest_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad294d22eece892c518bcc633c2b9c34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* br_digest_OID</definition>
        <argsstring>(int digest_id, size_t *len)</argsstring>
        <name>br_digest_OID</name>
        <param>
          <type>int</type>
          <declname>digest_id</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aa997eb1b0fc3012e825554e31bdea140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_do_IP</definition>
        <argsstring>(uint32_t *xl, uint32_t *xr)</argsstring>
        <name>br_des_do_IP</name>
        <param>
          <type>uint32_t *</type>
          <declname>xl</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>xr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a33578117a3777424e5c043519e56073a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_do_invIP</definition>
        <argsstring>(uint32_t *xl, uint32_t *xr)</argsstring>
        <name>br_des_do_invIP</name>
        <param>
          <type>uint32_t *</type>
          <declname>xl</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>xr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a923d75b6ae4832de9815a573c565b863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_keysched_unit</definition>
        <argsstring>(uint32_t *skey, const void *key)</argsstring>
        <name>br_des_keysched_unit</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a98fa7ed88f50502c989bc6813a1896eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_rev_skey</definition>
        <argsstring>(uint32_t *skey)</argsstring>
        <name>br_des_rev_skey</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ace30c20c7bd45a5ee38e127a8f98735c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_des_tab_keysched</definition>
        <argsstring>(uint32_t *skey, const void *key, size_t key_len)</argsstring>
        <name>br_des_tab_keysched</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab0d765538144ac24fa6790706d54fc91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_des_ct_keysched</definition>
        <argsstring>(uint32_t *skey, const void *key, size_t key_len)</argsstring>
        <name>br_des_ct_keysched</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a2d9372ece3345653181d2a7ff69d7fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_ct_skey_expand</definition>
        <argsstring>(uint32_t *sk_exp, unsigned num_rounds, const uint32_t *skey)</argsstring>
        <name>br_des_ct_skey_expand</name>
        <param>
          <type>uint32_t *</type>
          <declname>sk_exp</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a26b327c059766d190928f1c9da154350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_tab_process_block</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, void *block)</argsstring>
        <name>br_des_tab_process_block</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad91799ee5defedb5d6d51f75532c3bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_ct_process_block</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, void *block)</argsstring>
        <name>br_des_ct_process_block</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac935f5f8c103812db6d899951fa93990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_keysched</definition>
        <argsstring>(uint32_t *skey, const void *key, size_t key_len)</argsstring>
        <name>br_aes_keysched</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac80c5be751f09bb2833660a26df83af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_big_keysched_inv</definition>
        <argsstring>(uint32_t *skey, const void *key, size_t key_len)</argsstring>
        <name>br_aes_big_keysched_inv</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a268efd7787bc1d8f0e000dde3f6acec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_encrypt</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, void *data)</argsstring>
        <name>br_aes_big_encrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a3fa6589be0ab30a139e9f8ee0e9b7032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_decrypt</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, void *data)</argsstring>
        <name>br_aes_big_decrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a944fd1fbccfca4eb962ab1949bc979d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_encrypt</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, void *data)</argsstring>
        <name>br_aes_small_encrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a4205f4a515c3979d367e2552b388d467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_decrypt</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, void *data)</argsstring>
        <name>br_aes_small_decrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a5693d7a6dfe8f7977a163b4662bcd9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ortho</definition>
        <argsstring>(uint32_t *q)</argsstring>
        <name>br_aes_ct_ortho</name>
        <param>
          <type>uint32_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a534fa936b4b2b06db4ffc83837df3564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_bitslice_Sbox</definition>
        <argsstring>(uint32_t *q)</argsstring>
        <name>br_aes_ct_bitslice_Sbox</name>
        <param>
          <type>uint32_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1afdde041c57527c1a6669983627e5f95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_bitslice_invSbox</definition>
        <argsstring>(uint32_t *q)</argsstring>
        <name>br_aes_ct_bitslice_invSbox</name>
        <param>
          <type>uint32_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aa3938fd18246cb71ac81989f20fe67c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_bitslice_encrypt</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, uint32_t *q)</argsstring>
        <name>br_aes_ct_bitslice_encrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a318754784c12122e9a05bfa4d1128195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_bitslice_decrypt</definition>
        <argsstring>(unsigned num_rounds, const uint32_t *skey, uint32_t *q)</argsstring>
        <name>br_aes_ct_bitslice_decrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac4b503f6c5b8f4cf7cbf2fc8add7cdf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_ct_keysched</definition>
        <argsstring>(uint32_t *comp_skey, const void *key, size_t key_len)</argsstring>
        <name>br_aes_ct_keysched</name>
        <param>
          <type>uint32_t *</type>
          <declname>comp_skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1807" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aceab67062b0f06575c115a81d9eaf0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_skey_expand</definition>
        <argsstring>(uint32_t *skey, unsigned num_rounds, const uint32_t *comp_skey)</argsstring>
        <name>br_aes_ct_skey_expand</name>
        <param>
          <type>uint32_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>comp_skey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a64f5528fac7139d99510e1bd277203d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ortho</definition>
        <argsstring>(uint64_t *q)</argsstring>
        <name>br_aes_ct64_ortho</name>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1833" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a04d249cdf210786ea36ab80e8c39caaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_interleave_in</definition>
        <argsstring>(uint64_t *q0, uint64_t *q1, const uint32_t *w)</argsstring>
        <name>br_aes_ct64_interleave_in</name>
        <param>
          <type>uint64_t *</type>
          <declname>q0</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1adb71af4e940ce8ea0108c9996c73510b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_interleave_out</definition>
        <argsstring>(uint32_t *w, uint64_t q0, uint64_t q1)</argsstring>
        <name>br_aes_ct64_interleave_out</name>
        <param>
          <type>uint32_t *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1848" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ad083ef8fb15a42d6412e5a6604be82a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_bitslice_Sbox</definition>
        <argsstring>(uint64_t *q)</argsstring>
        <name>br_aes_ct64_bitslice_Sbox</name>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1856" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac6c381281b86a26a86a00b8438d79c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_bitslice_invSbox</definition>
        <argsstring>(uint64_t *q)</argsstring>
        <name>br_aes_ct64_bitslice_invSbox</name>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1861" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a4792d63ba5fc10e1c33d7ba7f22ae781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_bitslice_encrypt</definition>
        <argsstring>(unsigned num_rounds, const uint64_t *skey, uint64_t *q)</argsstring>
        <name>br_aes_ct64_bitslice_encrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1868" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1aa91dcd5c54dee36a0c9b1cd7101a6c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_bitslice_decrypt</definition>
        <argsstring>(unsigned num_rounds, const uint64_t *skey, uint64_t *q)</argsstring>
        <name>br_aes_ct64_bitslice_decrypt</name>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1876" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab8143d67bbb2ef0803d7ba929a9a0d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_ct64_keysched</definition>
        <argsstring>(uint64_t *comp_skey, const void *key, size_t key_len)</argsstring>
        <name>br_aes_ct64_keysched</name>
        <param>
          <type>uint64_t *</type>
          <declname>comp_skey</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>key_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1adefcec2f51d993187c1c615c108469a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_skey_expand</definition>
        <argsstring>(uint64_t *skey, unsigned num_rounds, const uint64_t *comp_skey)</argsstring>
        <name>br_aes_ct64_skey_expand</name>
        <param>
          <type>uint64_t *</type>
          <declname>skey</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>num_rounds</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>comp_skey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a7d86ad9c1f2c8caab4ac5e4383a2deaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int br_aes_x86ni_supported</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_x86ni_supported</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a21473d61eec2d2170a3ea94745eb00f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_x86ni_keysched_enc</definition>
        <argsstring>(unsigned char *skni, const void *key, size_t len)</argsstring>
        <name>br_aes_x86ni_keysched_enc</name>
        <param>
          <type>unsigned char *</type>
          <declname>skni</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac7ecbe42abbd6e32764f6a9d416601e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_x86ni_keysched_dec</definition>
        <argsstring>(unsigned char *skni, const void *key, size_t len)</argsstring>
        <name>br_aes_x86ni_keysched_dec</name>
        <param>
          <type>unsigned char *</type>
          <declname>skni</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a2394f1bdeb25fc412a94a5c7b17fa8e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int br_aes_pwr8_supported</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_pwr8_supported</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1920" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a858602a096b3bd43927251812e82db5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned br_aes_pwr8_keysched</definition>
        <argsstring>(unsigned char *skni, const void *key, size_t len)</argsstring>
        <name>br_aes_pwr8_keysched</name>
        <param>
          <type>unsigned char *</type>
          <declname>skni</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1927" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a85bfc816ae0d8490182d26281cc44c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_pkcs1_sig_pad</definition>
        <argsstring>(const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, uint32_t n_bitlen, unsigned char *x)</argsstring>
        <name>br_rsa_pkcs1_sig_pad</name>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>n_bitlen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1939" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0d5411bc6ef6bbba0eb337001a592b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_pkcs1_sig_unpad</definition>
        <argsstring>(const unsigned char *sig, size_t sig_len, const unsigned char *hash_oid, size_t hash_len, unsigned char *hash_out)</argsstring>
        <name>br_rsa_pkcs1_sig_unpad</name>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>hash_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a24eb232f7c315ff5d6830da026893047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_oaep_unpad</definition>
        <argsstring>(const br_hash_class *dig, const void *label, size_t label_len, void *data, size_t *len)</argsstring>
        <name>br_rsa_oaep_unpad</name>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="1993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a30be509f0b2a90709d55a9a76d2b5b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_mgf1_xor</definition>
        <argsstring>(void *data, size_t len, const br_hash_class *dig, const void *seed, size_t seed_len)</argsstring>
        <name>br_mgf1_xor</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>seed_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2000" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a14c25f0f7e7bc0f1cd4467f9c737c35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ecdsa_i31_bits2int</definition>
        <argsstring>(uint32_t *x, const void *src, size_t len, uint32_t ebitlen)</argsstring>
        <name>br_ecdsa_i31_bits2int</name>
        <param>
          <type>uint32_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ebitlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2050" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0316f5767a8a9e842e5b1376711f83cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ecdsa_i15_bits2int</definition>
        <argsstring>(uint16_t *x, const void *src, size_t len, uint32_t ebitlen)</argsstring>
        <name>br_ecdsa_i15_bits2int</name>
        <param>
          <type>uint16_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ebitlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a83b2e78d6a7f4fb8ec513d710c23e2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbr__asn1__uint" kindref="compound">br_asn1_uint</ref></type>
        <definition>br_asn1_uint br_asn1_uint_prepare</definition>
        <argsstring>(const void *xdata, size_t xlen)</argsstring>
        <name>br_asn1_uint_prepare</name>
        <param>
          <type>const void *</type>
          <declname>xdata</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2089" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a2064347a774e763570bb5707b4f54f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_asn1_encode_length</definition>
        <argsstring>(void *dest, size_t len)</argsstring>
        <name>br_asn1_encode_length</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a773d6b0c13845451d7187d30326cd927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_asn1_encode_uint</definition>
        <argsstring>(void *dest, br_asn1_uint pp)</argsstring>
        <name>br_asn1_encode_uint</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structbr__asn1__uint" kindref="compound">br_asn1_uint</ref></type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a5132876046d42bb2250621992e087daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* br_get_curve_OID</definition>
        <argsstring>(int curve)</argsstring>
        <name>br_get_curve_OID</name>
        <param>
          <type>int</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a0e42de9ebfc9fe8277f9d2ae9b02a817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ssl_hs_client_init_main</definition>
        <argsstring>(void *ctx)</argsstring>
        <name>br_ssl_hs_client_init_main</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ab65e9a2babe99b3e68a6abc8c88a92da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ssl_hs_client_run</definition>
        <argsstring>(void *ctx)</argsstring>
        <name>br_ssl_hs_client_run</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac02e0689e9ee59271ddedc2a4c5e7860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ssl_hs_server_init_main</definition>
        <argsstring>(void *ctx)</argsstring>
        <name>br_ssl_hs_server_init_main</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1a790493c23952bac16142f0da8fd63182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ssl_hs_server_run</definition>
        <argsstring>(void *ctx)</argsstring>
        <name>br_ssl_hs_server_run</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="inner_8h_1ac9c738300befba72169feaa43a647cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int br_ssl_choose_hash</definition>
        <argsstring>(unsigned bf)</argsstring>
        <name>br_ssl_choose_hash</name>
        <param>
          <type>unsigned</type>
          <declname>bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/inner.h" line="2382" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Thomas<sp/>Pornin<sp/>&lt;pornin@bolet.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INNER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INNER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bearssl__hash_8h" kindref="compound">bearssl_hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>On<sp/>MSVC,<sp/>disable<sp/>the<sp/>warning<sp/>about<sp/>applying<sp/>unary<sp/>minus<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>unsigned<sp/>type:<sp/>it<sp/>is<sp/>standard,<sp/>we<sp/>do<sp/>it<sp/>all<sp/>the<sp/>time,<sp/>and<sp/>for</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>good<sp/>reasons.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4146<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>size<sp/>for<sp/>a<sp/>RSA<sp/>modulus<sp/>(in<sp/>bits).<sp/>Allocated<sp/>stack<sp/>buffers</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>depend<sp/>on<sp/>that<sp/>size,<sp/>so<sp/>this<sp/>value<sp/>should<sp/>be<sp/>kept<sp/>small.<sp/>Currently,</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>2048-bit<sp/>RSA<sp/>keys<sp/>offer<sp/>adequate<sp/>security,<sp/>and<sp/>should<sp/>still<sp/>do<sp/>so<sp/>for</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>the<sp/>next<sp/>few<sp/>decades;<sp/>however,<sp/>a<sp/>number<sp/>of<sp/>widespread<sp/>PKI<sp/>have</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>already<sp/>set<sp/>their<sp/>root<sp/>keys<sp/>to<sp/>RSA-4096,<sp/>so<sp/>we<sp/>should<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>process<sp/>such<sp/>keys.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>This<sp/>value<sp/>MUST<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>64.<sp/>This<sp/>value<sp/>MUST<sp/>NOT<sp/>exceed<sp/>47666</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>(some<sp/>computations<sp/>in<sp/>RSA<sp/>key<sp/>generation<sp/>rely<sp/>on<sp/>the<sp/>factor<sp/>size<sp/>being</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>no<sp/>more<sp/>than<sp/>23833<sp/>bits).<sp/>RSA<sp/>key<sp/>sizes<sp/>beyond<sp/>3072<sp/>bits<sp/>don&apos;t<sp/>make<sp/>a</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>lot<sp/>of<sp/>sense<sp/>anyway.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MAX_RSA_SIZE<sp/><sp/><sp/>4096</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Minimum<sp/>size<sp/>for<sp/>a<sp/>RSA<sp/>modulus<sp/>(in<sp/>bits);<sp/>this<sp/>value<sp/>is<sp/>used<sp/>only<sp/>to</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>filter<sp/>out<sp/>invalid<sp/>parameters<sp/>for<sp/>key<sp/>pair<sp/>generation.<sp/>Normally,</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>applications<sp/>should<sp/>not<sp/>use<sp/>RSA<sp/>keys<sp/>smaller<sp/>than<sp/>2048<sp/>bits;<sp/>but<sp/>some</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>specific<sp/>cases<sp/>might<sp/>need<sp/>shorter<sp/>keys,<sp/>for<sp/>legacy<sp/>or<sp/>research</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>purposes.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MIN_RSA_SIZE<sp/><sp/><sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>size<sp/>for<sp/>a<sp/>RSA<sp/>factor<sp/>(in<sp/>bits).<sp/>This<sp/>is<sp/>for<sp/>RSA<sp/>private-key</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>operations.<sp/>Default<sp/>is<sp/>to<sp/>support<sp/>factors<sp/>up<sp/>to<sp/>a<sp/>bit<sp/>more<sp/>than<sp/>half</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>the<sp/>maximum<sp/>modulus<sp/>size.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>This<sp/>value<sp/>MUST<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>32.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MAX_RSA_FACTOR<sp/><sp/><sp/>((BR_MAX_RSA_SIZE<sp/>+<sp/>64)<sp/>&gt;&gt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>size<sp/>for<sp/>an<sp/>EC<sp/>curve<sp/>(modulus<sp/>or<sp/>order),<sp/>in<sp/>bits.<sp/>Size<sp/>of</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>stack<sp/>buffers<sp/>depends<sp/>on<sp/>that<sp/>parameter.<sp/>This<sp/>size<sp/>MUST<sp/>be<sp/>a<sp/>multiple</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>of<sp/>8<sp/>(so<sp/>that<sp/>decoding<sp/>an<sp/>integer<sp/>with<sp/>that<sp/>many<sp/>bytes<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>overflow).</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MAX_EC_SIZE<sp/><sp/><sp/>528</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>Some<sp/>macros<sp/>to<sp/>recognize<sp/>the<sp/>current<sp/>architecture.<sp/>Right<sp/>now,<sp/>we<sp/>are</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>interested<sp/>into<sp/>automatically<sp/>recognizing<sp/>architecture<sp/>with<sp/>efficient</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>64-bit<sp/>types<sp/>so<sp/>that<sp/>we<sp/>may<sp/>automatically<sp/>use<sp/>implementations<sp/>that</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>use<sp/>64-bit<sp/>registers<sp/>in<sp/>that<sp/>case.<sp/>Future<sp/>versions<sp/>may<sp/>detect,<sp/>e.g.,</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>availability<sp/>of<sp/>SSE2<sp/>intrinsics.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>If<sp/>&apos;unsigned<sp/>long&apos;<sp/>is<sp/>a<sp/>64-bit<sp/>type,<sp/>then<sp/>we<sp/>assume<sp/>that<sp/>64-bit<sp/>types</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>are<sp/>efficient.<sp/>Otherwise,<sp/>we<sp/>rely<sp/>on<sp/>macros<sp/>that<sp/>depend<sp/>on<sp/>compiler,</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>OS<sp/>and<sp/>architecture.<sp/>In<sp/>any<sp/>case,<sp/>failure<sp/>to<sp/>detect<sp/>the<sp/>architecture</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>as<sp/>64-bit<sp/>means<sp/>that<sp/>the<sp/>32-bit<sp/>code<sp/>will<sp/>be<sp/>used,<sp/>and<sp/>that<sp/>code</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>works<sp/>also<sp/>on<sp/>64-bit<sp/>architectures<sp/>(the<sp/>64-bit<sp/>code<sp/>may<sp/>simply<sp/>be</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>more<sp/>efficient).</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>The<sp/>test<sp/>on<sp/>&apos;unsigned<sp/>long&apos;<sp/>should<sp/>already<sp/>catch<sp/>most<sp/>cases,<sp/>the<sp/>one</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>notable<sp/>exception<sp/>being<sp/>Windows<sp/>code<sp/>where<sp/>&apos;unsigned<sp/>long&apos;<sp/>is<sp/>kept<sp/>to</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>32-bit<sp/>for<sp/>compatibility<sp/>with<sp/>all<sp/>the<sp/>legacy<sp/>code<sp/>that<sp/>liberally<sp/>uses</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>the<sp/>&apos;DWORD&apos;<sp/>type<sp/>for<sp/>32-bit<sp/>values.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>Macro<sp/>names<sp/>are<sp/>taken<sp/>from:<sp/>http://nadeausoftware.com/articles/2012/02/c_c_tip_how_detect_processor_type_using_compiler_predefined_macros</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((ULONG_MAX<sp/>&gt;&gt;<sp/>31)<sp/>&gt;&gt;<sp/>31)<sp/>==<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ia64)<sp/>||<sp/>defined(__itanium__)<sp/>||<sp/>defined(_M_IA64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__powerpc64__)<sp/>||<sp/>defined(__ppc64__)<sp/>||<sp/>defined(__PPC64__)<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__64BIT__)<sp/>||<sp/>defined(_LP64)<sp/>||<sp/>defined(__LP64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__sparc64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__x86_64__)<sp/>||<sp/>defined(_M_X64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__aarch64__)<sp/>||<sp/>defined(_M_ARM64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__mips64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>Set<sp/>BR_LOMUL<sp/>on<sp/>platforms<sp/>where<sp/>it<sp/>makes<sp/>sense.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_LOMUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_ARMEL_CORTEXM_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_LOMUL<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>Architecture<sp/>detection.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_i386</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__i386__<sp/>||<sp/>_M_IX86</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_i386<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_amd64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__x86_64__<sp/>||<sp/>_M_X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_amd64<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>Compiler<sp/>brand<sp/>and<sp/>version.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>Implementations<sp/>that<sp/>use<sp/>intrinsics<sp/>need<sp/>to<sp/>detect<sp/>the<sp/>compiler<sp/>type</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>and<sp/>version<sp/>because<sp/>some<sp/>specific<sp/>actions<sp/>may<sp/>be<sp/>needed<sp/>to<sp/>activate</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>the<sp/>corresponding<sp/>opcodes,<sp/>both<sp/>for<sp/>header<sp/>inclusion,<sp/>and<sp/>when<sp/>using</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>them<sp/>in<sp/>a<sp/>function.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>BR_GCC,<sp/>BR_CLANG<sp/>and<sp/>BR_MSC<sp/>will<sp/>be<sp/>set<sp/>to<sp/>1<sp/>for,<sp/>respectively,<sp/>GCC,</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>Clang<sp/>and<sp/>MS<sp/>Visual<sp/>C.<sp/>For<sp/>each<sp/>of<sp/>them,<sp/>sub-macros<sp/>will<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>for<sp/>versions;<sp/>each<sp/>sub-macro<sp/>is<sp/>set<sp/>whenever<sp/>the<sp/>compiler<sp/>version<sp/>is</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>at<sp/>least<sp/>as<sp/>recent<sp/>as<sp/>the<sp/>one<sp/>corresponding<sp/>to<sp/>the<sp/>macro.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>GCC<sp/>thresholds<sp/>are<sp/>on<sp/>versions<sp/>4.4<sp/>to<sp/>4.9<sp/>and<sp/>5.0.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__GNUC__<sp/>&amp;&amp;<sp/>!__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__GNUC__<sp/>&gt;<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_5_0<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_9<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_8<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_7<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_6<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_5<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_4<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_5_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_9<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_8<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_7<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_6<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_5<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_GCC_4_4<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>Clang<sp/>thresholds<sp/>are<sp/>on<sp/>versions<sp/>3.7.0<sp/>and<sp/>3.8.0.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_CLANG<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__clang_major__<sp/>&gt;<sp/>3<sp/>||<sp/>(__clang_major__<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>__clang_minor__<sp/>&gt;=<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_CLANG_3_8<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__clang_major__<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>__clang_minor__<sp/>&gt;=<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_CLANG_3_7<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_CLANG_3_8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_CLANG_3_7<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>MS<sp/>Visual<sp/>C<sp/>thresholds<sp/>are<sp/>on<sp/>Visual<sp/>Studio<sp/>2005<sp/>to<sp/>2015.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_MSC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2015<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2013<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1700</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2012<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2010<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2008<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2005<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_MSC_2015</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2013<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_MSC_2013</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2012<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_MSC_2012</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2010<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_MSC_2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2008<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_MSC_2008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_MSC_2005<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>GCC<sp/>4.4+<sp/>and<sp/>Clang<sp/>3.7+<sp/>allow<sp/>tagging<sp/>specific<sp/>functions<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>&apos;target&apos;<sp/>attribute<sp/>that<sp/>activates<sp/>support<sp/>for<sp/>specific<sp/>opcodes.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_4<sp/>||<sp/>BR_CLANG_3_7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGET(x)<sp/><sp/><sp/>__attribute__((target(x)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGET(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>AES-NI<sp/>intrinsics<sp/>are<sp/>available<sp/>on<sp/>x86<sp/>(32-bit<sp/>and<sp/>64-bit)<sp/>with</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>GCC<sp/>4.8+,<sp/>Clang<sp/>3.7+<sp/>and<sp/>MSC<sp/>2012+.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_AES_X86NI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BR_i386<sp/>||<sp/>BR_amd64)<sp/>&amp;&amp;<sp/>(BR_GCC_4_8<sp/>||<sp/>BR_CLANG_3_7<sp/>||<sp/>BR_MSC_2012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_AES_X86NI<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>SSE2<sp/>intrinsics<sp/>are<sp/>available<sp/>on<sp/>x86<sp/>(32-bit<sp/>and<sp/>64-bit)<sp/>with</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>GCC<sp/>4.4+,<sp/>Clang<sp/>3.7+<sp/>and<sp/>MSC<sp/>2005+.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BR_i386<sp/>||<sp/>BR_amd64)<sp/>&amp;&amp;<sp/>(BR_GCC_4_4<sp/>||<sp/>BR_CLANG_3_7<sp/>||<sp/>BR_MSC_2005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSE2<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>RDRAND<sp/>intrinsics<sp/>are<sp/>available<sp/>on<sp/>x86<sp/>(32-bit<sp/>and<sp/>64-bit)<sp/>with</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>GCC<sp/>4.6+,<sp/>Clang<sp/>3.7+<sp/>and<sp/>MSC<sp/>2012+.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_RDRAND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BR_i386<sp/>||<sp/>BR_amd64)<sp/>&amp;&amp;<sp/>(BR_GCC_4_6<sp/>||<sp/>BR_CLANG_3_7<sp/>||<sp/>BR_MSC_2012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_RDRAND<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>Determine<sp/>type<sp/>of<sp/>OS<sp/>for<sp/>random<sp/>number<sp/>generation.<sp/>Macro<sp/>names<sp/>and</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>values<sp/>are<sp/>documented<sp/>on:</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>https://sourceforge.net/p/predef/wiki/OperatingSystems/</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>TODO:<sp/>enrich<sp/>the<sp/>list<sp/>of<sp/>detected<sp/>system.<sp/>Also<sp/>add<sp/>detection<sp/>for</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>alternate<sp/>system<sp/>calls<sp/>like<sp/>getentropy(),<sp/>which<sp/>are<sp/>usually</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>preferable<sp/>when<sp/>available.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_USE_URANDOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_AIX<sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>__ANDROID__<sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>__FreeBSD__<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>__NetBSD__<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>__OpenBSD__<sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>__DragonFly__<sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>__linux__<sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>(defined<sp/>__sun<sp/>&amp;&amp;<sp/>(defined<sp/>__SVR4<sp/>||<sp/>defined<sp/>__svr4__))<sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>(defined<sp/>__APPLE__<sp/>&amp;&amp;<sp/>defined<sp/>__MACH__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_USE_URANDOM<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_USE_WIN32_RAND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_WIN32<sp/>||<sp/>defined<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_USE_WIN32_RAND<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>POWER8<sp/>crypto<sp/>support.<sp/>We<sp/>rely<sp/>on<sp/>compiler<sp/>macros<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>architecture,<sp/>since<sp/>we<sp/>do<sp/>not<sp/>have<sp/>a<sp/>reliable,<sp/>simple<sp/>way<sp/>to<sp/>detect</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>the<sp/>required<sp/>support<sp/>at<sp/>runtime<sp/>(we<sp/>could<sp/>try<sp/>running<sp/>an<sp/>opcode,<sp/>and</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>trapping<sp/>the<sp/>exception<sp/>or<sp/>signal<sp/>on<sp/>illegal<sp/>instruction,<sp/>but<sp/>this</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>induces<sp/>some<sp/>non-trivial<sp/>OS<sp/>dependencies<sp/>that<sp/>we<sp/>would<sp/>prefer<sp/>to</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>avoid<sp/>if<sp/>possible).</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_POWER8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__GNUC__<sp/>&amp;&amp;<sp/>((_ARCH_PWR8<sp/>||<sp/>_ARCH_PPC)<sp/>&amp;&amp;<sp/>__CRYPTO__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>Detect<sp/>endinanness<sp/>on<sp/>POWER8.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_POWER8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>BR_POWER8_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BR_POWER8_BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_POWER8_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_BE<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_BE<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>BR_POWER8_BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BR_POWER8_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_POWER8_BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_LE<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_LE<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__LITTLE_ENDIAN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_LE<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_BE<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_LE<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_POWER8_BE<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>Detect<sp/>support<sp/>for<sp/>128-bit<sp/>integers.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>BR_INT128<sp/>&amp;&amp;<sp/>!defined<sp/>BR_UMUL128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SIZEOF_INT128__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_INT128<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>_M_X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_UMUL128<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>Detect<sp/>support<sp/>for<sp/>unaligned<sp/>accesses<sp/>with<sp/>known<sp/>endianness.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/><sp/>x86<sp/>(both<sp/>32-bit<sp/>and<sp/>64-bit)<sp/>is<sp/>little-endian<sp/>and<sp/>allows<sp/>unaligned</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/>accesses.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/><sp/>POWER/PowerPC<sp/>allows<sp/>unaligned<sp/>accesses<sp/>when<sp/>big-endian.<sp/>POWER8<sp/>and</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/><sp/>later<sp/>also<sp/>allow<sp/>unaligned<sp/>accesses<sp/>when<sp/>little-endian.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>BR_LE_UNALIGNED<sp/>&amp;&amp;<sp/>!defined<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__i386<sp/>||<sp/>__i386__<sp/>||<sp/>__x86_64__<sp/>||<sp/>_M_IX86<sp/>||<sp/>_M_X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_LE_UNALIGNED<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>BR_POWER8_BE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_BE_UNALIGNED<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>BR_POWER8_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_LE_UNALIGNED<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(__powerpc__<sp/>||<sp/>__powerpc64__<sp/>||<sp/>_M_PPC<sp/>||<sp/>_ARCH_PPC<sp/>||<sp/>_ARCH_PPC64)<sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>__BIG_ENDIAN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_BE_UNALIGNED<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>Detect<sp/>support<sp/>for<sp/>an<sp/>OS-provided<sp/>time<sp/>source.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_USE_UNIX_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>__unix__<sp/>||<sp/>defined<sp/>__linux__<sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined<sp/>_POSIX_SOURCE<sp/>||<sp/>defined<sp/>_POSIX_C_SOURCE<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>(defined<sp/>__APPLE__<sp/>&amp;&amp;<sp/>defined<sp/>__MACH__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_USE_UNIX_TIME<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_USE_WIN32_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_WIN32<sp/>||<sp/>defined<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_USE_WIN32_TIME<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/>Encoding/decoding<sp/>functions.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>32-bit<sp/>and<sp/>64-bit<sp/>decoding,<sp/>both<sp/>little-endian<sp/>and<sp/>big-endian,<sp/>is</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>implemented<sp/>with<sp/>the<sp/>inline<sp/>functions<sp/>below.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>When<sp/>allowed<sp/>by<sp/>some<sp/>compile-time<sp/>options<sp/>(autodetected<sp/>or<sp/>provided),</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>optimised<sp/>code<sp/>is<sp/>used,<sp/>to<sp/>perform<sp/>direct<sp/>memory<sp/>access<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>underlying<sp/>architecture<sp/>supports<sp/>it,<sp/>both<sp/>for<sp/>endianness<sp/>and</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>alignment.<sp/>This,<sp/>however,<sp/>may<sp/>trigger<sp/>strict<sp/>aliasing<sp/>issues;<sp/>the</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>code<sp/>below<sp/>uses<sp/>unions<sp/>to<sp/>perform<sp/>(supposedly)<sp/>safe<sp/>type<sp/>punning.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>Since<sp/>the<sp/>C<sp/>aliasing<sp/>rules<sp/>are<sp/>relatively<sp/>complex<sp/>and<sp/>were<sp/>amended,</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>or<sp/>at<sp/>least<sp/>re-explained<sp/>with<sp/>different<sp/>phrasing,<sp/>in<sp/>all<sp/>successive</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>versions<sp/>of<sp/>the<sp/>C<sp/>standard,<sp/>it<sp/>is<sp/>always<sp/>a<sp/>bit<sp/>risky<sp/>to<sp/>bet<sp/>that<sp/>any</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>specific<sp/>version<sp/>of<sp/>a<sp/>C<sp/>compiler<sp/>got<sp/>it<sp/>right,<sp/>for<sp/>some<sp/>notion<sp/>of</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>&quot;right&quot;.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="unionbr__union__u16" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>u;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t)];</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}<sp/><ref refid="unionbr__union__u16" kindref="compound">br_union_u16</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="unionbr__union__u32" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>u;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)];</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}<sp/><ref refid="unionbr__union__u32" kindref="compound">br_union_u32</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="unionbr__union__u64" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>u;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t)];</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}<sp/><ref refid="unionbr__union__u64" kindref="compound">br_union_u64</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">br_enc16le(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_LE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="unionbr__union__u16" kindref="compound">br_union_u16</ref><sp/>*)dst)-&gt;u<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dst;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)x;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">br_enc16be(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="unionbr__union__u16" kindref="compound">br_union_u16</ref><sp/>*)dst)-&gt;u<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dst;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)x;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">br_dec16le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_LE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbr__union__u16" kindref="compound">br_union_u16</ref><sp/>*)src)-&gt;u;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)buf[0]<sp/>|<sp/>((unsigned)buf[1]<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">br_dec16be(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbr__union__u16" kindref="compound">br_union_u16</ref><sp/>*)src)-&gt;u;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)buf[0]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(unsigned)buf[1];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">br_enc32le(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/>uint32_t<sp/>x)</highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_LE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="unionbr__union__u32" kindref="compound">br_union_u32</ref><sp/>*)dst)-&gt;u<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dst;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)x;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">br_enc32be(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/>uint32_t<sp/>x)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="unionbr__union__u32" kindref="compound">br_union_u32</ref><sp/>*)dst)-&gt;u<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dst;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)x;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="554"><highlight class="normal">br_dec32le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_LE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbr__union__u32" kindref="compound">br_union_u32</ref><sp/>*)src)-&gt;u;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)buf[0]</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint32_t)buf[1]<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint32_t)buf[2]<sp/>&lt;&lt;<sp/>16)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint32_t)buf[3]<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="570"><highlight class="normal">br_dec32be(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbr__union__u32" kindref="compound">br_union_u32</ref><sp/>*)src)-&gt;u;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)buf[0]<sp/>&lt;&lt;<sp/>24)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint32_t)buf[1]<sp/>&lt;&lt;<sp/>16)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint32_t)buf[2]<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(uint32_t)buf[3];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">br_enc64le(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/>uint64_t<sp/>x)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_LE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="unionbr__union__u64" kindref="compound">br_union_u64</ref><sp/>*)dst)-&gt;u<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dst;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>br_enc32le(buf,<sp/>(uint32_t)x);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>br_enc32le(buf<sp/>+<sp/>4,<sp/>(uint32_t)(x<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">br_enc64be(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/>uint64_t<sp/>x)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="unionbr__union__u64" kindref="compound">br_union_u64</ref><sp/>*)dst)-&gt;u<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dst;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>br_enc32be(buf,<sp/>(uint32_t)(x<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>br_enc32be(buf<sp/>+<sp/>4,<sp/>(uint32_t)x);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t</highlight></codeline>
<codeline lineno="614"><highlight class="normal">br_dec64le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_LE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbr__union__u64" kindref="compound">br_union_u64</ref><sp/>*)src)-&gt;u;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)br_dec32le(buf)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint64_t)br_dec32le(buf<sp/>+<sp/>4)<sp/>&lt;&lt;<sp/>32);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t</highlight></codeline>
<codeline lineno="628"><highlight class="normal">br_dec64be(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_BE_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbr__union__u64" kindref="compound">br_union_u64</ref><sp/>*)src)-&gt;u;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint64_t)br_dec32be(buf)<sp/>&lt;&lt;<sp/>32)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(uint64_t)br_dec32be(buf<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>Range<sp/>decoding<sp/>and<sp/>encoding<sp/>(for<sp/>several<sp/>successive<sp/>values).</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_dec16le(uint16_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_dec16be(uint16_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_enc16le(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_enc16be(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_dec32le(uint32_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_dec32be(uint32_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_enc32le(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_enc32be(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_dec64le(uint64_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_dec64be(uint64_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_enc64le(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_range_enc64be(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>Byte-swap<sp/>a<sp/>32-bit<sp/>integer.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="663"><highlight class="normal">br_swap32(uint32_t<sp/>x)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((x<sp/>&amp;<sp/>(uint32_t)0x00FF00FF)<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((x<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>(uint32_t)0x00FF00FF);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>Support<sp/>code<sp/>for<sp/>hash<sp/>functions.</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>IV<sp/>for<sp/>MD5,<sp/>SHA-1,<sp/>SHA-224<sp/>and<sp/>SHA-256.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>br_md5_IV[];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>br_sha1_IV[];</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>br_sha224_IV[];</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>br_sha256_IV[];</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>Round<sp/>functions<sp/>for<sp/>MD5,<sp/>SHA-1,<sp/>SHA-224<sp/>and<sp/>SHA-256<sp/>(SHA-224<sp/>and</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>SHA-256<sp/>use<sp/>the<sp/>same<sp/>round<sp/>function).</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_md5_round(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>*val);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_sha1_round(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>*val);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_sha2small_round(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>*val);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/>The<sp/>core<sp/>function<sp/>for<sp/>the<sp/>TLS<sp/>PRF.<sp/>It<sp/>computes</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>P_hash(secret,<sp/>label<sp/>+<sp/>seed),<sp/>and<sp/>XORs<sp/>the<sp/>result<sp/>into<sp/>the<sp/>dst<sp/>buffer.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="697"><highlight class="comment">void<sp/>br_tls_phash(void<sp/>*dst,<sp/>size_t<sp/>len,</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_hash_class<sp/>*dig,</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>void<sp/>*secret,<sp/>size_t<sp/>secret_len,<sp/>const<sp/>char<sp/>*label,</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>seed_num,<sp/>const<sp/>br_tls_prf_seed_chunk<sp/>*seed);</highlight></codeline>
<codeline lineno="701"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>Copy<sp/>all<sp/>configured<sp/>hash<sp/>implementations<sp/>from<sp/>a<sp/>multihash<sp/>context</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>to<sp/>another.</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">br_multihash_copyimpl(<ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*src)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)dst-&gt;impl,<sp/>src-&gt;impl,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>src-&gt;impl);</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>Constant-time<sp/>primitives.<sp/>These<sp/>functions<sp/>manipulate<sp/>32-bit<sp/>values<sp/>in</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>order<sp/>to<sp/>provide<sp/>constant-time<sp/>comparisons<sp/>and<sp/>multiplexers.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>Boolean<sp/>values<sp/>(the<sp/>&quot;ctl&quot;<sp/>bits)<sp/>MUST<sp/>have<sp/>value<sp/>0<sp/>or<sp/>1.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/>Implementation<sp/>notes:</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>=====================</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>The<sp/>uintN_t<sp/>types<sp/>are<sp/>unsigned<sp/>and<sp/>with<sp/>width<sp/>exactly<sp/>N<sp/>bits;<sp/>the<sp/>C</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>standard<sp/>guarantees<sp/>that<sp/>computations<sp/>are<sp/>performed<sp/>modulo<sp/>2^N,<sp/>and</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>there<sp/>can<sp/>be<sp/>no<sp/>overflow.<sp/>Negation<sp/>(unary<sp/>&apos;-&apos;)<sp/>works<sp/>on<sp/>unsigned<sp/>types</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>The<sp/>intN_t<sp/>types<sp/>are<sp/>guaranteed<sp/>to<sp/>have<sp/>width<sp/>exactly<sp/>N<sp/>bits,<sp/>with<sp/>no</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*<sp/>padding<sp/>bit,<sp/>and<sp/>using<sp/>two&apos;s<sp/>complement<sp/>representation.<sp/>Casting</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/>intN_t<sp/>to<sp/>uintN_t<sp/>really<sp/>is<sp/>conversion<sp/>modulo<sp/>2^N.<sp/>Beware<sp/>that<sp/>intN_t</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>types,<sp/>being<sp/>signed,<sp/>trigger<sp/>implementation-defined<sp/>behaviour<sp/>on</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*<sp/>overflow<sp/>(including<sp/>raising<sp/>some<sp/>signal):<sp/>with<sp/>GCC,<sp/>while<sp/>modular</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>arithmetics<sp/>are<sp/>usually<sp/>applied,<sp/>the<sp/>optimizer<sp/>may<sp/>assume<sp/>that</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/>overflows<sp/>don&apos;t<sp/>occur<sp/>(unless<sp/>the<sp/>-fwrapv<sp/>command-line<sp/>option<sp/>is</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>added);<sp/>Clang<sp/>has<sp/>the<sp/>additional<sp/>-ftrapv<sp/>option<sp/>to<sp/>explicitly<sp/>trap<sp/>on</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>integer<sp/>overflow<sp/>or<sp/>underflow.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>Negate<sp/>a<sp/>boolean.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="744"><highlight class="normal">NOT(uint32_t<sp/>ctl)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctl<sp/>^<sp/>1;</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>Multiplexer:<sp/>returns<sp/>x<sp/>if<sp/>ctl<sp/>==<sp/>1,<sp/>y<sp/>if<sp/>ctl<sp/>==<sp/>0.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="753"><highlight class="normal">MUX(uint32_t<sp/>ctl,<sp/>uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>^<sp/>(-ctl<sp/>&amp;<sp/>(x<sp/>^<sp/>y));</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>Equality<sp/>check:<sp/>returns<sp/>1<sp/>if<sp/>x<sp/>==<sp/>y,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="762"><highlight class="normal">EQ(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="763"><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>q;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>x<sp/>^<sp/>y;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT((q<sp/>|<sp/>-q)<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>Inequality<sp/>check:<sp/>returns<sp/>1<sp/>if<sp/>x<sp/>!=<sp/>y,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="774"><highlight class="normal">NEQ(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>q;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>x<sp/>^<sp/>y;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(q<sp/>|<sp/>-q)<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/>Comparison:<sp/>returns<sp/>1<sp/>if<sp/>x<sp/>&gt;<sp/>y,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="786"><highlight class="normal">GT(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>both<sp/>x<sp/>&lt;<sp/>2^31<sp/>and<sp/>x<sp/>&lt;<sp/>2^31,<sp/>then<sp/>y-x<sp/>will<sp/>have<sp/>its<sp/>high</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>bit<sp/>set<sp/>if<sp/>x<sp/>&gt;<sp/>y,<sp/>cleared<sp/>otherwise.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>either<sp/>x<sp/>&gt;=<sp/>2^31<sp/>or<sp/>y<sp/>&gt;=<sp/>2^31<sp/>(but<sp/>not<sp/>both),<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>result<sp/>is<sp/>the<sp/>high<sp/>bit<sp/>of<sp/>x.</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>both<sp/>x<sp/>&gt;=<sp/>2^31<sp/>and<sp/>y<sp/>&gt;=<sp/>2^31,<sp/>then<sp/>we<sp/>can<sp/>virtually</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>subtract<sp/>2^31<sp/>from<sp/>both,<sp/>and<sp/>we<sp/>are<sp/>back<sp/>to<sp/>the<sp/>first<sp/>case.</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Since<sp/>(y-2^31)-(x-2^31)<sp/>=<sp/>y-x,<sp/>the<sp/>subtraction<sp/>is<sp/>already</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fine.</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>z;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>y<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z<sp/>^<sp/>((x<sp/>^<sp/>y)<sp/>&amp;<sp/>(x<sp/>^<sp/>z)))<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>Other<sp/>comparisons<sp/>(greater-or-equal,<sp/>lower-than,<sp/>lower-or-equal).</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GE(x,<sp/>y)<sp/><sp/><sp/>NOT(GT(y,<sp/>x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LT(x,<sp/>y)<sp/><sp/><sp/>GT(y,<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LE(x,<sp/>y)<sp/><sp/><sp/>NOT(GT(x,<sp/>y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>General<sp/>comparison:<sp/>returned<sp/>value<sp/>is<sp/>-1,<sp/>0<sp/>or<sp/>1,<sp/>depending<sp/>on</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>whether<sp/>x<sp/>is<sp/>lower<sp/>than,<sp/>equal<sp/>to,<sp/>or<sp/>greater<sp/>than<sp/>y.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t</highlight></codeline>
<codeline lineno="818"><highlight class="normal">CMP(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)GT(x,<sp/>y)<sp/>|<sp/>-(int32_t)GT(y,<sp/>x);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>x<sp/>==<sp/>0,<sp/>0<sp/>otherwise.<sp/>Take<sp/>care<sp/>that<sp/>the<sp/>operand<sp/>is<sp/>signed.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="827"><highlight class="normal">EQ0(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>q;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>(uint32_t)x;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~(q<sp/>|<sp/>-q)<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>x<sp/>&gt;<sp/>0,<sp/>0<sp/>otherwise.<sp/>Take<sp/>care<sp/>that<sp/>the<sp/>operand<sp/>is<sp/>signed.</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="839"><highlight class="normal">GT0(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>High<sp/>bit<sp/>of<sp/>-x<sp/>is<sp/>0<sp/>if<sp/>x<sp/>==<sp/>0,<sp/>but<sp/>1<sp/>if<sp/>x<sp/>&gt;<sp/>0.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>q;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>(uint32_t)x;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(~q<sp/>&amp;<sp/>-q)<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>x<sp/>&gt;=<sp/>0,<sp/>0<sp/>otherwise.<sp/>Take<sp/>care<sp/>that<sp/>the<sp/>operand<sp/>is<sp/>signed.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="854"><highlight class="normal">GE0(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="855"><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~(uint32_t)x<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>x<sp/>&lt;<sp/>0,<sp/>0<sp/>otherwise.<sp/>Take<sp/>care<sp/>that<sp/>the<sp/>operand<sp/>is<sp/>signed.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="863"><highlight class="normal">LT0(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)x<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>x<sp/>&lt;=<sp/>0,<sp/>0<sp/>otherwise.<sp/>Take<sp/>care<sp/>that<sp/>the<sp/>operand<sp/>is<sp/>signed.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="872"><highlight class="normal">LE0(int32_t<sp/>x)</highlight></codeline>
<codeline lineno="873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>q;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>~-x<sp/>has<sp/>its<sp/>high<sp/>bit<sp/>set<sp/>if<sp/>and<sp/>only<sp/>if<sp/>-x<sp/>is<sp/>nonnegative<sp/>(as</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>signed<sp/>int),<sp/>i.e.<sp/>x<sp/>is<sp/>in<sp/>the<sp/>-(2^31-1)<sp/>to<sp/>0<sp/>range.<sp/>We<sp/>must</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>do<sp/>an<sp/>OR<sp/>with<sp/>x<sp/>itself<sp/>to<sp/>account<sp/>for<sp/>x<sp/>=<sp/>-2^31.</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>(uint32_t)x;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(q<sp/>|<sp/>~-q)<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*<sp/>Conditional<sp/>copy:<sp/>src[]<sp/>is<sp/>copied<sp/>into<sp/>dst[]<sp/>if<sp/>and<sp/>only<sp/>if<sp/>ctl<sp/>is<sp/>1.</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*<sp/>dst[]<sp/>and<sp/>src[]<sp/>may<sp/>overlap<sp/>completely<sp/>(but<sp/>not<sp/>partially).</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ccopy(uint32_t<sp/>ctl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CCOPY<sp/><sp/><sp/>br_ccopy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>bit<sp/>length<sp/>of<sp/>a<sp/>32-bit<sp/>integer.<sp/>Returned<sp/>value<sp/>is<sp/>between<sp/>0</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*<sp/>and<sp/>32<sp/>(inclusive).</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="898"><highlight class="normal">BIT_LENGTH(uint32_t<sp/>x)</highlight></codeline>
<codeline lineno="899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>k,<sp/>c;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>NEQ(x,<sp/>0);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GT(x,<sp/>0xFFFF);<sp/>x<sp/>=<sp/>MUX(c,<sp/>x<sp/>&gt;&gt;<sp/>16,<sp/>x);<sp/>k<sp/>+=<sp/>c<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GT(x,<sp/>0x00FF);<sp/>x<sp/>=<sp/>MUX(c,<sp/>x<sp/>&gt;&gt;<sp/><sp/>8,<sp/>x);<sp/>k<sp/>+=<sp/>c<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GT(x,<sp/>0x000F);<sp/>x<sp/>=<sp/>MUX(c,<sp/>x<sp/>&gt;&gt;<sp/><sp/>4,<sp/>x);<sp/>k<sp/>+=<sp/>c<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GT(x,<sp/>0x0003);<sp/>x<sp/>=<sp/>MUX(c,<sp/>x<sp/>&gt;&gt;<sp/><sp/>2,<sp/>x);<sp/>k<sp/>+=<sp/>c<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>GT(x,<sp/>0x0001);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>minimum<sp/>of<sp/>x<sp/>and<sp/>y.</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="915"><highlight class="normal">MIN(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MUX(GT(x,<sp/>y),<sp/>y,<sp/>x);</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>maximum<sp/>of<sp/>x<sp/>and<sp/>y.</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="924"><highlight class="normal">MAX(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MUX(GT(x,<sp/>y),<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>Multiply<sp/>two<sp/>32-bit<sp/>integers,<sp/>with<sp/>a<sp/>64-bit<sp/>result.<sp/>This<sp/>default</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*<sp/>implementation<sp/>assumes<sp/>that<sp/>the<sp/>basic<sp/>multiplication<sp/>operator</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*<sp/>yields<sp/>constant-time<sp/>code.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUL(x,<sp/>y)<sp/><sp/><sp/>((uint64_t)(x)<sp/>*<sp/>(uint64_t)(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_CT_MUL31</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*<sp/>Alternate<sp/>implementation<sp/>of<sp/>MUL31,<sp/>that<sp/>will<sp/>be<sp/>constant-time<sp/>on<sp/>some</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*<sp/>(old)<sp/>platforms<sp/>where<sp/>the<sp/>default<sp/>MUL31<sp/>is<sp/>not.<sp/>Unfortunately,<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*<sp/>also<sp/>substantially<sp/>slower,<sp/>and<sp/>yields<sp/>larger<sp/>code,<sp/>on<sp/>more<sp/>modern</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>platforms,<sp/>which<sp/>is<sp/>why<sp/>it<sp/>is<sp/>deactivated<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*<sp/>MUL31_lo()<sp/>must<sp/>do<sp/>some<sp/>extra<sp/>work<sp/>because<sp/>on<sp/>some<sp/>platforms,<sp/>the</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/>_signed_<sp/>multiplication<sp/>may<sp/>return<sp/>early<sp/>if<sp/>the<sp/>top<sp/>bits<sp/>are<sp/>1.</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*<sp/>Simply<sp/>truncating<sp/>(casting)<sp/>the<sp/>output<sp/>of<sp/>MUL31()<sp/>would<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>sufficient,<sp/>because<sp/>the<sp/>compiler<sp/>may<sp/>notice<sp/>that<sp/>we<sp/>keep<sp/>only<sp/>the<sp/>low</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*<sp/>word,<sp/>and<sp/>then<sp/>replace<sp/>automatically<sp/>the<sp/>unsigned<sp/>multiplication<sp/>with</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*<sp/>a<sp/>signed<sp/>multiplication<sp/>opcode.</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUL31(x,<sp/>y)<sp/><sp/><sp/>((uint64_t)((x)<sp/>|<sp/>(uint32_t)0x80000000)<sp/>\</highlight></codeline>
<codeline lineno="952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(uint64_t)((y)<sp/>|<sp/>(uint32_t)0x80000000)<sp/>\</highlight></codeline>
<codeline lineno="953"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>((uint64_t)(x)<sp/>&lt;&lt;<sp/>31)<sp/>-<sp/>((uint64_t)(y)<sp/>&lt;&lt;<sp/>31)<sp/>\</highlight></codeline>
<codeline lineno="954"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>((uint64_t)1<sp/>&lt;&lt;<sp/>62))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="956"><highlight class="normal">MUL31_lo(uint32_t<sp/>x,<sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>xl,<sp/>xh;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>yl,<sp/>yh;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>xl<sp/>=<sp/>(x<sp/>&amp;<sp/>0xFFFF)<sp/>|<sp/>(uint32_t)0x80000000;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>xh<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/>16)<sp/>|<sp/>(uint32_t)0x80000000;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>yl<sp/>=<sp/>(y<sp/>&amp;<sp/>0xFFFF)<sp/>|<sp/>(uint32_t)0x80000000;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>yh<sp/>=<sp/>(y<sp/>&gt;&gt;<sp/>16)<sp/>|<sp/>(uint32_t)0x80000000;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xl<sp/>*<sp/>yl<sp/>+<sp/>((xl<sp/>*<sp/>yh<sp/>+<sp/>xh<sp/>*<sp/>yl)<sp/>&lt;&lt;<sp/>16))<sp/>&amp;<sp/>(uint32_t)0x7FFFFFFF;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*<sp/>Multiply<sp/>two<sp/>31-bit<sp/>integers,<sp/>with<sp/>a<sp/>62-bit<sp/>result.<sp/>This<sp/>default</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*<sp/>implementation<sp/>assumes<sp/>that<sp/>the<sp/>basic<sp/>multiplication<sp/>operator</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*<sp/>yields<sp/>constant-time<sp/>code.</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*<sp/>The<sp/>MUL31_lo()<sp/>macro<sp/>returns<sp/>only<sp/>the<sp/>low<sp/>31<sp/>bits<sp/>of<sp/>the<sp/>product.</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUL31(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/>((uint64_t)(x)<sp/>*<sp/>(uint64_t)(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUL31_lo(x,<sp/>y)<sp/><sp/>(((uint32_t)(x)<sp/>*<sp/>(uint32_t)(y))<sp/>&amp;<sp/>(uint32_t)0x7FFFFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>*<sp/>Multiply<sp/>two<sp/>words<sp/>together;<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>lengths<sp/>of<sp/>the<sp/>two</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/>*<sp/>operands<sp/>must<sp/>not<sp/>exceed<sp/>31<sp/>(for<sp/>instance,<sp/>one<sp/>operand<sp/>may<sp/>use<sp/>16</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/>*<sp/>bits<sp/>if<sp/>the<sp/>other<sp/>fits<sp/>on<sp/>15).<sp/>If<sp/>BR_CT_MUL15<sp/>is<sp/>non-zero,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/>*<sp/>macro<sp/>will<sp/>contain<sp/>some<sp/>extra<sp/>operations<sp/>that<sp/>help<sp/>in<sp/>making<sp/>the</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/>*<sp/>operation<sp/>constant-time<sp/>on<sp/>some<sp/>platforms,<sp/>where<sp/>the<sp/>basic<sp/>32-bit</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/>*<sp/>multiplication<sp/>is<sp/>not<sp/>constant-time.</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_CT_MUL15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUL15(x,<sp/>y)<sp/><sp/><sp/>(((uint32_t)(x)<sp/>|<sp/>(uint32_t)0x80000000)<sp/>\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>((uint32_t)(y)<sp/>|<sp/>(uint32_t)0x80000000)<sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(uint32_t)0x7FFFFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MUL15(x,<sp/>y)<sp/><sp/><sp/>((uint32_t)(x)<sp/>*<sp/>(uint32_t)(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/>*<sp/>Arithmetic<sp/>right<sp/>shift<sp/>(sign<sp/>bit<sp/>is<sp/>copied).<sp/>What<sp/>happens<sp/>when</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*<sp/>right-shifting<sp/>a<sp/>negative<sp/>value<sp/>is<sp/>_implementation-defined_,<sp/>so<sp/>it</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/>*<sp/>does<sp/>not<sp/>trigger<sp/>undefined<sp/>behaviour,<sp/>but<sp/>it<sp/>is<sp/>still<sp/>up<sp/>to<sp/>each</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/>*<sp/>compiler<sp/>to<sp/>define<sp/>(and<sp/>document)<sp/>what<sp/>it<sp/>does.<sp/>Most/all<sp/>compilers</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/>*<sp/>will<sp/>do<sp/>an<sp/>arithmetic<sp/>shift,<sp/>the<sp/>sign<sp/>bit<sp/>being<sp/>used<sp/>to<sp/>fill<sp/>the</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*<sp/>holes;<sp/>this<sp/>is<sp/>a<sp/>native<sp/>operation<sp/>on<sp/>the<sp/>underlying<sp/>CPU,<sp/>and<sp/>it<sp/>would</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/>*<sp/>make<sp/>little<sp/>sense<sp/>for<sp/>the<sp/>compiler<sp/>to<sp/>do<sp/>otherwise.<sp/>GCC<sp/>explicitly</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/>*<sp/>documents<sp/>that<sp/>it<sp/>follows<sp/>that<sp/>convention.</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/>*<sp/>Still,<sp/>if<sp/>BR_NO_ARITH_SHIFT<sp/>is<sp/>defined<sp/>(and<sp/>non-zero),<sp/>then<sp/>an</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*<sp/>alternate<sp/>version<sp/>will<sp/>be<sp/>used,<sp/>that<sp/>does<sp/>not<sp/>rely<sp/>on<sp/>such</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/>*<sp/>implementation-defined<sp/>behaviour.<sp/>Unfortunately,<sp/>it<sp/>is<sp/>also<sp/>slower</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/>*<sp/>and<sp/>yields<sp/>bigger<sp/>code,<sp/>which<sp/>is<sp/>why<sp/>it<sp/>is<sp/>deactivated<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_NO_ARITH_SHIFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARSH(x,<sp/>n)<sp/><sp/><sp/>(((uint32_t)(x)<sp/>&gt;&gt;<sp/>(n))<sp/>\</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((-((uint32_t)(x)<sp/>&gt;&gt;<sp/>31))<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>(n))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARSH(x,<sp/>n)<sp/><sp/><sp/>((*(int32_t<sp/>*)&amp;(x))<sp/>&gt;&gt;<sp/>(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/>*<sp/>Constant-time<sp/>division.<sp/>The<sp/>dividend<sp/>hi:lo<sp/>is<sp/>divided<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*<sp/>divisor<sp/>d;<sp/>the<sp/>quotient<sp/>is<sp/>returned<sp/>and<sp/>the<sp/>remainder<sp/>is<sp/>written</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/>*<sp/>in<sp/>*r.<sp/>If<sp/>hi<sp/>==<sp/>d,<sp/>then<sp/>the<sp/>quotient<sp/>does<sp/>not<sp/>fit<sp/>on<sp/>32<sp/>bits;</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*<sp/>returned<sp/>value<sp/>is<sp/>thus<sp/>truncated.<sp/>If<sp/>hi<sp/>&gt;<sp/>d,<sp/>returned<sp/>values<sp/>are</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>indeterminate.</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal">uint32_t<sp/>br_divrem(uint32_t<sp/>hi,<sp/>uint32_t<sp/>lo,<sp/>uint32_t<sp/>d,<sp/>uint32_t<sp/>*r);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/>*<sp/>Wrapper<sp/>for<sp/>br_divrem();<sp/>the<sp/>remainder<sp/>is<sp/>returned,<sp/>and<sp/>the<sp/>quotient</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/>*<sp/>is<sp/>discarded.</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">br_rem(uint32_t<sp/>hi,<sp/>uint32_t<sp/>lo,<sp/>uint32_t<sp/>d)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>r;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>br_divrem(hi,<sp/>lo,<sp/>d,<sp/>&amp;r);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/>*<sp/>Wrapper<sp/>for<sp/>br_divrem();<sp/>the<sp/>quotient<sp/>is<sp/>returned,<sp/>and<sp/>the<sp/>remainder</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/>*<sp/>is<sp/>discarded.</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">br_div(uint32_t<sp/>hi,<sp/>uint32_t<sp/>lo,<sp/>uint32_t<sp/>d)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>r;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>br_divrem(hi,<sp/>lo,<sp/>d,<sp/>&amp;r);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*<sp/>Integers<sp/>&apos;i32&apos;</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/>*<sp/>--------------</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/>*<sp/>The<sp/>&apos;i32&apos;<sp/>functions<sp/>implement<sp/>computations<sp/>on<sp/>big<sp/>integers<sp/>using</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/>*<sp/>an<sp/>internal<sp/>representation<sp/>as<sp/>an<sp/>array<sp/>of<sp/>32-bit<sp/>integers.<sp/>For</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/>*<sp/>an<sp/>array<sp/>x[]:</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/>*<sp/><sp/>--<sp/>x[0]<sp/>contains<sp/>the<sp/>&quot;announced<sp/>bit<sp/>length&quot;<sp/>of<sp/>the<sp/>integer</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/>*<sp/><sp/>--<sp/>x[1],<sp/>x[2]...<sp/>contain<sp/>the<sp/>value<sp/>in<sp/>little-endian<sp/>order<sp/>(x[1]</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>contains<sp/>the<sp/>least<sp/>significant<sp/>32<sp/>bits)</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/>*<sp/>Multiplications<sp/>rely<sp/>on<sp/>the<sp/>elementary<sp/>32x32-&gt;64<sp/>multiplication.</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/>*<sp/>The<sp/>announced<sp/>bit<sp/>length<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/>*<sp/>significant<sp/>in<sp/>the<sp/>subsequent<sp/>32-bit<sp/>words.<sp/>Unused<sp/>bits<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/>*<sp/>last<sp/>(most<sp/>significant)<sp/>word<sp/>are<sp/>set<sp/>to<sp/>0;<sp/>subsequent<sp/>words<sp/>are</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/>*<sp/>uninitialized<sp/>and<sp/>need<sp/>not<sp/>exist<sp/>at<sp/>all.</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/>*<sp/>The<sp/>execution<sp/>time<sp/>and<sp/>memory<sp/>access<sp/>patterns<sp/>of<sp/>all<sp/>computations</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/>*<sp/>depend<sp/>on<sp/>the<sp/>announced<sp/>bit<sp/>length,<sp/>but<sp/>not<sp/>on<sp/>the<sp/>actual<sp/>word</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/>*<sp/>values.<sp/>For<sp/>modular<sp/>integers,<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>any<sp/>integer</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/>*<sp/>modulo<sp/>n<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>actual<sp/>bit<sp/>length<sp/>of<sp/>n;<sp/>thus,<sp/>computations</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/>*<sp/>on<sp/>modular<sp/>integers<sp/>are<sp/>&quot;constant-time&quot;<sp/>(only<sp/>the<sp/>modulus<sp/>length<sp/>may</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/>*<sp/>leak).</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>actual<sp/>bit<sp/>length<sp/>of<sp/>an<sp/>integer.<sp/>The<sp/>argument<sp/>x<sp/>should</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/>*<sp/>point<sp/>to<sp/>the<sp/>first<sp/>(least<sp/>significant)<sp/>value<sp/>word<sp/>of<sp/>the<sp/>integer.</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/>*<sp/>The<sp/>len<sp/>&apos;xlen&apos;<sp/>contains<sp/>the<sp/>number<sp/>of<sp/>32-bit<sp/>words<sp/>to<sp/>access.</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/>*<sp/>CT:<sp/>value<sp/>or<sp/>length<sp/>of<sp/>x<sp/>does<sp/>not<sp/>leak.</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">uint32_t<sp/>br_i32_bit_length(uint32_t<sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>integer<sp/>from<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/>*<sp/>&quot;true&quot;<sp/>bit<sp/>length<sp/>of<sp/>the<sp/>integer<sp/>is<sp/>computed,<sp/>but<sp/>all<sp/>words<sp/>of<sp/>x[]</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/>*<sp/>corresponding<sp/>to<sp/>the<sp/>full<sp/>&apos;len&apos;<sp/>bytes<sp/>of<sp/>the<sp/>source<sp/>are<sp/>set.</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/>*<sp/>CT:<sp/>value<sp/>or<sp/>length<sp/>of<sp/>x<sp/>does<sp/>not<sp/>leak.</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_decode(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>integer<sp/>from<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/>*<sp/>integer<sp/>MUST<sp/>be<sp/>lower<sp/>than<sp/>m[];<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>written<sp/>in</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/>*<sp/>x[]<sp/>will<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of<sp/>m[].<sp/>All<sp/>&apos;len&apos;<sp/>bytes<sp/>from<sp/>the<sp/>source<sp/>are</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/>*<sp/>read.</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>1<sp/>if<sp/>the<sp/>decode<sp/>value<sp/>fits<sp/>within<sp/>the<sp/>modulus,<sp/>0</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/>*<sp/>otherwise.<sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>the<sp/>x[]<sp/>buffer<sp/>will<sp/>be<sp/>set<sp/>to<sp/>0<sp/>(but</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/>*<sp/>still<sp/>with<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>m[]).</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/>*<sp/>CT:<sp/>value<sp/>or<sp/>length<sp/>of<sp/>x<sp/>does<sp/>not<sp/>leak.<sp/>Memory<sp/>access<sp/>pattern<sp/>depends</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/>*<sp/>only<sp/>of<sp/>&apos;len&apos;<sp/>and<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>m.<sp/>Whether<sp/>x<sp/>fits<sp/>or</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/>*<sp/>not<sp/>does<sp/>not<sp/>leak<sp/>either.</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">uint32_t<sp/>br_i32_decode_mod(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/>*<sp/>Reduce<sp/>an<sp/>integer<sp/>(a[])<sp/>modulo<sp/>another<sp/>(m[]).<sp/>The<sp/>result<sp/>is<sp/>written</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/>*<sp/>in<sp/>x[]<sp/>and<sp/>its<sp/>announced<sp/>bit<sp/>length<sp/>is<sp/>set<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of<sp/>m[].</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/>*<sp/>x[]<sp/>MUST<sp/>be<sp/>distinct<sp/>from<sp/>a[]<sp/>and<sp/>m[].</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/>*<sp/>CT:<sp/>only<sp/>announced<sp/>bit<sp/>lengths<sp/>leak,<sp/>not<sp/>values<sp/>of<sp/>x,<sp/>a<sp/>or<sp/>m.</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_reduce(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>integer<sp/>from<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation,<sp/>and</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/>*<sp/>reduce<sp/>it<sp/>modulo<sp/>the<sp/>provided<sp/>modulus<sp/>m[].<sp/>The<sp/>announced<sp/>bit<sp/>length</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>result<sp/>is<sp/>set<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of<sp/>the<sp/>modulus.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/>*<sp/>x[]<sp/>MUST<sp/>be<sp/>distinct<sp/>from<sp/>m[].</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_decode_reduce(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/>*<sp/>Encode<sp/>an<sp/>integer<sp/>into<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/>*<sp/>output<sp/>length<sp/>in<sp/>bytes<sp/>is<sp/>provided<sp/>(parameter<sp/>&apos;len&apos;);<sp/>if<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/>*<sp/>is<sp/>too<sp/>short<sp/>then<sp/>the<sp/>integer<sp/>is<sp/>appropriately<sp/>truncated;<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/>*<sp/>too<sp/>long<sp/>then<sp/>the<sp/>extra<sp/>bytes<sp/>are<sp/>set<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_encode(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*x);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/>*<sp/>Multiply<sp/>x[]<sp/>by<sp/>2^32<sp/>and<sp/>then<sp/>add<sp/>integer<sp/>z,<sp/>modulo<sp/>m[].<sp/>This</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/>*<sp/>function<sp/>assumes<sp/>that<sp/>x[]<sp/>and<sp/>m[]<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/>*<sp/>length,<sp/>and<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>m[]<sp/>matches<sp/>its<sp/>true</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/>*<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/>*<sp/>x[]<sp/>and<sp/>m[]<sp/>MUST<sp/>be<sp/>distinct<sp/>arrays.</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/>*<sp/>CT:<sp/>only<sp/>the<sp/>common<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>x<sp/>and<sp/>m<sp/>leaks,<sp/>not</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/>*<sp/>the<sp/>values<sp/>of<sp/>x,<sp/>z<sp/>or<sp/>m.</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_muladd_small(uint32_t<sp/>*x,<sp/>uint32_t<sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/>*<sp/>Extract<sp/>one<sp/>word<sp/>from<sp/>an<sp/>integer.<sp/>The<sp/>offset<sp/>is<sp/>counted<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/>*<sp/>The<sp/>word<sp/>MUST<sp/>entirely<sp/>fit<sp/>within<sp/>the<sp/>word<sp/>elements<sp/>corresponding</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>a[].</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">br_i32_word(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*a,<sp/>uint32_t<sp/>off)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>(size_t)(off<sp/>&gt;&gt;<sp/>5)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(unsigned)off<sp/>&amp;<sp/>31;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a[u];</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a[u]<sp/>&gt;&gt;<sp/>j)<sp/>|<sp/>(a[u<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>j));</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/>*<sp/>Test<sp/>whether<sp/>an<sp/>integer<sp/>is<sp/>zero.</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">uint32_t<sp/>br_i32_iszero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*x);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/>*<sp/>Add<sp/>b[]<sp/>to<sp/>a[]<sp/>and<sp/>return<sp/>the<sp/>carry<sp/>(0<sp/>or<sp/>1).<sp/>If<sp/>ctl<sp/>is<sp/>0,<sp/>then<sp/>a[]</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*<sp/>is<sp/>unmodified,<sp/>but<sp/>the<sp/>carry<sp/>is<sp/>still<sp/>computed<sp/>and<sp/>returned.<sp/>The</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/>*<sp/>arrays<sp/>a[]<sp/>and<sp/>b[]<sp/>MUST<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/>*<sp/>a[]<sp/>and<sp/>b[]<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>array,<sp/>but<sp/>partial<sp/>overlap<sp/>is<sp/>not<sp/>allowed.</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">uint32_t<sp/>br_i32_add(uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b,<sp/>uint32_t<sp/>ctl);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/>*<sp/>Subtract<sp/>b[]<sp/>from<sp/>a[]<sp/>and<sp/>return<sp/>the<sp/>carry<sp/>(0<sp/>or<sp/>1).<sp/>If<sp/>ctl<sp/>is<sp/>0,</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/>*<sp/>then<sp/>a[]<sp/>is<sp/>unmodified,<sp/>but<sp/>the<sp/>carry<sp/>is<sp/>still<sp/>computed<sp/>and<sp/>returned.</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/>*<sp/>The<sp/>arrays<sp/>a[]<sp/>and<sp/>b[]<sp/>MUST<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/>*<sp/>a[]<sp/>and<sp/>b[]<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>array,<sp/>but<sp/>partial<sp/>overlap<sp/>is<sp/>not<sp/>allowed.</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">uint32_t<sp/>br_i32_sub(uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b,<sp/>uint32_t<sp/>ctl);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/>*<sp/>Compute<sp/>d+a*b,<sp/>result<sp/>in<sp/>d.<sp/>The<sp/>initial<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>d[]</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/>*<sp/>MUST<sp/>match<sp/>that<sp/>of<sp/>a[].<sp/>The<sp/>d[]<sp/>array<sp/>MUST<sp/>be<sp/>large<sp/>enough<sp/>to</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/>*<sp/>accommodate<sp/>the<sp/>full<sp/>result,<sp/>plus<sp/>(possibly)<sp/>an<sp/>extra<sp/>word.<sp/>The</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/>*<sp/>resulting<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>d[]<sp/>will<sp/>be<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>announced</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/>*<sp/>bit<sp/>lengths<sp/>of<sp/>a[]<sp/>and<sp/>b[]<sp/>(therefore,<sp/>it<sp/>may<sp/>be<sp/>larger<sp/>than<sp/>the<sp/>actual</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/>*<sp/>bit<sp/>length<sp/>of<sp/>the<sp/>numerical<sp/>result).</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/>*<sp/>a[]<sp/>and<sp/>b[]<sp/>may<sp/>be<sp/>the<sp/>same<sp/>array.<sp/>d[]<sp/>must<sp/>be<sp/>disjoint<sp/>from<sp/>both<sp/>a[]</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/>*<sp/>and<sp/>b[].</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_mulacc(uint32_t<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/>*<sp/>Zeroize<sp/>an<sp/>integer.<sp/>The<sp/>announced<sp/>bit<sp/>length<sp/>is<sp/>set<sp/>to<sp/>the<sp/>provided</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/>*<sp/>value,<sp/>and<sp/>the<sp/>corresponding<sp/>words<sp/>are<sp/>set<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal">br_i32_zero(uint32_t<sp/>*x,<sp/>uint32_t<sp/>bit_len)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>*x<sp/>++<sp/>=<sp/>bit_len;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(x,<sp/>0,<sp/>((bit_len<sp/>+<sp/>31)<sp/>&gt;&gt;<sp/>5)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/>*<sp/>Compute<sp/>-(1/x)<sp/>mod<sp/>2^32.<sp/>If<sp/>x<sp/>is<sp/>even,<sp/>then<sp/>this<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">uint32_t<sp/>br_i32_ninv32(uint32_t<sp/>x);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/>*<sp/>Convert<sp/>a<sp/>modular<sp/>integer<sp/>to<sp/>Montgomery<sp/>representation.<sp/>The<sp/>integer<sp/>x[]</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/>*<sp/>MUST<sp/>be<sp/>lower<sp/>than<sp/>m[],<sp/>but<sp/>with<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_to_monty(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/>*<sp/>Convert<sp/>a<sp/>modular<sp/>integer<sp/>back<sp/>from<sp/>Montgomery<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/>*<sp/>integer<sp/>x[]<sp/>MUST<sp/>be<sp/>lower<sp/>than<sp/>m[],<sp/>but<sp/>with<sp/>the<sp/>same<sp/>announced<sp/>bit</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/>*<sp/>length.<sp/>The<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^32,<sp/>where<sp/>m0<sp/>is</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/>*<sp/>the<sp/>least<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/>*<sp/>an<sp/>odd<sp/>integer).</highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_from_monty(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/>*<sp/>Compute<sp/>a<sp/>modular<sp/>Montgomery<sp/>multiplication.<sp/>d[]<sp/>is<sp/>filled<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/>*<sp/>value<sp/>of<sp/>x*y/R<sp/>modulo<sp/>m[]<sp/>(where<sp/>R<sp/>is<sp/>the<sp/>Montgomery<sp/>factor).<sp/>The</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/>*<sp/>array<sp/>d[]<sp/>MUST<sp/>be<sp/>distinct<sp/>from<sp/>x[],<sp/>y[]<sp/>and<sp/>m[].<sp/>x[]<sp/>and<sp/>y[]<sp/>MUST<sp/>be</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/>*<sp/>numerically<sp/>lower<sp/>than<sp/>m[].<sp/>x[]<sp/>and<sp/>y[]<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>array.<sp/>The</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/>*<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^32,<sp/>where<sp/>m0<sp/>is<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/>*<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is<sp/>an<sp/>odd</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/>*<sp/>integer).</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_montymul(uint32_t<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*y,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/>*<sp/>Compute<sp/>a<sp/>modular<sp/>exponentiation.<sp/>x[]<sp/>MUST<sp/>be<sp/>an<sp/>integer<sp/>modulo<sp/>m[]</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/>*<sp/>(same<sp/>announced<sp/>bit<sp/>length,<sp/>lower<sp/>value).<sp/>m[]<sp/>MUST<sp/>be<sp/>odd.<sp/>The</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/>*<sp/>exponent<sp/>is<sp/>in<sp/>big-endian<sp/>unsigned<sp/>notation,<sp/>over<sp/>&apos;elen&apos;<sp/>bytes.<sp/>The</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/>*<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^32,<sp/>where<sp/>m0<sp/>is<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/>*<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is<sp/>an<sp/>odd</highlight></codeline>
<codeline lineno="1262"><highlight class="comment"><sp/>*<sp/>integer).<sp/>The<sp/>t1[]<sp/>and<sp/>t2[]<sp/>parameters<sp/>must<sp/>be<sp/>temporary<sp/>arrays,</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/>*<sp/>each<sp/>large<sp/>enough<sp/>to<sp/>accommodate<sp/>an<sp/>integer<sp/>with<sp/>the<sp/>same<sp/>size<sp/>as<sp/>m[].</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i32_modpow(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i,<sp/>uint32_t<sp/>*t1,<sp/>uint32_t<sp/>*t2);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/>*<sp/>Integers<sp/>&apos;i31&apos;</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/>*<sp/>--------------</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/>*<sp/>The<sp/>&apos;i31&apos;<sp/>functions<sp/>implement<sp/>computations<sp/>on<sp/>big<sp/>integers<sp/>using</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/>*<sp/>an<sp/>internal<sp/>representation<sp/>as<sp/>an<sp/>array<sp/>of<sp/>32-bit<sp/>integers.<sp/>For</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/>*<sp/>an<sp/>array<sp/>x[]:</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/>*<sp/><sp/>--<sp/>x[0]<sp/>encodes<sp/>the<sp/>array<sp/>length<sp/>and<sp/>the<sp/>&quot;announced<sp/>bit<sp/>length&quot;</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>integer:<sp/>namely,<sp/>if<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>is<sp/>k,</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>then<sp/>x[0]<sp/>=<sp/>((k<sp/>/<sp/>31)<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>(k<sp/>%<sp/>31).</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/>*<sp/><sp/>--<sp/>x[1],<sp/>x[2]...<sp/>contain<sp/>the<sp/>value<sp/>in<sp/>little-endian<sp/>order,<sp/>31</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>bits<sp/>per<sp/>word<sp/>(x[1]<sp/>contains<sp/>the<sp/>least<sp/>significant<sp/>31<sp/>bits).</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>The<sp/>upper<sp/>bit<sp/>of<sp/>each<sp/>word<sp/>is<sp/>0.</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/>*<sp/>Multiplications<sp/>rely<sp/>on<sp/>the<sp/>elementary<sp/>32x32-&gt;64<sp/>multiplication.</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/>*<sp/>The<sp/>announced<sp/>bit<sp/>length<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/>*<sp/>significant<sp/>in<sp/>the<sp/>subsequent<sp/>32-bit<sp/>words.<sp/>Unused<sp/>bits<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/>*<sp/>last<sp/>(most<sp/>significant)<sp/>word<sp/>are<sp/>set<sp/>to<sp/>0;<sp/>subsequent<sp/>words<sp/>are</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/>*<sp/>uninitialized<sp/>and<sp/>need<sp/>not<sp/>exist<sp/>at<sp/>all.</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/>*<sp/>The<sp/>execution<sp/>time<sp/>and<sp/>memory<sp/>access<sp/>patterns<sp/>of<sp/>all<sp/>computations</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/>*<sp/>depend<sp/>on<sp/>the<sp/>announced<sp/>bit<sp/>length,<sp/>but<sp/>not<sp/>on<sp/>the<sp/>actual<sp/>word</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/>*<sp/>values.<sp/>For<sp/>modular<sp/>integers,<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>any<sp/>integer</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/>*<sp/>modulo<sp/>n<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>actual<sp/>bit<sp/>length<sp/>of<sp/>n;<sp/>thus,<sp/>computations</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/>*<sp/>on<sp/>modular<sp/>integers<sp/>are<sp/>&quot;constant-time&quot;<sp/>(only<sp/>the<sp/>modulus<sp/>length<sp/>may</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/>*<sp/>leak).</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/>*<sp/>Test<sp/>whether<sp/>an<sp/>integer<sp/>is<sp/>zero.</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">uint32_t<sp/>br_i31_iszero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*x);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"><sp/>*<sp/>Add<sp/>b[]<sp/>to<sp/>a[]<sp/>and<sp/>return<sp/>the<sp/>carry<sp/>(0<sp/>or<sp/>1).<sp/>If<sp/>ctl<sp/>is<sp/>0,<sp/>then<sp/>a[]</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/>*<sp/>is<sp/>unmodified,<sp/>but<sp/>the<sp/>carry<sp/>is<sp/>still<sp/>computed<sp/>and<sp/>returned.<sp/>The</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/>*<sp/>arrays<sp/>a[]<sp/>and<sp/>b[]<sp/>MUST<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/>*<sp/>a[]<sp/>and<sp/>b[]<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>array,<sp/>but<sp/>partial<sp/>overlap<sp/>is<sp/>not<sp/>allowed.</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal">uint32_t<sp/>br_i31_add(uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b,<sp/>uint32_t<sp/>ctl);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/>*<sp/>Subtract<sp/>b[]<sp/>from<sp/>a[]<sp/>and<sp/>return<sp/>the<sp/>carry<sp/>(0<sp/>or<sp/>1).<sp/>If<sp/>ctl<sp/>is<sp/>0,</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/>*<sp/>then<sp/>a[]<sp/>is<sp/>unmodified,<sp/>but<sp/>the<sp/>carry<sp/>is<sp/>still<sp/>computed<sp/>and<sp/>returned.</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/>*<sp/>The<sp/>arrays<sp/>a[]<sp/>and<sp/>b[]<sp/>MUST<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/>*<sp/>a[]<sp/>and<sp/>b[]<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>array,<sp/>but<sp/>partial<sp/>overlap<sp/>is<sp/>not<sp/>allowed.</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal">uint32_t<sp/>br_i31_sub(uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b,<sp/>uint32_t<sp/>ctl);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/>*<sp/>Compute<sp/>the<sp/>ENCODED<sp/>actual<sp/>bit<sp/>length<sp/>of<sp/>an<sp/>integer.<sp/>The<sp/>argument<sp/>x</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/>*<sp/>should<sp/>point<sp/>to<sp/>the<sp/>first<sp/>(least<sp/>significant)<sp/>value<sp/>word<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/>*<sp/>integer.<sp/>The<sp/>len<sp/>&apos;xlen&apos;<sp/>contains<sp/>the<sp/>number<sp/>of<sp/>32-bit<sp/>words<sp/>to</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/>*<sp/>access.<sp/>The<sp/>upper<sp/>bit<sp/>of<sp/>each<sp/>value<sp/>word<sp/>MUST<sp/>be<sp/>0.</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>((k<sp/>/<sp/>31)<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>(k<sp/>%<sp/>31)<sp/>if<sp/>the<sp/>bit<sp/>length<sp/>is<sp/>k.</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1329"><highlight class="comment"><sp/>*<sp/>CT:<sp/>value<sp/>or<sp/>length<sp/>of<sp/>x<sp/>does<sp/>not<sp/>leak.</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal">uint32_t<sp/>br_i31_bit_length(uint32_t<sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1334"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>integer<sp/>from<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1335"><highlight class="comment"><sp/>*<sp/>&quot;true&quot;<sp/>bit<sp/>length<sp/>of<sp/>the<sp/>integer<sp/>is<sp/>computed<sp/>and<sp/>set<sp/>in<sp/>the<sp/>encoded</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/>*<sp/>announced<sp/>bit<sp/>length<sp/>(x[0]),<sp/>but<sp/>all<sp/>words<sp/>of<sp/>x[]<sp/>corresponding<sp/>to</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/>*<sp/>the<sp/>full<sp/>&apos;len&apos;<sp/>bytes<sp/>of<sp/>the<sp/>source<sp/>are<sp/>set.</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/>*<sp/>CT:<sp/>value<sp/>or<sp/>length<sp/>of<sp/>x<sp/>does<sp/>not<sp/>leak.</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_decode(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>integer<sp/>from<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/>*<sp/>integer<sp/>MUST<sp/>be<sp/>lower<sp/>than<sp/>m[];<sp/>the<sp/>(encoded)<sp/>announced<sp/>bit<sp/>length</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/>*<sp/>written<sp/>in<sp/>x[]<sp/>will<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of<sp/>m[].<sp/>All<sp/>&apos;len&apos;<sp/>bytes<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"><sp/>*<sp/>source<sp/>are<sp/>read.</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>1<sp/>if<sp/>the<sp/>decode<sp/>value<sp/>fits<sp/>within<sp/>the<sp/>modulus,<sp/>0</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"><sp/>*<sp/>otherwise.<sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>the<sp/>x[]<sp/>buffer<sp/>will<sp/>be<sp/>set<sp/>to<sp/>0<sp/>(but</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/>*<sp/>still<sp/>with<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>m[]).</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/>*<sp/>CT:<sp/>value<sp/>or<sp/>length<sp/>of<sp/>x<sp/>does<sp/>not<sp/>leak.<sp/>Memory<sp/>access<sp/>pattern<sp/>depends</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/>*<sp/>only<sp/>of<sp/>&apos;len&apos;<sp/>and<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>m.<sp/>Whether<sp/>x<sp/>fits<sp/>or</highlight></codeline>
<codeline lineno="1355"><highlight class="comment"><sp/>*<sp/>not<sp/>does<sp/>not<sp/>leak<sp/>either.</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal">uint32_t<sp/>br_i31_decode_mod(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1361"><highlight class="comment"><sp/>*<sp/>Zeroize<sp/>an<sp/>integer.<sp/>The<sp/>announced<sp/>bit<sp/>length<sp/>is<sp/>set<sp/>to<sp/>the<sp/>provided</highlight></codeline>
<codeline lineno="1362"><highlight class="comment"><sp/>*<sp/>value,<sp/>and<sp/>the<sp/>corresponding<sp/>words<sp/>are<sp/>set<sp/>to<sp/>0.<sp/>The<sp/>ENCODED<sp/>bit<sp/>length</highlight></codeline>
<codeline lineno="1363"><highlight class="comment"><sp/>*<sp/>is<sp/>expected<sp/>here.</highlight></codeline>
<codeline lineno="1364"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal">br_i31_zero(uint32_t<sp/>*x,<sp/>uint32_t<sp/>bit_len)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>*x<sp/>++<sp/>=<sp/>bit_len;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(x,<sp/>0,<sp/>((bit_len<sp/>+<sp/>31)<sp/>&gt;&gt;<sp/>5)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/>*<sp/>Right-shift<sp/>an<sp/>integer.<sp/>The<sp/>shift<sp/>amount<sp/>must<sp/>be<sp/>lower<sp/>than<sp/>31</highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/>*<sp/>bits.</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_rshift(uint32_t<sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/>*<sp/>Reduce<sp/>an<sp/>integer<sp/>(a[])<sp/>modulo<sp/>another<sp/>(m[]).<sp/>The<sp/>result<sp/>is<sp/>written</highlight></codeline>
<codeline lineno="1380"><highlight class="comment"><sp/>*<sp/>in<sp/>x[]<sp/>and<sp/>its<sp/>announced<sp/>bit<sp/>length<sp/>is<sp/>set<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of<sp/>m[].</highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1382"><highlight class="comment"><sp/>*<sp/>x[]<sp/>MUST<sp/>be<sp/>distinct<sp/>from<sp/>a[]<sp/>and<sp/>m[].</highlight></codeline>
<codeline lineno="1383"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/>*<sp/>CT:<sp/>only<sp/>announced<sp/>bit<sp/>lengths<sp/>leak,<sp/>not<sp/>values<sp/>of<sp/>x,<sp/>a<sp/>or<sp/>m.</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_reduce(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1389"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>integer<sp/>from<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation,<sp/>and</highlight></codeline>
<codeline lineno="1390"><highlight class="comment"><sp/>*<sp/>reduce<sp/>it<sp/>modulo<sp/>the<sp/>provided<sp/>modulus<sp/>m[].<sp/>The<sp/>announced<sp/>bit<sp/>length</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>result<sp/>is<sp/>set<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>that<sp/>of<sp/>the<sp/>modulus.</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/>*<sp/>x[]<sp/>MUST<sp/>be<sp/>distinct<sp/>from<sp/>m[].</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_decode_reduce(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/>*<sp/>Multiply<sp/>x[]<sp/>by<sp/>2^31<sp/>and<sp/>then<sp/>add<sp/>integer<sp/>z,<sp/>modulo<sp/>m[].<sp/>This</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/>*<sp/>function<sp/>assumes<sp/>that<sp/>x[]<sp/>and<sp/>m[]<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/>*<sp/>length,<sp/>the<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>m[]<sp/>matches<sp/>its<sp/>true</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/>*<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1404"><highlight class="comment"><sp/>*<sp/>x[]<sp/>and<sp/>m[]<sp/>MUST<sp/>be<sp/>distinct<sp/>arrays.<sp/>z<sp/>MUST<sp/>fit<sp/>in<sp/>31<sp/>bits<sp/>(upper</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/>*<sp/>bit<sp/>set<sp/>to<sp/>0).</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/>*<sp/>CT:<sp/>only<sp/>the<sp/>common<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>x<sp/>and<sp/>m<sp/>leaks,<sp/>not</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/>*<sp/>the<sp/>values<sp/>of<sp/>x,<sp/>z<sp/>or<sp/>m.</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_muladd_small(uint32_t<sp/>*x,<sp/>uint32_t<sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1413"><highlight class="comment"><sp/>*<sp/>Encode<sp/>an<sp/>integer<sp/>into<sp/>its<sp/>big-endian<sp/>unsigned<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1414"><highlight class="comment"><sp/>*<sp/>output<sp/>length<sp/>in<sp/>bytes<sp/>is<sp/>provided<sp/>(parameter<sp/>&apos;len&apos;);<sp/>if<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/>*<sp/>is<sp/>too<sp/>short<sp/>then<sp/>the<sp/>integer<sp/>is<sp/>appropriately<sp/>truncated;<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="1416"><highlight class="comment"><sp/>*<sp/>too<sp/>long<sp/>then<sp/>the<sp/>extra<sp/>bytes<sp/>are<sp/>set<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_encode(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*x);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/>*<sp/>Compute<sp/>-(1/x)<sp/>mod<sp/>2^31.<sp/>If<sp/>x<sp/>is<sp/>even,<sp/>then<sp/>this<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal">uint32_t<sp/>br_i31_ninv31(uint32_t<sp/>x);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/>*<sp/>Compute<sp/>a<sp/>modular<sp/>Montgomery<sp/>multiplication.<sp/>d[]<sp/>is<sp/>filled<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/>*<sp/>value<sp/>of<sp/>x*y/R<sp/>modulo<sp/>m[]<sp/>(where<sp/>R<sp/>is<sp/>the<sp/>Montgomery<sp/>factor).<sp/>The</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/>*<sp/>array<sp/>d[]<sp/>MUST<sp/>be<sp/>distinct<sp/>from<sp/>x[],<sp/>y[]<sp/>and<sp/>m[].<sp/>x[]<sp/>and<sp/>y[]<sp/>MUST<sp/>be</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/>*<sp/>numerically<sp/>lower<sp/>than<sp/>m[].<sp/>x[]<sp/>and<sp/>y[]<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>array.<sp/>The</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/>*<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^31,<sp/>where<sp/>m0<sp/>is<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/>*<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is<sp/>an<sp/>odd</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/>*<sp/>integer).</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_montymul(uint32_t<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*y,</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/>*<sp/>Convert<sp/>a<sp/>modular<sp/>integer<sp/>to<sp/>Montgomery<sp/>representation.<sp/>The<sp/>integer<sp/>x[]</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/>*<sp/>MUST<sp/>be<sp/>lower<sp/>than<sp/>m[],<sp/>but<sp/>with<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length.</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_to_monty(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/>*<sp/>Convert<sp/>a<sp/>modular<sp/>integer<sp/>back<sp/>from<sp/>Montgomery<sp/>representation.<sp/>The</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/>*<sp/>integer<sp/>x[]<sp/>MUST<sp/>be<sp/>lower<sp/>than<sp/>m[],<sp/>but<sp/>with<sp/>the<sp/>same<sp/>announced<sp/>bit</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/>*<sp/>length.<sp/>The<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^32,<sp/>where<sp/>m0<sp/>is</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/>*<sp/>the<sp/>least<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/>*<sp/>an<sp/>odd<sp/>integer).</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_from_monty(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/>*<sp/>Compute<sp/>a<sp/>modular<sp/>exponentiation.<sp/>x[]<sp/>MUST<sp/>be<sp/>an<sp/>integer<sp/>modulo<sp/>m[]</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/>*<sp/>(same<sp/>announced<sp/>bit<sp/>length,<sp/>lower<sp/>value).<sp/>m[]<sp/>MUST<sp/>be<sp/>odd.<sp/>The</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/>*<sp/>exponent<sp/>is<sp/>in<sp/>big-endian<sp/>unsigned<sp/>notation,<sp/>over<sp/>&apos;elen&apos;<sp/>bytes.<sp/>The</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/>*<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^31,<sp/>where<sp/>m0<sp/>is<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/>*<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is<sp/>an<sp/>odd</highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/>*<sp/>integer).<sp/>The<sp/>t1[]<sp/>and<sp/>t2[]<sp/>parameters<sp/>must<sp/>be<sp/>temporary<sp/>arrays,</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"><sp/>*<sp/>each<sp/>large<sp/>enough<sp/>to<sp/>accommodate<sp/>an<sp/>integer<sp/>with<sp/>the<sp/>same<sp/>size<sp/>as<sp/>m[].</highlight></codeline>
<codeline lineno="1460"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_modpow(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i,<sp/>uint32_t<sp/>*t1,<sp/>uint32_t<sp/>*t2);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/>*<sp/>Compute<sp/>a<sp/>modular<sp/>exponentiation.<sp/>x[]<sp/>MUST<sp/>be<sp/>an<sp/>integer<sp/>modulo<sp/>m[]</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/>*<sp/>(same<sp/>announced<sp/>bit<sp/>length,<sp/>lower<sp/>value).<sp/>m[]<sp/>MUST<sp/>be<sp/>odd.<sp/>The</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"><sp/>*<sp/>exponent<sp/>is<sp/>in<sp/>big-endian<sp/>unsigned<sp/>notation,<sp/>over<sp/>&apos;elen&apos;<sp/>bytes.<sp/>The</highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/>*<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-(1/m0)<sp/>mod<sp/>2^31,<sp/>where<sp/>m0<sp/>is<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/>*<sp/>significant<sp/>value<sp/>word<sp/>of<sp/>m[]<sp/>(this<sp/>works<sp/>only<sp/>if<sp/>m[]<sp/>is<sp/>an<sp/>odd</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"><sp/>*<sp/>integer).<sp/>The<sp/>tmp[]<sp/>array<sp/>is<sp/>used<sp/>for<sp/>temporaries,<sp/>and<sp/>has<sp/>size</highlight></codeline>
<codeline lineno="1471"><highlight class="comment"><sp/>*<sp/>&apos;twlen&apos;<sp/>words;<sp/>it<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>accommodate<sp/>at<sp/>least<sp/>two</highlight></codeline>
<codeline lineno="1472"><highlight class="comment"><sp/>*<sp/>temporary<sp/>values<sp/>with<sp/>the<sp/>same<sp/>size<sp/>as<sp/>m[]<sp/>(including<sp/>the<sp/>leading</highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/>*<sp/>&quot;bit<sp/>length&quot;<sp/>word).<sp/>If<sp/>there<sp/>is<sp/>room<sp/>for<sp/>more<sp/>temporaries,<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/>*<sp/>function<sp/>may<sp/>use<sp/>the<sp/>extra<sp/>room<sp/>for<sp/>window-based<sp/>optimisation,</highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/>*<sp/>resulting<sp/>in<sp/>faster<sp/>computations.</highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>1<sp/>on<sp/>success,<sp/>0<sp/>on<sp/>error.<sp/>An<sp/>error<sp/>is<sp/>reported<sp/>if</highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/>*<sp/>the<sp/>provided<sp/>tmp[]<sp/>array<sp/>is<sp/>too<sp/>short.</highlight></codeline>
<codeline lineno="1479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal">uint32_t<sp/>br_i31_modpow_opt(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i,<sp/>uint32_t<sp/>*tmp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>twlen);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/>*<sp/>Compute<sp/>d+a*b,<sp/>result<sp/>in<sp/>d.<sp/>The<sp/>initial<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>d[]</highlight></codeline>
<codeline lineno="1485"><highlight class="comment"><sp/>*<sp/>MUST<sp/>match<sp/>that<sp/>of<sp/>a[].<sp/>The<sp/>d[]<sp/>array<sp/>MUST<sp/>be<sp/>large<sp/>enough<sp/>to</highlight></codeline>
<codeline lineno="1486"><highlight class="comment"><sp/>*<sp/>accommodate<sp/>the<sp/>full<sp/>result,<sp/>plus<sp/>(possibly)<sp/>an<sp/>extra<sp/>word.<sp/>The</highlight></codeline>
<codeline lineno="1487"><highlight class="comment"><sp/>*<sp/>resulting<sp/>announced<sp/>bit<sp/>length<sp/>of<sp/>d[]<sp/>will<sp/>be<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>announced</highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/>*<sp/>bit<sp/>lengths<sp/>of<sp/>a[]<sp/>and<sp/>b[]<sp/>(therefore,<sp/>it<sp/>may<sp/>be<sp/>larger<sp/>than<sp/>the<sp/>actual</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"><sp/>*<sp/>bit<sp/>length<sp/>of<sp/>the<sp/>numerical<sp/>result).</highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"><sp/>*<sp/>a[]<sp/>and<sp/>b[]<sp/>may<sp/>be<sp/>the<sp/>same<sp/>array.<sp/>d[]<sp/>must<sp/>be<sp/>disjoint<sp/>from<sp/>both<sp/>a[]</highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/>*<sp/>and<sp/>b[].</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i31_mulacc(uint32_t<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*b);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/>*<sp/>Compute<sp/>x/y<sp/>mod<sp/>m,<sp/>result<sp/>in<sp/>x.<sp/>Values<sp/>x<sp/>and<sp/>y<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and</highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/>*<sp/>m-1,<sp/>and<sp/>have<sp/>the<sp/>same<sp/>announced<sp/>bit<sp/>length<sp/>as<sp/>m.<sp/>Modulus<sp/>m<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="1499"><highlight class="comment"><sp/>*<sp/>odd.<sp/>The<sp/>&quot;m0i&quot;<sp/>parameter<sp/>is<sp/>equal<sp/>to<sp/>-1/m<sp/>mod<sp/>2^31.<sp/>The<sp/>array<sp/>&apos;t&apos;</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/>*<sp/>must<sp/>point<sp/>to<sp/>a<sp/>temporary<sp/>area<sp/>that<sp/>can<sp/>hold<sp/>at<sp/>least<sp/>three<sp/>integers</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>size<sp/>of<sp/>m.</highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/>*<sp/>m<sp/>may<sp/>not<sp/>overlap<sp/>x<sp/>and<sp/>y.<sp/>x<sp/>and<sp/>y<sp/>may<sp/>overlap<sp/>each<sp/>other<sp/>(this<sp/>can</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/>*<sp/>be<sp/>useful<sp/>to<sp/>test<sp/>whether<sp/>a<sp/>value<sp/>is<sp/>invertible<sp/>modulo<sp/>m).<sp/>t<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"><sp/>*<sp/>disjoint<sp/>from<sp/>all<sp/>other<sp/>arrays.</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>1<sp/>on<sp/>success,<sp/>0<sp/>otherwise.<sp/>Success<sp/>is<sp/>attained<sp/>if</highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/>*<sp/>y<sp/>is<sp/>invertible<sp/>modulo<sp/>m.</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal">uint32_t<sp/>br_i31_moddiv(uint32_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*y,</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i,<sp/>uint32_t<sp/>*t);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/>*<sp/>FIXME:<sp/>document<sp/>&quot;i15&quot;<sp/>functions.</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal">br_i15_zero(uint16_t<sp/>*x,<sp/>uint16_t<sp/>bit_len)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>*x<sp/>++<sp/>=<sp/>bit_len;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(x,<sp/>0,<sp/>((bit_len<sp/>+<sp/>15)<sp/>&gt;&gt;<sp/>4)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal">uint32_t<sp/>br_i15_iszero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*x);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal">uint16_t<sp/>br_i15_ninv15(uint16_t<sp/>x);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal">uint32_t<sp/>br_i15_add(uint16_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*b,<sp/>uint32_t<sp/>ctl);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal">uint32_t<sp/>br_i15_sub(uint16_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*b,<sp/>uint32_t<sp/>ctl);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_muladd_small(uint16_t<sp/>*x,<sp/>uint16_t<sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_montymul(uint16_t<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*y,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m,<sp/>uint16_t<sp/>m0i);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_to_monty(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_modpow(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m,<sp/>uint16_t<sp/>m0i,<sp/>uint16_t<sp/>*t1,<sp/>uint16_t<sp/>*t2);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal">uint32_t<sp/>br_i15_modpow_opt(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m,<sp/>uint16_t<sp/>m0i,<sp/>uint16_t<sp/>*tmp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>twlen);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_encode(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*x);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal">uint32_t<sp/>br_i15_decode_mod(uint16_t<sp/>*x,</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_rshift(uint16_t<sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal">uint32_t<sp/>br_i15_bit_length(uint16_t<sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_decode(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_from_monty(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m,<sp/>uint16_t<sp/>m0i);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_decode_reduce(uint16_t<sp/>*x,</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_reduce(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_i15_mulacc(uint16_t<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*b);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal">uint32_t<sp/>br_i15_moddiv(uint16_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*y,</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*m,<sp/>uint16_t<sp/>m0i,<sp/>uint16_t<sp/>*t);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/>*<sp/>Variant<sp/>of<sp/>br_i31_modpow_opt()<sp/>that<sp/>internally<sp/>uses<sp/>64x64-&gt;128</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"><sp/>*<sp/>multiplications.<sp/>It<sp/>expects<sp/>the<sp/>same<sp/>parameters<sp/>as<sp/>br_i31_modpow_opt(),</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/>*<sp/>except<sp/>that<sp/>the<sp/>temporaries<sp/>should<sp/>be<sp/>64-bit<sp/>integers,<sp/>not<sp/>32-bit</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/>*<sp/>integers.</highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal">uint32_t<sp/>br_i62_modpow_opt(uint32_t<sp/>*x31,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m31,<sp/>uint32_t<sp/>m0i31,<sp/>uint64_t<sp/>*tmp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>twlen);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/>*<sp/>Type<sp/>for<sp/>a<sp/>function<sp/>with<sp/>the<sp/>same<sp/>API<sp/>as<sp/>br_i31_modpow_opt()<sp/>(some</highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/>*<sp/>implementations<sp/>of<sp/>this<sp/>type<sp/>may<sp/>have<sp/>stricter<sp/>alignment<sp/>requirements</highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/>*<sp/>on<sp/>the<sp/>temporaries).</highlight></codeline>
<codeline lineno="1583"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*br_i31_modpow_opt_type)(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i,<sp/>uint32_t<sp/>*tmp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>twlen);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/>*<sp/>Wrapper<sp/>for<sp/>br_i62_modpow_opt()<sp/>that<sp/>uses<sp/>the<sp/>same<sp/>type<sp/>as</highlight></codeline>
<codeline lineno="1590"><highlight class="comment"><sp/>*<sp/>br_i31_modpow_opt();<sp/>however,<sp/>it<sp/>requires<sp/>its<sp/>&apos;tmp&apos;<sp/>argument<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1591"><highlight class="comment"><sp/>*<sp/>64-bit<sp/>aligned.</highlight></codeline>
<codeline lineno="1592"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal">uint32_t<sp/>br_i62_modpow_opt_as_i31(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elen,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*m,<sp/>uint32_t<sp/>m0i,<sp/>uint32_t<sp/>*tmp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>twlen);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">br_digest_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*digest_class)</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(digest_class-&gt;<ref refid="structbr__hash__class___1a83ce0b40ed9d8de4cdfde6391c7d8728" kindref="member">desc</ref><sp/>&gt;&gt;<sp/>BR_HASHDESC_OUT_OFF)</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>BR_HASHDESC_OUT_MASK;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>output<sp/>size<sp/>(in<sp/>bytes)<sp/>of<sp/>a<sp/>hash<sp/>function.</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>br_digest_size_by_ID(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digest_id);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1612"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>OID<sp/>(encoded<sp/>OBJECT<sp/>IDENTIFIER<sp/>value,<sp/>without<sp/>tag<sp/>and<sp/>length)</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/>*<sp/>for<sp/>a<sp/>hash<sp/>function.<sp/>If<sp/>digest_id<sp/>is<sp/>not<sp/>a<sp/>supported<sp/>digest<sp/>identifier</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/>*<sp/>(in<sp/>particular<sp/>if<sp/>it<sp/>is<sp/>equal<sp/>to<sp/>0,<sp/>i.e.<sp/>br_md5sha1_ID),<sp/>then<sp/>NULL<sp/>is</highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/>*<sp/>returned<sp/>and<sp/>*len<sp/>is<sp/>set<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="1616"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*br_digest_OID(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digest_id,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1621"><highlight class="comment"><sp/>*<sp/>DES<sp/>support<sp/>functions.</highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/>*<sp/>Apply<sp/>DES<sp/>Initial<sp/>Permutation.</highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_do_IP(uint32_t<sp/>*xl,<sp/>uint32_t<sp/>*xr);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1630"><highlight class="comment"><sp/>*<sp/>Apply<sp/>DES<sp/>Final<sp/>Permutation<sp/>(inverse<sp/>of<sp/>IP).</highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_do_invIP(uint32_t<sp/>*xl,<sp/>uint32_t<sp/>*xr);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/>*<sp/>Key<sp/>schedule<sp/>unit:<sp/>for<sp/>a<sp/>DES<sp/>key<sp/>(8<sp/>bytes),<sp/>compute<sp/>16<sp/>subkeys.<sp/>Each</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/>*<sp/>subkey<sp/>is<sp/>two<sp/>28-bit<sp/>words<sp/>represented<sp/>as<sp/>two<sp/>32-bit<sp/>words;<sp/>the<sp/>PC-2</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/>*<sp/>bit<sp/>extration<sp/>is<sp/>NOT<sp/>applied.</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_keysched_unit(uint32_t<sp/>*skey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1642"><highlight class="comment"><sp/>*<sp/>Reversal<sp/>of<sp/>16<sp/>DES<sp/>sub-keys<sp/>(for<sp/>decryption).</highlight></codeline>
<codeline lineno="1643"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_rev_skey(uint32_t<sp/>*skey);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/>*<sp/>DES/3DES<sp/>key<sp/>schedule<sp/>for<sp/>&apos;des_tab&apos;<sp/>(encryption<sp/>direction).<sp/>Returned</highlight></codeline>
<codeline lineno="1648"><highlight class="comment"><sp/>*<sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>rounds.</highlight></codeline>
<codeline lineno="1649"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_des_tab_keysched(uint32_t<sp/>*skey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1653"><highlight class="comment"><sp/>*<sp/>DES/3DES<sp/>key<sp/>schedule<sp/>for<sp/>&apos;des_ct&apos;<sp/>(encryption<sp/>direction).<sp/>Returned</highlight></codeline>
<codeline lineno="1654"><highlight class="comment"><sp/>*<sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>rounds.</highlight></codeline>
<codeline lineno="1655"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_des_ct_keysched(uint32_t<sp/>*skey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1659"><highlight class="comment"><sp/>*<sp/>DES/3DES<sp/>subkey<sp/>decompression<sp/>(from<sp/>the<sp/>compressed<sp/>bitsliced<sp/>subkeys).</highlight></codeline>
<codeline lineno="1660"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_ct_skey_expand(uint32_t<sp/>*sk_exp,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/>*<sp/>DES/3DES<sp/>block<sp/>encryption/decryption<sp/>(&apos;des_tab&apos;).</highlight></codeline>
<codeline lineno="1666"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_tab_process_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1671"><highlight class="comment"><sp/>*<sp/>DES/3DES<sp/>block<sp/>encryption/decryption<sp/>(&apos;des_ct&apos;).</highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_des_ct_process_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1678"><highlight class="comment"><sp/>*<sp/>AES<sp/>support<sp/>functions.</highlight></codeline>
<codeline lineno="1679"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1682"><highlight class="comment"><sp/>*<sp/>The<sp/>AES<sp/>S-box<sp/>(256-byte<sp/>table).</highlight></codeline>
<codeline lineno="1683"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>br_aes_S[];</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1687"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule.<sp/>skey[]<sp/>is<sp/>filled<sp/>with<sp/>n+1<sp/>128-bit<sp/>subkeys,<sp/>where<sp/>n</highlight></codeline>
<codeline lineno="1688"><highlight class="comment"><sp/>*<sp/>is<sp/>the<sp/>number<sp/>of<sp/>rounds<sp/>(10<sp/>to<sp/>14,<sp/>depending<sp/>on<sp/>key<sp/>size).<sp/>The<sp/>number</highlight></codeline>
<codeline lineno="1689"><highlight class="comment"><sp/>*<sp/>of<sp/>rounds<sp/>is<sp/>returned.<sp/>If<sp/>the<sp/>key<sp/>size<sp/>is<sp/>invalid<sp/>(not<sp/>16,<sp/>24<sp/>or<sp/>32),</highlight></codeline>
<codeline lineno="1690"><highlight class="comment"><sp/>*<sp/>then<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1691"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1692"><highlight class="comment"><sp/>*<sp/>This<sp/>implementation<sp/>uses<sp/>a<sp/>256-byte<sp/>table<sp/>and<sp/>is<sp/>NOT<sp/>constant-time.</highlight></codeline>
<codeline lineno="1693"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_keysched(uint32_t<sp/>*skey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule<sp/>for<sp/>decryption<sp/>(&apos;aes_big&apos;<sp/>implementation).</highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_big_keysched_inv(uint32_t<sp/>*skey,</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/>*<sp/>AES<sp/>block<sp/>encryption<sp/>with<sp/>the<sp/>&apos;aes_big&apos;<sp/>implementation<sp/>(fast,<sp/>but</highlight></codeline>
<codeline lineno="1704"><highlight class="comment"><sp/>*<sp/>not<sp/>constant-time).<sp/>This<sp/>function<sp/>encrypts<sp/>a<sp/>single<sp/>block<sp/>&quot;in<sp/>place&quot;.</highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_big_encrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1709"><highlight class="comment"><sp/>*<sp/>AES<sp/>block<sp/>decryption<sp/>with<sp/>the<sp/>&apos;aes_big&apos;<sp/>implementation<sp/>(fast,<sp/>but</highlight></codeline>
<codeline lineno="1710"><highlight class="comment"><sp/>*<sp/>not<sp/>constant-time).<sp/>This<sp/>function<sp/>decrypts<sp/>a<sp/>single<sp/>block<sp/>&quot;in<sp/>place&quot;.</highlight></codeline>
<codeline lineno="1711"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_big_decrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1715"><highlight class="comment"><sp/>*<sp/>AES<sp/>block<sp/>encryption<sp/>with<sp/>the<sp/>&apos;aes_small&apos;<sp/>implementation<sp/>(small,<sp/>but</highlight></codeline>
<codeline lineno="1716"><highlight class="comment"><sp/>*<sp/>slow<sp/>and<sp/>not<sp/>constant-time).<sp/>This<sp/>function<sp/>encrypts<sp/>a<sp/>single<sp/>block</highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/>*<sp/>&quot;in<sp/>place&quot;.</highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_small_encrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/>*<sp/>AES<sp/>block<sp/>decryption<sp/>with<sp/>the<sp/>&apos;aes_small&apos;<sp/>implementation<sp/>(small,<sp/>but</highlight></codeline>
<codeline lineno="1724"><highlight class="comment"><sp/>*<sp/>slow<sp/>and<sp/>not<sp/>constant-time).<sp/>This<sp/>function<sp/>decrypts<sp/>a<sp/>single<sp/>block</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/>*<sp/>&quot;in<sp/>place&quot;.</highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_small_decrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1731"><highlight class="comment"><sp/>*<sp/>The<sp/>constant-time<sp/>implementation<sp/>is<sp/>&quot;bitsliced&quot;:<sp/>the<sp/>128-bit<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/>*<sp/>split<sp/>over<sp/>eight<sp/>32-bit<sp/>words<sp/>q*<sp/>in<sp/>the<sp/>following<sp/>way:</highlight></codeline>
<codeline lineno="1733"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1734"><highlight class="comment"><sp/>*<sp/>--<sp/>Input<sp/>block<sp/>consists<sp/>in<sp/>16<sp/>bytes:</highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a00<sp/>a10<sp/>a20<sp/>a30<sp/>a01<sp/>a11<sp/>a21<sp/>a31<sp/>a02<sp/>a12<sp/>a22<sp/>a32<sp/>a03<sp/>a13<sp/>a23<sp/>a33</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/>*<sp/>In<sp/>the<sp/>terminology<sp/>of<sp/>FIPS<sp/>197,<sp/>this<sp/>is<sp/>a<sp/>4x4<sp/>matrix<sp/>which<sp/>is<sp/>read</highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/>*<sp/>column<sp/>by<sp/>column.</highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/>*<sp/>--<sp/>Each<sp/>byte<sp/>is<sp/>split<sp/>into<sp/>eight<sp/>bits<sp/>which<sp/>are<sp/>distributed<sp/>over<sp/>the</highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/>*<sp/>eight<sp/>words,<sp/>at<sp/>the<sp/>same<sp/>rank.<sp/>Thus,<sp/>for<sp/>a<sp/>byte<sp/>x<sp/>at<sp/>rank<sp/>k,<sp/>bit<sp/>0</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/>*<sp/>(least<sp/>significant)<sp/>of<sp/>x<sp/>will<sp/>be<sp/>at<sp/>rank<sp/>k<sp/>in<sp/>q0<sp/>(if<sp/>that<sp/>bit<sp/>is<sp/>b,</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/>*<sp/>then<sp/>it<sp/>contributes<sp/>&quot;b<sp/>&lt;&lt;<sp/>k&quot;<sp/>to<sp/>the<sp/>value<sp/>of<sp/>q0),<sp/>bit<sp/>1<sp/>of<sp/>x<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1743"><highlight class="comment"><sp/>*<sp/>at<sp/>rank<sp/>k<sp/>in<sp/>q1,<sp/>and<sp/>so<sp/>on.</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1745"><highlight class="comment"><sp/>*<sp/>--<sp/>Ranks<sp/>given<sp/>to<sp/>bits<sp/>are<sp/>in<sp/>&quot;row<sp/>order&quot;<sp/>and<sp/>are<sp/>either<sp/>all<sp/>even,<sp/>or</highlight></codeline>
<codeline lineno="1746"><highlight class="comment"><sp/>*<sp/>all<sp/>odd.<sp/>Two<sp/>independent<sp/>AES<sp/>states<sp/>are<sp/>thus<sp/>interleaved,<sp/>one<sp/>using</highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/>*<sp/>the<sp/>even<sp/>ranks,<sp/>the<sp/>other<sp/>the<sp/>odd<sp/>ranks.<sp/>Row<sp/>order<sp/>means:</highlight></codeline>
<codeline lineno="1748"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a00<sp/>a01<sp/>a02<sp/>a03<sp/>a10<sp/>a11<sp/>a12<sp/>a13<sp/>a20<sp/>a21<sp/>a22<sp/>a23<sp/>a30<sp/>a31<sp/>a32<sp/>a33</highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/>*<sp/>Converting<sp/>input<sp/>bytes<sp/>from<sp/>two<sp/>AES<sp/>blocks<sp/>to<sp/>bitslice<sp/>representation</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/>*<sp/>is<sp/>done<sp/>in<sp/>the<sp/>following<sp/>way:</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/>*<sp/>--<sp/>Decode<sp/>first<sp/>block<sp/>into<sp/>the<sp/>four<sp/>words<sp/>q0<sp/>q2<sp/>q4<sp/>q6,<sp/>in<sp/>that<sp/>order,</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/>*<sp/>using<sp/>little-endian<sp/>convention.</highlight></codeline>
<codeline lineno="1754"><highlight class="comment"><sp/>*<sp/>--<sp/>Decode<sp/>second<sp/>block<sp/>into<sp/>the<sp/>four<sp/>words<sp/>q1<sp/>q3<sp/>q5<sp/>q7,<sp/>in<sp/>that<sp/>order,</highlight></codeline>
<codeline lineno="1755"><highlight class="comment"><sp/>*<sp/>using<sp/>little-endian<sp/>convention.</highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/>*<sp/>--<sp/>Call<sp/>br_aes_ct_ortho().</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/>*<sp/>Converting<sp/>back<sp/>to<sp/>bytes<sp/>is<sp/>done<sp/>by<sp/>using<sp/>the<sp/>reverse<sp/>operations.<sp/>Note</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"><sp/>*<sp/>that<sp/>br_aes_ct_ortho()<sp/>is<sp/>its<sp/>own<sp/>inverse.</highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/>*<sp/>Perform<sp/>bytewise<sp/>orthogonalization<sp/>of<sp/>eight<sp/>32-bit<sp/>words.<sp/>Bytes</highlight></codeline>
<codeline lineno="1764"><highlight class="comment"><sp/>*<sp/>of<sp/>q0..q7<sp/>are<sp/>spread<sp/>over<sp/>all<sp/>words:<sp/>for<sp/>a<sp/>byte<sp/>x<sp/>that<sp/>occurs</highlight></codeline>
<codeline lineno="1765"><highlight class="comment"><sp/>*<sp/>at<sp/>rank<sp/>i<sp/>in<sp/>q[j]<sp/>(byte<sp/>x<sp/>uses<sp/>bits<sp/>8*i<sp/>to<sp/>8*i+7<sp/>in<sp/>q[j]),<sp/>the<sp/>bit</highlight></codeline>
<codeline lineno="1766"><highlight class="comment"><sp/>*<sp/>of<sp/>rank<sp/>k<sp/>in<sp/>x<sp/>(0<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>7)<sp/>goes<sp/>to<sp/>q[k]<sp/>at<sp/>rank<sp/>8*i+j.</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1768"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>an<sp/>involution.</highlight></codeline>
<codeline lineno="1769"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct_ortho(uint32_t<sp/>*q);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1773"><highlight class="comment"><sp/>*<sp/>The<sp/>AES<sp/>S-box,<sp/>as<sp/>a<sp/>bitsliced<sp/>constant-time<sp/>version.<sp/>The<sp/>input<sp/>array</highlight></codeline>
<codeline lineno="1774"><highlight class="comment"><sp/>*<sp/>consists<sp/>in<sp/>eight<sp/>32-bit<sp/>words;<sp/>32<sp/>S-box<sp/>instances<sp/>are<sp/>computed<sp/>in</highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/>*<sp/>parallel.<sp/>Bits<sp/>0<sp/>to<sp/>7<sp/>of<sp/>each<sp/>S-box<sp/>input<sp/>(bit<sp/>0<sp/>is<sp/>least<sp/>significant)</highlight></codeline>
<codeline lineno="1776"><highlight class="comment"><sp/>*<sp/>are<sp/>spread<sp/>over<sp/>the<sp/>words<sp/>0<sp/>to<sp/>7,<sp/>at<sp/>the<sp/>same<sp/>rank.</highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct_bitslice_Sbox(uint32_t<sp/>*q);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1781"><highlight class="comment"><sp/>*<sp/>Like<sp/>br_aes_bitslice_Sbox(),<sp/>but<sp/>for<sp/>the<sp/>inverse<sp/>S-box.</highlight></codeline>
<codeline lineno="1782"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct_bitslice_invSbox(uint32_t<sp/>*q);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1786"><highlight class="comment"><sp/>*<sp/>Compute<sp/>AES<sp/>encryption<sp/>on<sp/>bitsliced<sp/>data.<sp/>Since<sp/>input<sp/>is<sp/>stored<sp/>on</highlight></codeline>
<codeline lineno="1787"><highlight class="comment"><sp/>*<sp/>eight<sp/>32-bit<sp/>words,<sp/>two<sp/>block<sp/>encryptions<sp/>are<sp/>actually<sp/>performed</highlight></codeline>
<codeline lineno="1788"><highlight class="comment"><sp/>*<sp/>in<sp/>parallel.</highlight></codeline>
<codeline lineno="1789"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct_bitslice_encrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/>uint32_t<sp/>*q);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/>*<sp/>Compute<sp/>AES<sp/>decryption<sp/>on<sp/>bitsliced<sp/>data.<sp/>Since<sp/>input<sp/>is<sp/>stored<sp/>on</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/>*<sp/>eight<sp/>32-bit<sp/>words,<sp/>two<sp/>block<sp/>decryptions<sp/>are<sp/>actually<sp/>performed</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/>*<sp/>in<sp/>parallel.</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct_bitslice_decrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*skey,<sp/>uint32_t<sp/>*q);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule,<sp/>constant-time<sp/>version.<sp/>skey[]<sp/>is<sp/>filled<sp/>with<sp/>n+1</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/>*<sp/>128-bit<sp/>subkeys,<sp/>where<sp/>n<sp/>is<sp/>the<sp/>number<sp/>of<sp/>rounds<sp/>(10<sp/>to<sp/>14,<sp/>depending</highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/>*<sp/>on<sp/>key<sp/>size).<sp/>The<sp/>number<sp/>of<sp/>rounds<sp/>is<sp/>returned.<sp/>If<sp/>the<sp/>key<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/>*<sp/>invalid<sp/>(not<sp/>16,<sp/>24<sp/>or<sp/>32),<sp/>then<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_ct_keysched(uint32_t<sp/>*comp_skey,</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1811"><highlight class="comment"><sp/>*<sp/>Expand<sp/>AES<sp/>subkeys<sp/>as<sp/>produced<sp/>by<sp/>br_aes_ct_keysched(),<sp/>into</highlight></codeline>
<codeline lineno="1812"><highlight class="comment"><sp/>*<sp/>a<sp/>larger<sp/>array<sp/>suitable<sp/>for<sp/>br_aes_ct_bitslice_encrypt()<sp/>and</highlight></codeline>
<codeline lineno="1813"><highlight class="comment"><sp/>*<sp/>br_aes_ct_bitslice_decrypt().</highlight></codeline>
<codeline lineno="1814"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct_skey_expand(uint32_t<sp/>*skey,</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*comp_skey);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>ct64<sp/>implementation,<sp/>the<sp/>same<sp/>bitslicing<sp/>technique<sp/>is<sp/>used,</highlight></codeline>
<codeline lineno="1820"><highlight class="comment"><sp/>*<sp/>but<sp/>four<sp/>instances<sp/>are<sp/>interleaved.<sp/>First<sp/>instance<sp/>uses<sp/>bits<sp/>0,<sp/>4,</highlight></codeline>
<codeline lineno="1821"><highlight class="comment"><sp/>*<sp/>8,<sp/>12,...<sp/>of<sp/>each<sp/>word;<sp/>second<sp/>instance<sp/>uses<sp/>bits<sp/>1,<sp/>5,<sp/>9,<sp/>13,...</highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/>*<sp/>and<sp/>so<sp/>on.</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/>*<sp/>Perform<sp/>bytewise<sp/>orthogonalization<sp/>of<sp/>eight<sp/>64-bit<sp/>words.<sp/>Bytes</highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/>*<sp/>of<sp/>q0..q7<sp/>are<sp/>spread<sp/>over<sp/>all<sp/>words:<sp/>for<sp/>a<sp/>byte<sp/>x<sp/>that<sp/>occurs</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/>*<sp/>at<sp/>rank<sp/>i<sp/>in<sp/>q[j]<sp/>(byte<sp/>x<sp/>uses<sp/>bits<sp/>8*i<sp/>to<sp/>8*i+7<sp/>in<sp/>q[j]),<sp/>the<sp/>bit</highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/>*<sp/>of<sp/>rank<sp/>k<sp/>in<sp/>x<sp/>(0<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>7)<sp/>goes<sp/>to<sp/>q[k]<sp/>at<sp/>rank<sp/>8*i+j.</highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/>*<sp/>This<sp/>operation<sp/>is<sp/>an<sp/>involution.</highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_ortho(uint64_t<sp/>*q);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1836"><highlight class="comment"><sp/>*<sp/>Interleave<sp/>bytes<sp/>for<sp/>an<sp/>AES<sp/>input<sp/>block.<sp/>If<sp/>input<sp/>bytes<sp/>are</highlight></codeline>
<codeline lineno="1837"><highlight class="comment"><sp/>*<sp/>denoted<sp/>0123456789ABCDEF,<sp/>and<sp/>have<sp/>been<sp/>decoded<sp/>with<sp/>little-endian</highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/>*<sp/>convention<sp/>(w[0]<sp/>contains<sp/>0123,<sp/>with<sp/>&apos;3&apos;<sp/>being<sp/>most<sp/>significant;</highlight></codeline>
<codeline lineno="1839"><highlight class="comment"><sp/>*<sp/>w[1]<sp/>contains<sp/>4567,<sp/>and<sp/>so<sp/>on),<sp/>then<sp/>output<sp/>word<sp/>q0<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1840"><highlight class="comment"><sp/>*<sp/>set<sp/>to<sp/>08192A3B<sp/>(again<sp/>little-endian<sp/>convention)<sp/>and<sp/>q1<sp/>will</highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/>*<sp/>be<sp/>set<sp/>to<sp/>4C5D6E7F.</highlight></codeline>
<codeline lineno="1842"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_interleave_in(uint64_t<sp/>*q0,<sp/>uint64_t<sp/>*q1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*w);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1846"><highlight class="comment"><sp/>*<sp/>Perform<sp/>the<sp/>opposite<sp/>of<sp/>br_aes_ct64_interleave_in().</highlight></codeline>
<codeline lineno="1847"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_interleave_out(uint32_t<sp/>*w,<sp/>uint64_t<sp/>q0,<sp/>uint64_t<sp/>q1);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1851"><highlight class="comment"><sp/>*<sp/>The<sp/>AES<sp/>S-box,<sp/>as<sp/>a<sp/>bitsliced<sp/>constant-time<sp/>version.<sp/>The<sp/>input<sp/>array</highlight></codeline>
<codeline lineno="1852"><highlight class="comment"><sp/>*<sp/>consists<sp/>in<sp/>eight<sp/>64-bit<sp/>words;<sp/>64<sp/>S-box<sp/>instances<sp/>are<sp/>computed<sp/>in</highlight></codeline>
<codeline lineno="1853"><highlight class="comment"><sp/>*<sp/>parallel.<sp/>Bits<sp/>0<sp/>to<sp/>7<sp/>of<sp/>each<sp/>S-box<sp/>input<sp/>(bit<sp/>0<sp/>is<sp/>least<sp/>significant)</highlight></codeline>
<codeline lineno="1854"><highlight class="comment"><sp/>*<sp/>are<sp/>spread<sp/>over<sp/>the<sp/>words<sp/>0<sp/>to<sp/>7,<sp/>at<sp/>the<sp/>same<sp/>rank.</highlight></codeline>
<codeline lineno="1855"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_bitslice_Sbox(uint64_t<sp/>*q);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1859"><highlight class="comment"><sp/>*<sp/>Like<sp/>br_aes_bitslice_Sbox(),<sp/>but<sp/>for<sp/>the<sp/>inverse<sp/>S-box.</highlight></codeline>
<codeline lineno="1860"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_bitslice_invSbox(uint64_t<sp/>*q);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/>*<sp/>Compute<sp/>AES<sp/>encryption<sp/>on<sp/>bitsliced<sp/>data.<sp/>Since<sp/>input<sp/>is<sp/>stored<sp/>on</highlight></codeline>
<codeline lineno="1865"><highlight class="comment"><sp/>*<sp/>eight<sp/>64-bit<sp/>words,<sp/>four<sp/>block<sp/>encryptions<sp/>are<sp/>actually<sp/>performed</highlight></codeline>
<codeline lineno="1866"><highlight class="comment"><sp/>*<sp/>in<sp/>parallel.</highlight></codeline>
<codeline lineno="1867"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_bitslice_encrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*skey,<sp/>uint64_t<sp/>*q);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1872"><highlight class="comment"><sp/>*<sp/>Compute<sp/>AES<sp/>decryption<sp/>on<sp/>bitsliced<sp/>data.<sp/>Since<sp/>input<sp/>is<sp/>stored<sp/>on</highlight></codeline>
<codeline lineno="1873"><highlight class="comment"><sp/>*<sp/>eight<sp/>64-bit<sp/>words,<sp/>four<sp/>block<sp/>decryptions<sp/>are<sp/>actually<sp/>performed</highlight></codeline>
<codeline lineno="1874"><highlight class="comment"><sp/>*<sp/>in<sp/>parallel.</highlight></codeline>
<codeline lineno="1875"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_bitslice_decrypt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*skey,<sp/>uint64_t<sp/>*q);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1880"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule,<sp/>constant-time<sp/>version.<sp/>skey[]<sp/>is<sp/>filled<sp/>with<sp/>n+1</highlight></codeline>
<codeline lineno="1881"><highlight class="comment"><sp/>*<sp/>128-bit<sp/>subkeys,<sp/>where<sp/>n<sp/>is<sp/>the<sp/>number<sp/>of<sp/>rounds<sp/>(10<sp/>to<sp/>14,<sp/>depending</highlight></codeline>
<codeline lineno="1882"><highlight class="comment"><sp/>*<sp/>on<sp/>key<sp/>size).<sp/>The<sp/>number<sp/>of<sp/>rounds<sp/>is<sp/>returned.<sp/>If<sp/>the<sp/>key<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="1883"><highlight class="comment"><sp/>*<sp/>invalid<sp/>(not<sp/>16,<sp/>24<sp/>or<sp/>32),<sp/>then<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1884"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_ct64_keysched(uint64_t<sp/>*comp_skey,</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1889"><highlight class="comment"><sp/>*<sp/>Expand<sp/>AES<sp/>subkeys<sp/>as<sp/>produced<sp/>by<sp/>br_aes_ct64_keysched(),<sp/>into</highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/>*<sp/>a<sp/>larger<sp/>array<sp/>suitable<sp/>for<sp/>br_aes_ct64_bitslice_encrypt()<sp/>and</highlight></codeline>
<codeline lineno="1891"><highlight class="comment"><sp/>*<sp/>br_aes_ct64_bitslice_decrypt().</highlight></codeline>
<codeline lineno="1892"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_aes_ct64_skey_expand(uint64_t<sp/>*skey,</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*comp_skey);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/>*<sp/>Test<sp/>support<sp/>for<sp/>AES-NI<sp/>opcodes.</highlight></codeline>
<codeline lineno="1898"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>br_aes_x86ni_supported(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1902"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule,<sp/>using<sp/>x86<sp/>AES-NI<sp/>instructions.<sp/>This<sp/>yields<sp/>the</highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/>*<sp/>subkeys<sp/>in<sp/>the<sp/>encryption<sp/>direction.<sp/>Number<sp/>of<sp/>rounds<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1904"><highlight class="comment"><sp/>*<sp/>Key<sp/>size<sp/>MUST<sp/>be<sp/>16,<sp/>24<sp/>or<sp/>32<sp/>bytes;<sp/>otherwise,<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1905"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_x86ni_keysched_enc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*skni,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1910"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule,<sp/>using<sp/>x86<sp/>AES-NI<sp/>instructions.<sp/>This<sp/>yields<sp/>the</highlight></codeline>
<codeline lineno="1911"><highlight class="comment"><sp/>*<sp/>subkeys<sp/>in<sp/>the<sp/>decryption<sp/>direction.<sp/>Number<sp/>of<sp/>rounds<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1912"><highlight class="comment"><sp/>*<sp/>Key<sp/>size<sp/>MUST<sp/>be<sp/>16,<sp/>24<sp/>or<sp/>32<sp/>bytes;<sp/>otherwise,<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1913"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_x86ni_keysched_dec(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*skni,</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/>*<sp/>Test<sp/>support<sp/>for<sp/>AES<sp/>POWER8<sp/>opcodes.</highlight></codeline>
<codeline lineno="1919"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>br_aes_pwr8_supported(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1923"><highlight class="comment"><sp/>*<sp/>AES<sp/>key<sp/>schedule,<sp/>using<sp/>POWER8<sp/>instructions.<sp/>This<sp/>yields<sp/>the</highlight></codeline>
<codeline lineno="1924"><highlight class="comment"><sp/>*<sp/>subkeys<sp/>in<sp/>the<sp/>encryption<sp/>direction.<sp/>Number<sp/>of<sp/>rounds<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/>*<sp/>Key<sp/>size<sp/>MUST<sp/>be<sp/>16,<sp/>24<sp/>or<sp/>32<sp/>bytes;<sp/>otherwise,<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1926"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>br_aes_pwr8_keysched(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*skni,</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/>*<sp/>RSA.</highlight></codeline>
<codeline lineno="1933"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/>*<sp/>Apply<sp/>proper<sp/>PKCS#1<sp/>v1.5<sp/>padding<sp/>(for<sp/>signatures).<sp/>&apos;hash_oid&apos;<sp/>is</highlight></codeline>
<codeline lineno="1937"><highlight class="comment"><sp/>*<sp/>the<sp/>encoded<sp/>hash<sp/>function<sp/>OID,<sp/>or<sp/>NULL.</highlight></codeline>
<codeline lineno="1938"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal">uint32_t<sp/>br_rsa_pkcs1_sig_pad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>n_bitlen,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/>*<sp/>Check<sp/>PKCS#1<sp/>v1.5<sp/>padding<sp/>(for<sp/>signatures).<sp/>&apos;hash_oid&apos;<sp/>is<sp/>the<sp/>encoded</highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/>*<sp/>hash<sp/>function<sp/>OID,<sp/>or<sp/>NULL.<sp/>The<sp/>provided<sp/>&apos;sig&apos;<sp/>value<sp/>is<sp/>_after_<sp/>the</highlight></codeline>
<codeline lineno="1946"><highlight class="comment"><sp/>*<sp/>modular<sp/>exponentiation,<sp/>i.e.<sp/>it<sp/>should<sp/>be<sp/>the<sp/>padded<sp/>hash.<sp/>On</highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/>*<sp/>success,<sp/>the<sp/>hashed<sp/>message<sp/>is<sp/>extracted.</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal">uint32_t<sp/>br_rsa_pkcs1_sig_unpad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_len,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_out);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1954"><highlight class="comment"><sp/>*<sp/>Apply<sp/>proper<sp/>PSS<sp/>padding.<sp/>The<sp/>&apos;x&apos;<sp/>buffer<sp/>is<sp/>output<sp/>only:<sp/>it</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"><sp/>*<sp/>receives<sp/>the<sp/>value<sp/>that<sp/>is<sp/>to<sp/>be<sp/>exponentiated.</highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1958"><highlight class="comment">uint32_t<sp/>br_rsa_pss_sig_pad(const<sp/>br_prng_class<sp/>**rng,</highlight></codeline>
<codeline lineno="1959"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_hash_class<sp/>*hf_data,<sp/>const<sp/>br_hash_class<sp/>*hf_mgf1,</highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>unsigned<sp/>char<sp/>*hash,<sp/>size_t<sp/>salt_len,</highlight></codeline>
<codeline lineno="1961"><highlight class="comment"><sp/><sp/><sp/><sp/>uint32_t<sp/>n_bitlen,<sp/>unsigned<sp/>char<sp/>*x);</highlight></codeline>
<codeline lineno="1962"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1964"><highlight class="comment"><sp/>*<sp/>Check<sp/>PSS<sp/>padding.<sp/>The<sp/>provided<sp/>value<sp/>is<sp/>the<sp/>one<sp/>_after_</highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/>*<sp/>the<sp/>modular<sp/>exponentiation;<sp/>it<sp/>is<sp/>modified<sp/>by<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="1966"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>infers<sp/>the<sp/>signature<sp/>length<sp/>from<sp/>the<sp/>public<sp/>key</highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/>*<sp/>size,<sp/>i.e.<sp/>it<sp/>assumes<sp/>that<sp/>this<sp/>has<sp/>already<sp/>been<sp/>verified<sp/>(as</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/>*<sp/>part<sp/>of<sp/>the<sp/>exponentiation).</highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1972"><highlight class="comment">uint32_t<sp/>br_rsa_pss_sig_unpad(</highlight></codeline>
<codeline lineno="1973"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_hash_class<sp/>*hf_data,<sp/>const<sp/>br_hash_class<sp/>*hf_mgf1,</highlight></codeline>
<codeline lineno="1974"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>unsigned<sp/>char<sp/>*hash,<sp/>size_t<sp/>salt_len,</highlight></codeline>
<codeline lineno="1975"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_rsa_public_key<sp/>*pk,<sp/>unsigned<sp/>char<sp/>*x);</highlight></codeline>
<codeline lineno="1976"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1978"><highlight class="comment"><sp/>*<sp/>Apply<sp/>OAEP<sp/>padding.<sp/>Returned<sp/>value<sp/>is<sp/>the<sp/>actual<sp/>padded<sp/>string<sp/>length,</highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/>*<sp/>or<sp/>zero<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1982"><highlight class="comment">size_t<sp/>br_rsa_oaep_pad(const<sp/>br_prng_class<sp/>**rnd,<sp/>const<sp/>br_hash_class<sp/>*dig,</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>void<sp/>*label,<sp/>size_t<sp/>label_len,<sp/>const<sp/>br_rsa_public_key<sp/>*pk,</highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>*dst,<sp/>size_t<sp/>dst_nax_len,<sp/>const<sp/>void<sp/>*src,<sp/>size_t<sp/>src_len);</highlight></codeline>
<codeline lineno="1985"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/>*<sp/>Unravel<sp/>and<sp/>check<sp/>OAEP<sp/>padding.<sp/>If<sp/>the<sp/>padding<sp/>is<sp/>correct,<sp/>then<sp/>1<sp/>is</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/>*<sp/>returned,<sp/>&apos;*len&apos;<sp/>is<sp/>adjusted<sp/>to<sp/>the<sp/>length<sp/>of<sp/>the<sp/>message,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/>*<sp/>data<sp/>is<sp/>moved<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>&apos;data&apos;<sp/>buffer.<sp/>If<sp/>the<sp/>padding<sp/>is</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/>*<sp/>incorrect,<sp/>then<sp/>0<sp/>is<sp/>returned<sp/>and<sp/>&apos;*len&apos;<sp/>is<sp/>untouched.<sp/>Either<sp/>way,</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/>*<sp/>the<sp/>complete<sp/>buffer<sp/>contents<sp/>are<sp/>altered.</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal">uint32_t<sp/>br_rsa_oaep_unpad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/>*<sp/>Compute<sp/>MGF1<sp/>for<sp/>a<sp/>given<sp/>seed,<sp/>and<sp/>XOR<sp/>the<sp/>output<sp/>into<sp/>the<sp/>provided</highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/>*<sp/>buffer.</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_mgf1_xor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*seed,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>seed_len);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/>*<sp/>Inner<sp/>function<sp/>for<sp/>RSA<sp/>key<sp/>generation;<sp/>used<sp/>by<sp/>the<sp/>&quot;i31&quot;<sp/>and<sp/>&quot;i62&quot;</highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/>*<sp/>implementations.</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2008"><highlight class="comment">uint32_t<sp/>br_rsa_i31_keygen_inner(const<sp/>br_prng_class<sp/>**rng,</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/>br_rsa_private_key<sp/>*sk,<sp/>void<sp/>*kbuf_priv,</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/>br_rsa_public_key<sp/>*pk,<sp/>void<sp/>*kbuf_pub,</highlight></codeline>
<codeline lineno="2011"><highlight class="comment"><sp/><sp/><sp/><sp/>unsigned<sp/>size,<sp/>uint32_t<sp/>pubexp,<sp/>br_i31_modpow_opt_type<sp/>mp31);</highlight></codeline>
<codeline lineno="2012"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/>*<sp/>Elliptic<sp/>curves.</highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2019"><highlight class="comment"><sp/>*<sp/>Type<sp/>for<sp/>generic<sp/>EC<sp/>parameters:<sp/>curve<sp/>order<sp/>(unsigned<sp/>big-endian</highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/>*<sp/>encoding)<sp/>and<sp/>encoded<sp/>conventional<sp/>generator.</highlight></codeline>
<codeline lineno="2021"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022" refid="structbr__ec__curve__def" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curve;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*order;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order_len;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*generator;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>generator_len;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">}<sp/><ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref>;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref><sp/>br_secp256r1;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref><sp/>br_secp384r1;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref><sp/>br_secp521r1;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/>*<sp/>For<sp/>Curve25519,<sp/>the<sp/>advertised<sp/>&quot;order&quot;<sp/>really<sp/>is<sp/>2^255-1,<sp/>since<sp/>the</highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/>*<sp/>point<sp/>multipliction<sp/>function<sp/>really<sp/>works<sp/>over<sp/>arbitrary<sp/>255-bit</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/>*<sp/>scalars.<sp/>This<sp/>value<sp/>is<sp/>only<sp/>meant<sp/>as<sp/>a<sp/>hint<sp/>for<sp/>ECDH<sp/>key<sp/>generation;</highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/>*<sp/>only<sp/>ECDSA<sp/>uses<sp/>the<sp/>exact<sp/>curve<sp/>order,<sp/>and<sp/>ECDSA<sp/>is<sp/>not<sp/>used<sp/>with</highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/>*<sp/>that<sp/>specific<sp/>curve.</highlight></codeline>
<codeline lineno="2040"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__curve__def" kindref="compound">br_ec_curve_def</ref><sp/>br_curve25519;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/>*<sp/>Decode<sp/>some<sp/>bytes<sp/>as<sp/>an<sp/>i31<sp/>integer,<sp/>with<sp/>truncation<sp/>(corresponding</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>&apos;bits2int&apos;<sp/>operation<sp/>in<sp/>RFC<sp/>6979).<sp/>The<sp/>target<sp/>ENCODED<sp/>bit</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/>*<sp/>length<sp/>is<sp/>provided<sp/>as<sp/>last<sp/>parameter.<sp/>The<sp/>resulting<sp/>value<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/>*<sp/>this<sp/>declared<sp/>bit<sp/>length,<sp/>and<sp/>consists<sp/>the<sp/>big-endian<sp/>unsigned<sp/>decoding</highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/>*<sp/>of<sp/>exactly<sp/>that<sp/>many<sp/>bits<sp/>in<sp/>the<sp/>source<sp/>(capped<sp/>at<sp/>the<sp/>source<sp/>length).</highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ecdsa_i31_bits2int(uint32_t<sp/>*x,</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>uint32_t<sp/>ebitlen);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/>*<sp/>Decode<sp/>some<sp/>bytes<sp/>as<sp/>an<sp/>i15<sp/>integer,<sp/>with<sp/>truncation<sp/>(corresponding</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>&apos;bits2int&apos;<sp/>operation<sp/>in<sp/>RFC<sp/>6979).<sp/>The<sp/>target<sp/>ENCODED<sp/>bit</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/>*<sp/>length<sp/>is<sp/>provided<sp/>as<sp/>last<sp/>parameter.<sp/>The<sp/>resulting<sp/>value<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/>*<sp/>this<sp/>declared<sp/>bit<sp/>length,<sp/>and<sp/>consists<sp/>the<sp/>big-endian<sp/>unsigned<sp/>decoding</highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/>*<sp/>of<sp/>exactly<sp/>that<sp/>many<sp/>bits<sp/>in<sp/>the<sp/>source<sp/>(capped<sp/>at<sp/>the<sp/>source<sp/>length).</highlight></codeline>
<codeline lineno="2059"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ecdsa_i15_bits2int(uint16_t<sp/>*x,</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>uint32_t<sp/>ebitlen);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/>*<sp/>ASN.1<sp/>support<sp/>functions.</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/>*<sp/>A<sp/>br_asn1_uint<sp/>structure<sp/>contains<sp/>encoding<sp/>information<sp/>about<sp/>an</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/>*<sp/>INTEGER<sp/>nonnegative<sp/>value:<sp/>pointer<sp/>to<sp/>the<sp/>integer<sp/>contents<sp/>(unsigned</highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/>*<sp/>big-endian<sp/>representation),<sp/>length<sp/>of<sp/>the<sp/>integer<sp/>contents,</highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/>*<sp/>and<sp/>length<sp/>of<sp/>the<sp/>encoded<sp/>value.<sp/>The<sp/>data<sp/>shall<sp/>have<sp/>minimal<sp/>length:</highlight></codeline>
<codeline lineno="2073"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>integer<sp/>value<sp/>is<sp/>zero,<sp/>then<sp/>&apos;len&apos;<sp/>must<sp/>be<sp/>zero.</highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>integer<sp/>value<sp/>is<sp/>not<sp/>zero,<sp/>then<sp/>data[0]<sp/>must<sp/>be<sp/>non-zero.</highlight></codeline>
<codeline lineno="2075"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2076"><highlight class="comment"><sp/>*<sp/>Under<sp/>these<sp/>conditions,<sp/>&apos;asn1len&apos;<sp/>is<sp/>necessarily<sp/>equal<sp/>to<sp/>either<sp/>len</highlight></codeline>
<codeline lineno="2077"><highlight class="comment"><sp/>*<sp/>or<sp/>len+1.</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079" refid="structbr__asn1__uint" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>asn1len;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">}<sp/><ref refid="structbr__asn1__uint" kindref="compound">br_asn1_uint</ref>;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/>*<sp/>Given<sp/>an<sp/>encoded<sp/>integer<sp/>(unsigned<sp/>big-endian,<sp/>with<sp/>possible<sp/>leading</highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/>*<sp/>bytes<sp/>of<sp/>value<sp/>0),<sp/>returned<sp/>the<sp/>&quot;prepared<sp/>INTEGER&quot;<sp/>structure.</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><ref refid="structbr__asn1__uint" kindref="compound">br_asn1_uint</ref><sp/>br_asn1_uint_prepare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*xdata,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/>*<sp/>Encode<sp/>an<sp/>ASN.1<sp/>length.<sp/>The<sp/>length<sp/>of<sp/>the<sp/>encoded<sp/>length<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="2093"><highlight class="comment"><sp/>*<sp/>If<sp/>&apos;dest&apos;<sp/>is<sp/>NULL,<sp/>then<sp/>no<sp/>encoding<sp/>is<sp/>performed,<sp/>but<sp/>the<sp/>length<sp/>of</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/>*<sp/>the<sp/>encoded<sp/>length<sp/>is<sp/>still<sp/>computed<sp/>and<sp/>returned.</highlight></codeline>
<codeline lineno="2095"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>br_asn1_encode_length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/>*<sp/>Convenient<sp/>macro<sp/>for<sp/>computing<sp/>lengths<sp/>of<sp/>lengths.</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>len_of_len(len)<sp/><sp/><sp/>br_asn1_encode_length(NULL,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2104"><highlight class="comment"><sp/>*<sp/>Encode<sp/>a<sp/>(prepared)<sp/>ASN.1<sp/>INTEGER.<sp/>The<sp/>encoded<sp/>length<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="2105"><highlight class="comment"><sp/>*<sp/>If<sp/>&apos;dest&apos;<sp/>is<sp/>NULL,<sp/>then<sp/>no<sp/>encoding<sp/>is<sp/>performed,<sp/>but<sp/>the<sp/>length<sp/>of</highlight></codeline>
<codeline lineno="2106"><highlight class="comment"><sp/>*<sp/>the<sp/>encoded<sp/>integer<sp/>is<sp/>still<sp/>computed<sp/>and<sp/>returned.</highlight></codeline>
<codeline lineno="2107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>br_asn1_encode_uint(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/><ref refid="structbr__asn1__uint" kindref="compound">br_asn1_uint</ref><sp/>pp);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2111"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>OID<sp/>that<sp/>identifies<sp/>an<sp/>elliptic<sp/>curve.<sp/>Returned<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="2112"><highlight class="comment"><sp/>*<sp/>the<sp/>DER-encoded<sp/>OID,<sp/>with<sp/>the<sp/>length<sp/>(always<sp/>one<sp/>byte)<sp/>but<sp/>without</highlight></codeline>
<codeline lineno="2113"><highlight class="comment"><sp/>*<sp/>the<sp/>tag.<sp/>Thus,<sp/>the<sp/>first<sp/>byte<sp/>of<sp/>the<sp/>returned<sp/>buffer<sp/>contains<sp/>the</highlight></codeline>
<codeline lineno="2114"><highlight class="comment"><sp/>*<sp/>number<sp/>of<sp/>subsequent<sp/>bytes<sp/>in<sp/>the<sp/>value.<sp/>If<sp/>the<sp/>curve<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="2115"><highlight class="comment"><sp/>*<sp/>recognised,<sp/>NULL<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="2116"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*br_get_curve_OID(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curve);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/>*<sp/>Inner<sp/>function<sp/>for<sp/>EC<sp/>private<sp/>key<sp/>encoding.<sp/>This<sp/>is<sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/>*<sp/>the<sp/>API<sp/>function<sp/>br_encode_ec_raw_der(),<sp/>except<sp/>for<sp/>an<sp/>extra</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/>*<sp/>parameter:<sp/>if<sp/>&apos;include_curve_oid&apos;<sp/>is<sp/>zero,<sp/>then<sp/>the<sp/>curve<sp/>OID<sp/>is</highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/>*<sp/>_not_<sp/>included<sp/>in<sp/>the<sp/>output<sp/>blob<sp/>(this<sp/>is<sp/>for<sp/>PKCS#8<sp/>support).</highlight></codeline>
<codeline lineno="2124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2126"><highlight class="comment">size_t<sp/>br_encode_ec_raw_der_inner(void<sp/>*dest,</highlight></codeline>
<codeline lineno="2127"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_ec_private_key<sp/>*sk,<sp/>const<sp/>br_ec_public_key<sp/>*pk,</highlight></codeline>
<codeline lineno="2128"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>include_curve_oid);</highlight></codeline>
<codeline lineno="2129"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2132"><highlight class="comment"><sp/>*<sp/>SSL/TLS<sp/>support<sp/>functions.</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2136"><highlight class="comment"><sp/>*<sp/>Record<sp/>types.</highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_CHANGE_CIPHER_SPEC<sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_ALERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_HANDSHAKE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_APPLICATION_DATA<sp/><sp/><sp/><sp/><sp/><sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2144"><highlight class="comment"><sp/>*<sp/>Handshake<sp/>message<sp/>types.</highlight></codeline>
<codeline lineno="2145"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_HELLO_REQUEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_CLIENT_HELLO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_SERVER_HELLO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_CERTIFICATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_SERVER_KEY_EXCHANGE<sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_CERTIFICATE_REQUEST<sp/><sp/><sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_SERVER_HELLO_DONE<sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_CERTIFICATE_VERIFY<sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_CLIENT_KEY_EXCHANGE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_SSL_FINISHED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2158"><highlight class="comment"><sp/>*<sp/>Alert<sp/>levels.</highlight></codeline>
<codeline lineno="2159"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_LEVEL_WARNING<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_LEVEL_FATAL<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2164"><highlight class="comment"><sp/>*<sp/>Low-level<sp/>I/O<sp/>state.</highlight></codeline>
<codeline lineno="2165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_IO_FAILED<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_IO_IN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_IO_OUT<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_IO_INOUT<sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/>*<sp/>Mark<sp/>a<sp/>SSL<sp/>engine<sp/>as<sp/>failed.<sp/>The<sp/>provided<sp/>error<sp/>code<sp/>is<sp/>recorded<sp/>if</highlight></codeline>
<codeline lineno="2173"><highlight class="comment"><sp/>*<sp/>the<sp/>engine<sp/>was<sp/>not<sp/>already<sp/>marked<sp/>as<sp/>failed.<sp/>If<sp/>&apos;err&apos;<sp/>is<sp/>0,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="2174"><highlight class="comment"><sp/>*<sp/>engine<sp/>is<sp/>marked<sp/>as<sp/>closed<sp/>(without<sp/>error).</highlight></codeline>
<codeline lineno="2175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2177"><highlight class="comment">void<sp/>br_ssl_engine_fail(br_ssl_engine_context<sp/>*cc,<sp/>int<sp/>err);</highlight></codeline>
<codeline lineno="2178"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2180"><highlight class="comment"><sp/>*<sp/>Test<sp/>whether<sp/>the<sp/>engine<sp/>is<sp/>closed<sp/>(normally<sp/>or<sp/>as<sp/>a<sp/>failure).</highlight></codeline>
<codeline lineno="2181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2183"><highlight class="comment">static<sp/>inline<sp/>int</highlight></codeline>
<codeline lineno="2184"><highlight class="comment">br_ssl_engine_closed(const<sp/>br_ssl_engine_context<sp/>*cc)</highlight></codeline>
<codeline lineno="2185"><highlight class="comment">{</highlight></codeline>
<codeline lineno="2186"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>cc-&gt;iomode<sp/>==<sp/>BR_IO_FAILED;</highlight></codeline>
<codeline lineno="2187"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2190"><highlight class="comment"><sp/>*<sp/>Configure<sp/>a<sp/>new<sp/>maximum<sp/>fragment<sp/>length.<sp/>If<sp/>possible,<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="2191"><highlight class="comment"><sp/>*<sp/>length<sp/>for<sp/>outgoing<sp/>records<sp/>is<sp/>immediately<sp/>adjusted<sp/>(if<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="2192"><highlight class="comment"><sp/>*<sp/>not<sp/>already<sp/>too<sp/>many<sp/>buffered<sp/>bytes<sp/>for<sp/>that).</highlight></codeline>
<codeline lineno="2193"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2196"><highlight class="comment">void<sp/>br_ssl_engine_new_max_frag_len(</highlight></codeline>
<codeline lineno="2197"><highlight class="comment"><sp/><sp/><sp/><sp/>br_ssl_engine_context<sp/>*rc,<sp/>unsigned<sp/>max_frag_len);</highlight></codeline>
<codeline lineno="2198"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2200"><highlight class="comment"><sp/>*<sp/>Test<sp/>whether<sp/>the<sp/>current<sp/>incoming<sp/>record<sp/>has<sp/>been<sp/>fully<sp/>received</highlight></codeline>
<codeline lineno="2201"><highlight class="comment"><sp/>*<sp/>or<sp/>not.<sp/>This<sp/>functions<sp/>returns<sp/>0<sp/>only<sp/>if<sp/>a<sp/>complete<sp/>record<sp/>header</highlight></codeline>
<codeline lineno="2202"><highlight class="comment"><sp/>*<sp/>has<sp/>been<sp/>received,<sp/>but<sp/>some<sp/>of<sp/>the<sp/>(possibly<sp/>encrypted)<sp/>payload</highlight></codeline>
<codeline lineno="2203"><highlight class="comment"><sp/>*<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>obtained.</highlight></codeline>
<codeline lineno="2204"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2206"><highlight class="comment">int<sp/>br_ssl_engine_recvrec_finished(const<sp/>br_ssl_engine_context<sp/>*rc);</highlight></codeline>
<codeline lineno="2207"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2209"><highlight class="comment"><sp/>*<sp/>Flush<sp/>the<sp/>current<sp/>record<sp/>(if<sp/>not<sp/>empty).<sp/>This<sp/>is<sp/>meant<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="2210"><highlight class="comment"><sp/>*<sp/>from<sp/>the<sp/>handshake<sp/>processor<sp/>only.</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2213"><highlight class="comment">void<sp/>br_ssl_engine_flush_record(br_ssl_engine_context<sp/>*cc);</highlight></codeline>
<codeline lineno="2214"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2216"><highlight class="comment"><sp/>*<sp/>Test<sp/>whether<sp/>there<sp/>is<sp/>some<sp/>accumulated<sp/>payload<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2220"><highlight class="comment">static<sp/>inline<sp/>int</highlight></codeline>
<codeline lineno="2221"><highlight class="comment">br_ssl_engine_has_pld_to_send(const<sp/>br_ssl_engine_context<sp/>*rc)</highlight></codeline>
<codeline lineno="2222"><highlight class="comment">{</highlight></codeline>
<codeline lineno="2223"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>rc-&gt;oxa<sp/>!=<sp/>rc-&gt;oxb<sp/>&amp;&amp;<sp/>rc-&gt;oxa<sp/>!=<sp/>rc-&gt;oxc;</highlight></codeline>
<codeline lineno="2224"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2225"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2227"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>RNG<sp/>in<sp/>engine.<sp/>Returned<sp/>value<sp/>is<sp/>1<sp/>on<sp/>success,<sp/>0<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="2228"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>will<sp/>try<sp/>to<sp/>use<sp/>the<sp/>OS-provided<sp/>RNG,<sp/>if<sp/>available.<sp/>If</highlight></codeline>
<codeline lineno="2229"><highlight class="comment"><sp/>*<sp/>there<sp/>is<sp/>no<sp/>OS-provided<sp/>RNG,<sp/>or<sp/>if<sp/>it<sp/>failed,<sp/>and<sp/>no<sp/>entropy<sp/>was</highlight></codeline>
<codeline lineno="2230"><highlight class="comment"><sp/>*<sp/>injected<sp/>by<sp/>the<sp/>caller,<sp/>then<sp/>a<sp/>failure<sp/>will<sp/>be<sp/>reported.<sp/>On<sp/>error,</highlight></codeline>
<codeline lineno="2231"><highlight class="comment"><sp/>*<sp/>the<sp/>context<sp/>error<sp/>code<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="2232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2234"><highlight class="comment">int<sp/>br_ssl_engine_init_rand(br_ssl_engine_context<sp/>*cc);</highlight></codeline>
<codeline lineno="2235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2237"><highlight class="comment"><sp/>*<sp/>Reset<sp/>the<sp/>handshake-related<sp/>parts<sp/>of<sp/>the<sp/>engine.</highlight></codeline>
<codeline lineno="2238"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2240"><highlight class="comment">void<sp/>br_ssl_engine_hs_reset(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2241"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>(*hsinit)(void<sp/>*),<sp/>void<sp/>(*hsrun)(void<sp/>*));</highlight></codeline>
<codeline lineno="2242"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2244"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>PRF<sp/>to<sp/>use<sp/>for<sp/>this<sp/>context,<sp/>for<sp/>the<sp/>provided<sp/>PRF<sp/>hash</highlight></codeline>
<codeline lineno="2245"><highlight class="comment"><sp/>*<sp/>function<sp/>ID.</highlight></codeline>
<codeline lineno="2246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2248"><highlight class="comment">br_tls_prf_impl<sp/>br_ssl_engine_get_PRF(br_ssl_engine_context<sp/>*cc,<sp/>int<sp/>prf_id);</highlight></codeline>
<codeline lineno="2249"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2251"><highlight class="comment"><sp/>*<sp/>Consume<sp/>the<sp/>provided<sp/>pre-master<sp/>secret<sp/>and<sp/>compute<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="2252"><highlight class="comment"><sp/>*<sp/>master<sp/>secret.<sp/>The<sp/>&apos;prf_id&apos;<sp/>is<sp/>the<sp/>ID<sp/>of<sp/>the<sp/>hash<sp/>function<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="2253"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>TLS<sp/>1.2<sp/>PRF<sp/>(ignored<sp/>if<sp/>the<sp/>version<sp/>is<sp/>TLS<sp/>1.0<sp/>or<sp/>1.1).</highlight></codeline>
<codeline lineno="2254"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2256"><highlight class="comment">void<sp/>br_ssl_engine_compute_master(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2257"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>prf_id,<sp/>const<sp/>void<sp/>*pms,<sp/>size_t<sp/>len);</highlight></codeline>
<codeline lineno="2258"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2260"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>CBC<sp/>decryption<sp/>for<sp/>incoming<sp/>records.</highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF<sp/>(ignored<sp/>if<sp/>not<sp/>TLS<sp/>1.2+)</highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>mac_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>HMAC</highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>bc_impl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>cipher<sp/>implementation<sp/>(CBC<sp/>decryption)</highlight></codeline>
<codeline lineno="2266"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cipher_key_len<sp/><sp/><sp/>block<sp/>cipher<sp/>key<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2267"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2269"><highlight class="comment">void<sp/>br_ssl_engine_switch_cbc_in(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2270"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id,<sp/>int<sp/>mac_id,</highlight></codeline>
<codeline lineno="2271"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_block_cbcdec_class<sp/>*bc_impl,<sp/>size_t<sp/>cipher_key_len);</highlight></codeline>
<codeline lineno="2272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>CBC<sp/>encryption<sp/>for<sp/>outgoing<sp/>records.</highlight></codeline>
<codeline lineno="2275"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2276"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2277"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF<sp/>(ignored<sp/>if<sp/>not<sp/>TLS<sp/>1.2+)</highlight></codeline>
<codeline lineno="2278"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>mac_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>HMAC</highlight></codeline>
<codeline lineno="2279"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>bc_impl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>cipher<sp/>implementation<sp/>(CBC<sp/>encryption)</highlight></codeline>
<codeline lineno="2280"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cipher_key_len<sp/><sp/><sp/>block<sp/>cipher<sp/>key<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2281"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2284"><highlight class="comment">void<sp/>br_ssl_engine_switch_cbc_out(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2285"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id,<sp/>int<sp/>mac_id,</highlight></codeline>
<codeline lineno="2286"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_block_cbcenc_class<sp/>*bc_impl,<sp/>size_t<sp/>cipher_key_len);</highlight></codeline>
<codeline lineno="2287"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2289"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>GCM<sp/>decryption<sp/>for<sp/>incoming<sp/>records.</highlight></codeline>
<codeline lineno="2290"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2292"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF</highlight></codeline>
<codeline lineno="2293"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>bc_impl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>cipher<sp/>implementation<sp/>(CTR)</highlight></codeline>
<codeline lineno="2294"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cipher_key_len<sp/><sp/><sp/>block<sp/>cipher<sp/>key<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2295"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2298"><highlight class="comment">void<sp/>br_ssl_engine_switch_gcm_in(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2299"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id,</highlight></codeline>
<codeline lineno="2300"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_block_ctr_class<sp/>*bc_impl,<sp/>size_t<sp/>cipher_key_len);</highlight></codeline>
<codeline lineno="2301"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2304"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>GCM<sp/>encryption<sp/>for<sp/>outgoing<sp/>records.</highlight></codeline>
<codeline lineno="2305"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2306"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2307"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF</highlight></codeline>
<codeline lineno="2308"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>bc_impl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>cipher<sp/>implementation<sp/>(CTR)</highlight></codeline>
<codeline lineno="2309"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cipher_key_len<sp/><sp/><sp/>block<sp/>cipher<sp/>key<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2312"><highlight class="comment">void<sp/>br_ssl_engine_switch_gcm_out(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2313"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id,</highlight></codeline>
<codeline lineno="2314"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_block_ctr_class<sp/>*bc_impl,<sp/>size_t<sp/>cipher_key_len);</highlight></codeline>
<codeline lineno="2315"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>ChaCha20+Poly1305<sp/>decryption<sp/>for<sp/>incoming<sp/>records.</highlight></codeline>
<codeline lineno="2318"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF</highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2323"><highlight class="comment">void<sp/>br_ssl_engine_switch_chapol_in(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id);</highlight></codeline>
<codeline lineno="2325"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2327"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>ChaCha20+Poly1305<sp/>encryption<sp/>for<sp/>outgoing<sp/>records.</highlight></codeline>
<codeline lineno="2328"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2329"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2330"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF</highlight></codeline>
<codeline lineno="2331"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2333"><highlight class="comment">void<sp/>br_ssl_engine_switch_chapol_out(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2334"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id);</highlight></codeline>
<codeline lineno="2335"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2337"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>CCM<sp/>decryption<sp/>for<sp/>incoming<sp/>records.</highlight></codeline>
<codeline lineno="2338"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2339"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2340"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF</highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>bc_impl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>cipher<sp/>implementation<sp/>(CTR+CBC)</highlight></codeline>
<codeline lineno="2342"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cipher_key_len<sp/><sp/><sp/>block<sp/>cipher<sp/>key<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2343"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>tag_len<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2346"><highlight class="comment">void<sp/>br_ssl_engine_switch_ccm_in(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2347"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id,</highlight></codeline>
<codeline lineno="2348"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_block_ctrcbc_class<sp/>*bc_impl,</highlight></codeline>
<codeline lineno="2349"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>cipher_key_len,<sp/>size_t<sp/>tag_len);</highlight></codeline>
<codeline lineno="2350"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2352"><highlight class="comment"><sp/>*<sp/>Switch<sp/>to<sp/>GCM<sp/>encryption<sp/>for<sp/>outgoing<sp/>records.</highlight></codeline>
<codeline lineno="2353"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>engine<sp/>context</highlight></codeline>
<codeline lineno="2354"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is_client<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non-zero<sp/>for<sp/>a<sp/>client,<sp/>zero<sp/>for<sp/>a<sp/>server</highlight></codeline>
<codeline lineno="2355"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>prf_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>hash<sp/>function<sp/>for<sp/>PRF</highlight></codeline>
<codeline lineno="2356"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>bc_impl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>cipher<sp/>implementation<sp/>(CTR+CBC)</highlight></codeline>
<codeline lineno="2357"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>cipher_key_len<sp/><sp/><sp/>block<sp/>cipher<sp/>key<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2358"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>tag_len<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/>length<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="2359"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2362"><highlight class="comment">void<sp/>br_ssl_engine_switch_ccm_out(br_ssl_engine_context<sp/>*cc,</highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>is_client,<sp/>int<sp/>prf_id,</highlight></codeline>
<codeline lineno="2364"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>br_block_ctrcbc_class<sp/>*bc_impl,</highlight></codeline>
<codeline lineno="2365"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>cipher_key_len,<sp/>size_t<sp/>tag_len);</highlight></codeline>
<codeline lineno="2366"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2368"><highlight class="comment"><sp/>*<sp/>Calls<sp/>to<sp/>T0-generated<sp/>code.</highlight></codeline>
<codeline lineno="2369"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ssl_hs_client_init_main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ssl_hs_client_run(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ssl_hs_server_init_main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_ssl_hs_server_run(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2376"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>hash<sp/>function<sp/>to<sp/>use<sp/>for<sp/>signatures,<sp/>given<sp/>a<sp/>bit<sp/>mask<sp/>of</highlight></codeline>
<codeline lineno="2377"><highlight class="comment"><sp/>*<sp/>supported<sp/>hash<sp/>functions.<sp/>This<sp/>implements<sp/>a<sp/>strict<sp/>choice<sp/>order</highlight></codeline>
<codeline lineno="2378"><highlight class="comment"><sp/>*<sp/>(namely<sp/>SHA-256,<sp/>SHA-384,<sp/>SHA-512,<sp/>SHA-224,<sp/>SHA-1).<sp/>If<sp/>the<sp/>mask</highlight></codeline>
<codeline lineno="2379"><highlight class="comment"><sp/>*<sp/>does<sp/>not<sp/>document<sp/>support<sp/>of<sp/>any<sp/>of<sp/>these<sp/>hash<sp/>functions,<sp/>then<sp/>this</highlight></codeline>
<codeline lineno="2380"><highlight class="comment"><sp/>*<sp/>functions<sp/>returns<sp/>0.</highlight></codeline>
<codeline lineno="2381"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>br_ssl_choose_hash(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bf);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2387"><highlight class="comment"><sp/>*<sp/>PowerPC<sp/>/<sp/>POWER<sp/>assembly<sp/>stuff.<sp/>The<sp/>special<sp/>BR_POWER_ASM_MACROS<sp/>macro</highlight></codeline>
<codeline lineno="2388"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>defined<sp/>before<sp/>including<sp/>this<sp/>file;<sp/>this<sp/>is<sp/>done<sp/>by<sp/>source</highlight></codeline>
<codeline lineno="2389"><highlight class="comment"><sp/>*<sp/>files<sp/>that<sp/>use<sp/>some<sp/>inline<sp/>assembly<sp/>for<sp/>PowerPC<sp/>/<sp/>POWER<sp/>machines.</highlight></codeline>
<codeline lineno="2390"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_POWER_ASM_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>lxvw4x(xt,<sp/>ra,<sp/>rb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lxvw4x_(xt,<sp/>ra,<sp/>rb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stxvw4x(xt,<sp/>ra,<sp/>rb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stxvw4x_(xt,<sp/>ra,<sp/>rb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bdnz(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdnz_(foo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bdz(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdz_(foo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>beq(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beq_(foo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>li(rx,<sp/>value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>li_(rx,<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>addi(rx,<sp/>ra,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addi_(rx,<sp/>ra,<sp/>imm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmpldi(rx,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmpldi_(rx,<sp/>imm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mtctr(rx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtctr_(rx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltb(vrt,<sp/>vrb,<sp/>uim)<sp/><sp/><sp/><sp/><sp/>vspltb_(vrt,<sp/>vrb,<sp/>uim)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltw(vrt,<sp/>vrb,<sp/>uim)<sp/><sp/><sp/><sp/><sp/>vspltw_(vrt,<sp/>vrb,<sp/>uim)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltisb(vrt,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vspltisb_(vrt,<sp/>imm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltisw(vrt,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vspltisw_(vrt,<sp/>imm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vrlw(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vrlw_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsbox(vrt,<sp/>vra)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsbox_(vrt,<sp/>vra)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vxor(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vxor_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vand(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vand_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsro(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsro_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsl(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsl_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsldoi(vt,<sp/>va,<sp/>vb,<sp/>sh)<sp/><sp/><sp/><sp/>vsldoi_(vt,<sp/>va,<sp/>vb,<sp/>sh)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsr(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsr_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vaddcuw(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/>vaddcuw_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vadduwm(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/>vadduwm_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsububm(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/>vsububm_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsubuwm(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/>vsubuwm_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsrw(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsrw_(vrt,<sp/>vra,<sp/>vrb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vcipher(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vcipher_(vt,<sp/>va,<sp/>vb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vcipherlast(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/>vcipherlast_(vt,<sp/>va,<sp/>vb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vncipher(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/><sp/><sp/><sp/>vncipher_(vt,<sp/>va,<sp/>vb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vncipherlast(vt,<sp/>va,<sp/>vb)<sp/><sp/>vncipherlast_(vt,<sp/>va,<sp/>vb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vperm(vt,<sp/>va,<sp/>vb,<sp/>vc)<sp/><sp/><sp/><sp/><sp/>vperm_(vt,<sp/>va,<sp/>vb,<sp/>vc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vpmsumd(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vpmsumd_(vt,<sp/>va,<sp/>vb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xxpermdi(vt,<sp/>va,<sp/>vb,<sp/>d)<sp/><sp/><sp/>xxpermdi_(vt,<sp/>va,<sp/>vb,<sp/>d)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>lxvw4x_(xt,<sp/>ra,<sp/>rb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tlxvw4x\t&quot;<sp/>#xt<sp/>&quot;,&quot;<sp/>#ra<sp/>&quot;,&quot;<sp/>#rb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stxvw4x_(xt,<sp/>ra,<sp/>rb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tstxvw4x\t&quot;<sp/>#xt<sp/>&quot;,&quot;<sp/>#ra<sp/>&quot;,&quot;<sp/>#rb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>label(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#foo<sp/>&quot;%=:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bdnz_(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tbdnz\t&quot;<sp/>#foo<sp/>&quot;%=\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bdz_(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tbdz\t&quot;<sp/>#foo<sp/>&quot;%=\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>beq_(foo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tbeq\t&quot;<sp/>#foo<sp/>&quot;%=\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>li_(rx,<sp/>value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tli\t&quot;<sp/>#rx<sp/>&quot;,&quot;<sp/>#value<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>addi_(rx,<sp/>ra,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\taddi\t&quot;<sp/>#rx<sp/>&quot;,&quot;<sp/>#ra<sp/>&quot;,&quot;<sp/>#imm<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cmpldi_(rx,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tcmpldi\t&quot;<sp/>#rx<sp/>&quot;,&quot;<sp/>#imm<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mtctr_(rx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tmtctr\t&quot;<sp/>#rx<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltb_(vrt,<sp/>vrb,<sp/>uim)<sp/><sp/><sp/><sp/>&quot;\tvspltb\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;,&quot;<sp/>#uim<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltw_(vrt,<sp/>vrb,<sp/>uim)<sp/><sp/><sp/><sp/>&quot;\tvspltw\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;,&quot;<sp/>#uim<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltisb_(vrt,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvspltisb\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#imm<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vspltisw_(vrt,<sp/>imm)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvspltisw\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#imm<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vrlw_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvrlw\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsbox_(vrt,<sp/>vra)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvsbox\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vxor_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvxor\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vand_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvand\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsro_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvsro\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsl_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvsl\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsldoi_(vt,<sp/>va,<sp/>vb,<sp/>sh)<sp/><sp/><sp/>&quot;\tvsldoi\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;,&quot;<sp/>#sh<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsr_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvsr\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vaddcuw_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/>&quot;\tvaddcuw\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vadduwm_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/>&quot;\tvadduwm\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsububm_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/>&quot;\tvsububm\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsubuwm_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/>&quot;\tvsubuwm\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vsrw_(vrt,<sp/>vra,<sp/>vrb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvsrw\t&quot;<sp/>#vrt<sp/>&quot;,&quot;<sp/>#vra<sp/>&quot;,&quot;<sp/>#vrb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vcipher_(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvcipher\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vcipherlast_(vt,<sp/>va,<sp/>vb)<sp/><sp/>&quot;\tvcipherlast\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vncipher_(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/><sp/><sp/>&quot;\tvncipher\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vncipherlast_(vt,<sp/>va,<sp/>vb)<sp/>&quot;\tvncipherlast\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vperm_(vt,<sp/>va,<sp/>vb,<sp/>vc)<sp/><sp/><sp/><sp/>&quot;\tvperm\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;,&quot;<sp/>#vc<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vpmsumd_(vt,<sp/>va,<sp/>vb)<sp/><sp/><sp/><sp/><sp/><sp/>&quot;\tvpmsumd\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xxpermdi_(vt,<sp/>va,<sp/>vb,<sp/>d)<sp/><sp/>&quot;\txxpermdi\t&quot;<sp/>#vt<sp/>&quot;,&quot;<sp/>#va<sp/>&quot;,&quot;<sp/>#vb<sp/>&quot;,&quot;<sp/>#d<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2471"><highlight class="comment"><sp/>*<sp/>Special<sp/>&quot;activate<sp/>intrinsics&quot;<sp/>code,<sp/>needed<sp/>for<sp/>some<sp/>compiler<sp/>versions.</highlight></codeline>
<codeline lineno="2472"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>defined<sp/>at<sp/>the<sp/>end<sp/>of<sp/>this<sp/>file,<sp/>so<sp/>that<sp/>it<sp/>won&apos;t<sp/>impact<sp/>any</highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>inline<sp/>functions<sp/>defined<sp/>previously;<sp/>and<sp/>it<sp/>is<sp/>controlled<sp/>by</highlight></codeline>
<codeline lineno="2474"><highlight class="comment"><sp/>*<sp/>a<sp/>specific<sp/>macro<sp/>defined<sp/>in<sp/>the<sp/>caller<sp/>code.</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2476"><highlight class="comment"><sp/>*<sp/>Calling<sp/>code<sp/>conventions:</highlight></codeline>
<codeline lineno="2477"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2478"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Caller<sp/>must<sp/>define<sp/>BR_ENABLE_INTRINSICS<sp/>before<sp/>including<sp/>&quot;inner.h&quot;.</highlight></codeline>
<codeline lineno="2479"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Functions<sp/>that<sp/>use<sp/>intrinsics<sp/>must<sp/>be<sp/>enclosed<sp/>in<sp/>an<sp/>&quot;enabled&quot;</highlight></codeline>
<codeline lineno="2480"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>region<sp/>(between<sp/>BR_TARGETS_X86_UP<sp/>and<sp/>BR_TARGETS_X86_DOWN).</highlight></codeline>
<codeline lineno="2481"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Functions<sp/>that<sp/>use<sp/>intrinsics<sp/>must<sp/>be<sp/>tagged<sp/>with<sp/>the<sp/>appropriate</highlight></codeline>
<codeline lineno="2482"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>BR_TARGET().</highlight></codeline>
<codeline lineno="2483"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_ENABLE_INTRINSICS<sp/>&amp;&amp;<sp/>(BR_GCC_4_4<sp/>||<sp/>BR_CLANG_3_7<sp/>||<sp/>BR_MSC_2005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/>*<sp/>x86<sp/>intrinsics<sp/>(both<sp/>32-bit<sp/>and<sp/>64-bit).</highlight></codeline>
<codeline lineno="2489"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_i386<sp/>||<sp/>BR_amd64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2493"><highlight class="comment"><sp/>*<sp/>On<sp/>GCC<sp/>before<sp/>version<sp/>5.0,<sp/>we<sp/>need<sp/>to<sp/>use<sp/>the<sp/>pragma<sp/>to<sp/>enable<sp/>the</highlight></codeline>
<codeline lineno="2494"><highlight class="comment"><sp/>*<sp/>target<sp/>options<sp/>globally,<sp/>because<sp/>the<sp/>&apos;target&apos;<sp/>function<sp/>attribute</highlight></codeline>
<codeline lineno="2495"><highlight class="comment"><sp/>*<sp/>appears<sp/>to<sp/>be<sp/>unreliable.<sp/>Before<sp/>4.6<sp/>we<sp/>must<sp/>also<sp/>avoid<sp/>the</highlight></codeline>
<codeline lineno="2496"><highlight class="comment"><sp/>*<sp/>push_options<sp/>/<sp/>pop_options<sp/>mechanism,<sp/>because<sp/>it<sp/>tends<sp/>to<sp/>trigger</highlight></codeline>
<codeline lineno="2497"><highlight class="comment"><sp/>*<sp/>some<sp/>internal<sp/>compiler<sp/>errors.</highlight></codeline>
<codeline lineno="2498"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC<sp/>&amp;&amp;<sp/>!BR_GCC_5_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC_4_6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGETS_X86_UP<sp/>\</highlight></codeline>
<codeline lineno="2502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma(&quot;GCC<sp/>push_options&quot;)<sp/>\</highlight></codeline>
<codeline lineno="2503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma(&quot;GCC<sp/>target(\&quot;sse2,ssse3,sse4.1,aes,pclmul,rdrnd\&quot;)&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGETS_X86_DOWN<sp/>\</highlight></codeline>
<codeline lineno="2505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma(&quot;GCC<sp/>pop_options&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGETS_X86_UP<sp/>\</highlight></codeline>
<codeline lineno="2508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Pragma(&quot;GCC<sp/>target(\&quot;sse2,ssse3,sse4.1,aes,pclmul\&quot;)&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGETS_X86_DOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpsabi&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_CLANG<sp/>&amp;&amp;<sp/>!BR_CLANG_3_8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__SSE2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__SSE3__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__SSSE3__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__SSE4_1__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__AES__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__PCLMUL__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__RDRND__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSE2__<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSE3__<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSSE3__<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSE4_1__<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__AES__<sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PCLMUL__<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__RDRND__<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_TARGETS_X86_UP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGETS_X86_UP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_TARGETS_X86_DOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_TARGETS_X86_DOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC<sp/>||<sp/>BR_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal">BR_TARGETS_X86_UP</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;x86intrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cpuid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_bswap32<sp/><sp/><sp/>__builtin_bswap32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal">BR_TARGETS_X86_DOWN</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_MSC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;immintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_bswap32<sp/><sp/><sp/>_byteswap_ulong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal">br_cpuid(uint32_t<sp/>mask_eax,<sp/>uint32_t<sp/>mask_ebx,</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask_ecx,<sp/>uint32_t<sp/>mask_edx)</highlight></codeline>
<codeline lineno="2556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_GCC<sp/>||<sp/>BR_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>eax,<sp/>ebx,<sp/>ecx,<sp/>edx;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__get_cpuid(1,<sp/>&amp;eax,<sp/>&amp;ebx,<sp/>&amp;ecx,<sp/>&amp;edx))<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((eax<sp/>&amp;<sp/>mask_eax)<sp/>==<sp/>mask_eax</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(ebx<sp/>&amp;<sp/>mask_ebx)<sp/>==<sp/>mask_ebx</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(ecx<sp/>&amp;<sp/>mask_ecx)<sp/>==<sp/>mask_ecx</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(edx<sp/>&amp;<sp/>mask_edx)<sp/>==<sp/>mask_edx)</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>BR_MSC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>info[4];</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>__cpuid(info,<sp/>1);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((uint32_t)info[0]<sp/>&amp;<sp/>mask_eax)<sp/>==<sp/>mask_eax</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((uint32_t)info[1]<sp/>&amp;<sp/>mask_ebx)<sp/>==<sp/>mask_ebx</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((uint32_t)info[2]<sp/>&amp;<sp/>mask_ecx)<sp/>==<sp/>mask_ecx</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((uint32_t)info[3]<sp/>&amp;<sp/>mask_edx)<sp/>==<sp/>mask_edx)</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/docs/lib/bearssl/inner.h"/>
  </compounddef>
</doxygen>
