<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bearssl__block_8h" kind="file" language="C++">
    <compoundname>bearssl_block.h</compoundname>
    <includes refid="stddef_8h" local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includedby refid="bearssl__rand_8h" local="yes">/docs/lib/bearssl/bearssl_rand.h</includedby>
    <incdepgraph>
      <node id="744">
        <label>stddef.h</label>
        <link refid="stddef_8h_source"/>
        <childnode refid="745" relation="include">
        </childnode>
      </node>
      <node id="747">
        <label>stdint_.h</label>
      </node>
      <node id="745">
        <label>stddef_.h</label>
      </node>
      <node id="746">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="747" relation="include">
        </childnode>
      </node>
      <node id="743">
        <label>/docs/lib/bearssl/bearssl_block.h</label>
        <link refid="bearssl__block_8h"/>
        <childnode refid="744" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="749">
        <label>/docs/lib/bearssl/bearssl_rand.h</label>
        <link refid="bearssl__rand_8h"/>
        <childnode refid="750" relation="include">
        </childnode>
      </node>
      <node id="751">
        <label>/docs/lib/bearssl/bearssl_x509.h</label>
        <link refid="bearssl__x509_8h"/>
      </node>
      <node id="750">
        <label>/docs/lib/bearssl/bearssl_ec.h</label>
        <link refid="bearssl__ec_8h"/>
        <childnode refid="751" relation="include">
        </childnode>
      </node>
      <node id="748">
        <label>/docs/lib/bearssl/bearssl_block.h</label>
        <link refid="bearssl__block_8h"/>
        <childnode refid="749" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structbr__block__cbcenc__class__" prot="public">br_block_cbcenc_class_</innerclass>
    <innerclass refid="structbr__block__cbcdec__class__" prot="public">br_block_cbcdec_class_</innerclass>
    <innerclass refid="structbr__block__ctr__class__" prot="public">br_block_ctr_class_</innerclass>
    <innerclass refid="structbr__block__ctrcbc__class__" prot="public">br_block_ctrcbc_class_</innerclass>
    <innerclass refid="structbr__aes__big__cbcenc__keys" prot="public">br_aes_big_cbcenc_keys</innerclass>
    <innerclass refid="structbr__aes__big__cbcdec__keys" prot="public">br_aes_big_cbcdec_keys</innerclass>
    <innerclass refid="structbr__aes__big__ctr__keys" prot="public">br_aes_big_ctr_keys</innerclass>
    <innerclass refid="structbr__aes__big__ctrcbc__keys" prot="public">br_aes_big_ctrcbc_keys</innerclass>
    <innerclass refid="structbr__aes__small__cbcenc__keys" prot="public">br_aes_small_cbcenc_keys</innerclass>
    <innerclass refid="structbr__aes__small__cbcdec__keys" prot="public">br_aes_small_cbcdec_keys</innerclass>
    <innerclass refid="structbr__aes__small__ctr__keys" prot="public">br_aes_small_ctr_keys</innerclass>
    <innerclass refid="structbr__aes__small__ctrcbc__keys" prot="public">br_aes_small_ctrcbc_keys</innerclass>
    <innerclass refid="structbr__aes__ct__cbcenc__keys" prot="public">br_aes_ct_cbcenc_keys</innerclass>
    <innerclass refid="structbr__aes__ct__cbcdec__keys" prot="public">br_aes_ct_cbcdec_keys</innerclass>
    <innerclass refid="structbr__aes__ct__ctr__keys" prot="public">br_aes_ct_ctr_keys</innerclass>
    <innerclass refid="structbr__aes__ct__ctrcbc__keys" prot="public">br_aes_ct_ctrcbc_keys</innerclass>
    <innerclass refid="structbr__aes__ct64__cbcenc__keys" prot="public">br_aes_ct64_cbcenc_keys</innerclass>
    <innerclass refid="structbr__aes__ct64__cbcdec__keys" prot="public">br_aes_ct64_cbcdec_keys</innerclass>
    <innerclass refid="structbr__aes__ct64__ctr__keys" prot="public">br_aes_ct64_ctr_keys</innerclass>
    <innerclass refid="structbr__aes__ct64__ctrcbc__keys" prot="public">br_aes_ct64_ctrcbc_keys</innerclass>
    <innerclass refid="structbr__aes__x86ni__cbcenc__keys" prot="public">br_aes_x86ni_cbcenc_keys</innerclass>
    <innerclass refid="structbr__aes__x86ni__cbcdec__keys" prot="public">br_aes_x86ni_cbcdec_keys</innerclass>
    <innerclass refid="structbr__aes__x86ni__ctr__keys" prot="public">br_aes_x86ni_ctr_keys</innerclass>
    <innerclass refid="structbr__aes__x86ni__ctrcbc__keys" prot="public">br_aes_x86ni_ctrcbc_keys</innerclass>
    <innerclass refid="structbr__aes__pwr8__cbcenc__keys" prot="public">br_aes_pwr8_cbcenc_keys</innerclass>
    <innerclass refid="structbr__aes__pwr8__cbcdec__keys" prot="public">br_aes_pwr8_cbcdec_keys</innerclass>
    <innerclass refid="structbr__aes__pwr8__ctr__keys" prot="public">br_aes_pwr8_ctr_keys</innerclass>
    <innerclass refid="structbr__aes__pwr8__ctrcbc__keys" prot="public">br_aes_pwr8_ctrcbc_keys</innerclass>
    <innerclass refid="unionbr__aes__gen__cbcenc__keys" prot="public">br_aes_gen_cbcenc_keys</innerclass>
    <innerclass refid="unionbr__aes__gen__cbcdec__keys" prot="public">br_aes_gen_cbcdec_keys</innerclass>
    <innerclass refid="unionbr__aes__gen__ctr__keys" prot="public">br_aes_gen_ctr_keys</innerclass>
    <innerclass refid="unionbr__aes__gen__ctrcbc__keys" prot="public">br_aes_gen_ctrcbc_keys</innerclass>
    <innerclass refid="structbr__des__tab__cbcenc__keys" prot="public">br_des_tab_cbcenc_keys</innerclass>
    <innerclass refid="structbr__des__tab__cbcdec__keys" prot="public">br_des_tab_cbcdec_keys</innerclass>
    <innerclass refid="structbr__des__ct__cbcenc__keys" prot="public">br_des_ct_cbcenc_keys</innerclass>
    <innerclass refid="structbr__des__ct__cbcdec__keys" prot="public">br_des_ct_cbcdec_keys</innerclass>
    <innerclass refid="unionbr__des__gen__cbcenc__keys" prot="public">br_des_gen_cbcenc_keys</innerclass>
    <innerclass refid="unionbr__des__gen__cbcdec__keys" prot="public">br_des_gen_cbcdec_keys</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bearssl__block_8h_1a6e75e0a00f9700fbeedce5f56175675c" prot="public" static="no">
        <name>br_aes_big_BLOCK_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES block size (16 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="701" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a2433ce03d9cdadb060f2a91a826bdcd5" prot="public" static="no">
        <name>br_aes_small_BLOCK_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES block size (16 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="921" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a6a55ba4c0598ab5fa978a4bc8b6c6ebc" prot="public" static="no">
        <name>br_aes_ct_BLOCK_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES block size (16 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1140" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="1140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a0fbffe218c8483b5ad9071f13a5d951d" prot="public" static="no">
        <name>br_aes_ct64_BLOCK_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES block size (16 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1361" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="1361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a0130f54fcf81a7beb535dc3b9c102467" prot="public" static="no">
        <name>br_aes_x86ni_BLOCK_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES block size (16 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1577" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="1577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a03200129c18f31aa6c779e946b5b1d0a" prot="public" static="no">
        <name>br_aes_pwr8_BLOCK_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES block size (16 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1868" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="1868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a90d145f2bf09be81a7e08661d897fe86" prot="public" static="no">
        <name>br_des_tab_BLOCK_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
<para>DES/3DES block size (8 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2216" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="2216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__block_8h_1a6efec390f30746dd8f7c0b22cf9bc572" prot="public" static="no">
        <name>br_des_ct_BLOCK_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
<para>DES/3DES block size (8 bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2308" column="9" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="2308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" prot="public" static="no">
        <type>struct <ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class_</ref></type>
        <definition>typedef struct br_block_cbcenc_class_ br_block_cbcenc_class</definition>
        <argsstring></argsstring>
        <name>br_block_cbcenc_class</name>
        <briefdescription>
<para>Class type for CBC encryption implementations. </para>        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>br_block_cbcenc_class</computeroutput> instance points to the functions implementing a specific block cipher, when used in CBC mode for encrypting data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1" column="1" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" prot="public" static="no">
        <type>struct <ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class_</ref></type>
        <definition>typedef struct br_block_cbcdec_class_ br_block_cbcdec_class</definition>
        <argsstring></argsstring>
        <name>br_block_cbcdec_class</name>
        <briefdescription>
<para>Class type for CBC decryption implementations. </para>        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>br_block_cbcdec_class</computeroutput> instance points to the functions implementing a specific block cipher, when used in CBC mode for decrypting data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1" column="1" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" prot="public" static="no">
        <type>struct <ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class_</ref></type>
        <definition>typedef struct br_block_ctr_class_ br_block_ctr_class</definition>
        <argsstring></argsstring>
        <name>br_block_ctr_class</name>
        <briefdescription>
<para>Class type for CTR encryption/decryption implementations. </para>        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>br_block_ctr_class</computeroutput> instance points to the functions implementing a specific block cipher, when used in CTR mode for encrypting or decrypting data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1" column="1" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" prot="public" static="no">
        <type>struct <ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class_</ref></type>
        <definition>typedef struct br_block_ctrcbc_class_ br_block_ctrcbc_class</definition>
        <argsstring></argsstring>
        <name>br_block_ctrcbc_class</name>
        <briefdescription>
<para>Class type for combined CTR and CBC-MAC implementations. </para>        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>br_block_ctrcbc_class</computeroutput> instance points to the functions implementing a specific block cipher, when used in CTR mode for encrypting or decrypting data, along with CBC-MAC. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1" column="1" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_chacha20_run) (const void *key, const void *iv, uint32_t cc, void *data, size_t len)</definition>
        <argsstring>)(const void *key, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_chacha20_run</name>
        <briefdescription>
<para>Type for a ChaCha20 implementation. </para>        </briefdescription>
        <detaileddescription>
<para>An implementation follows the description in RFC 7539:</para><para><itemizedlist>
<listitem><para>Key is 256 bits (<computeroutput>key</computeroutput> points to exactly 32 bytes).</para></listitem><listitem><para>IV is 96 bits (<computeroutput>iv</computeroutput> points to exactly 12 bytes).</para></listitem><listitem><para>Block counter is over 32 bits and starts at value <computeroutput>cc</computeroutput>; the resulting value is returned.</para></listitem></itemizedlist>
</para><para>Data (pointed to by <computeroutput>data</computeroutput>, of length <computeroutput>len</computeroutput>) is encrypted/decrypted in place. If <computeroutput>len</computeroutput> is not a multiple of 64, then the excess bytes from the last block processing are dropped (therefore, &quot;chunked&quot; processing works only as long as each non-final chunk has a length multiple of 64).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2442" column="1" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="2442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* br_poly1305_run) (const void *key, const void *iv, void *data, size_t len, const void *aad, size_t aad_len, void *tag, br_chacha20_run ichacha, int encrypt)</definition>
        <argsstring>)(const void *key, const void *iv, void *data, size_t len, const void *aad, size_t aad_len, void *tag, br_chacha20_run ichacha, int encrypt)</argsstring>
        <name>br_poly1305_run</name>
        <briefdescription>
<para>Type for a ChaCha20+Poly1305 AEAD implementation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided data is encrypted or decrypted with ChaCha20. The authentication tag is computed on the concatenation of the additional data and the ciphertext, with the padding and lengths as described in RFC 7539 (section 2.8).</para><para>After decryption, the caller is responsible for checking that the computed tag matches the expected value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>nonce (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional authenticated data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of additional authenticated data (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the authentication tag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ichacha</parametername>
</parameternamelist>
<parameterdescription>
<para>implementation of ChaCha20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypt</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero for encryption, zero for decryption. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2513" column="1" bodyfile="/docs/lib/bearssl/bearssl_block.h" bodystart="2513" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bearssl__block_8h_1a05ae059c515f55a4508b0c980c5ec301" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_aes_big_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_big_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC encryption (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="768" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a7aa261c1559cf94a8cfc2afce397cccf" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_aes_big_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_big_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC decryption (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="773" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1ab91b0663757051a6753601260107aee6" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref></type>
        <definition>const br_block_ctr_class br_aes_big_ctr_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_big_ctr_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption and decryption (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="779" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1ab1a208e01460541dec24fa47c3920207" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref></type>
        <definition>const br_block_ctrcbc_class br_aes_big_ctrcbc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_big_ctrcbc_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption/decryption + CBC-MAC (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="785" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1ad2a06e9809ac94ecd91770d4a8dd5ba4" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_aes_small_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_small_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC encryption (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="988" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a6e05a53f7af7dd47d147e8c789a87075" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_aes_small_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_small_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC decryption (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="993" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1aeeadbf2d27178f1430006d676f748314" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref></type>
        <definition>const br_block_ctr_class br_aes_small_ctr_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_small_ctr_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption and decryption (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="999" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a4c2563e79e82b2f744e7cced4856054b" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref></type>
        <definition>const br_block_ctrcbc_class br_aes_small_ctrcbc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_small_ctrcbc_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption/decryption + CBC-MAC (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1005" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a080d532a4c93d02baf8c1361f1ac4cbc" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_aes_ct_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC encryption (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1207" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a9ffdf18afde3f09601bab834c8c59caa" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_aes_ct_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC decryption (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1212" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1af11aa0427f2fb4266bf07faaf89f1513" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref></type>
        <definition>const br_block_ctr_class br_aes_ct_ctr_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct_ctr_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption and decryption (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1218" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1aa4ecb7983757a746baede2bbdb38a66d" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref></type>
        <definition>const br_block_ctrcbc_class br_aes_ct_ctrcbc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct_ctrcbc_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption/decryption + CBC-MAC (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1224" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a5ee7275811d1faf971fb8642561dd911" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_aes_ct64_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct64_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC encryption (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1428" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1aba1575077a300a48dc95b468ef71adf9" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_aes_ct64_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct64_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC decryption (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1433" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1ad3a4453eeee0bc2ab6bc4c19cae40539" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref></type>
        <definition>const br_block_ctr_class br_aes_ct64_ctr_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct64_ctr_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption and decryption (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1439" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a6d6a212efa86ac79c104d4a4193a917e" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref></type>
        <definition>const br_block_ctrcbc_class br_aes_ct64_ctrcbc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_ct64_ctrcbc_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption/decryption + CBC-MAC (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1445" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a1c329f355710948b807dd0bfa1dbf5fb" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_aes_x86ni_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_x86ni_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC encryption (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1ac37a6d32944f51607bd5e487e0b6c6f7" kindref="member">br_aes_x86ni_cbcenc_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1656" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a6b7037eab477c93536ab2bb02f2987ad" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_aes_x86ni_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_x86ni_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC decryption (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1acdd5f10c9f78c11a40634fb3129b213e" kindref="member">br_aes_x86ni_cbcdec_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1665" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a9ac8b2b06d07aa31e2aa1db069ae0c78" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref></type>
        <definition>const br_block_ctr_class br_aes_x86ni_ctr_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_x86ni_ctr_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption and decryption (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1add02e1f27c1cd0c717cb0a0a24ad97da" kindref="member">br_aes_x86ni_ctr_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1675" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1afb6f9443770928720a70b152dec7752e" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref></type>
        <definition>const br_block_ctrcbc_class br_aes_x86ni_ctrcbc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_x86ni_ctrcbc_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption/decryption + CBC-MAC (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1a7ee868404f10f73c5fffb36185a3bc8d" kindref="member">br_aes_x86ni_ctrcbc_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1685" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a38c535fd8af3b8339503c171d9d3fdf5" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_aes_pwr8_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_pwr8_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC encryption (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1a26aec06f12b9bb2ea16b3b0e2493c38a" kindref="member">br_aes_pwr8_cbcenc_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1947" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1aa729209611025ece626a341722d5affb" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_aes_pwr8_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_pwr8_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for AES CBC decryption (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1a2b0c52b9b1233ef05b2ce62b45039dc1" kindref="member">br_aes_pwr8_cbcdec_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1956" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1ab36c022212741b3cbdca7859bcd80d94" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref></type>
        <definition>const br_block_ctr_class br_aes_pwr8_ctr_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_pwr8_ctr_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption and decryption (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1aa12292c2a6224134f0dd099665342616" kindref="member">br_aes_pwr8_ctr_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1966" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a81bd16de3deb250e17da07560590883c" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref></type>
        <definition>const br_block_ctrcbc_class br_aes_pwr8_ctrcbc_vtable</definition>
        <argsstring></argsstring>
        <name>br_aes_pwr8_ctrcbc_vtable</name>
        <briefdescription>
<para>Class instance for AES CTR encryption/decryption + CBC-MAC (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para>Since this implementation might be omitted from the library, or the AES opcode unavailable on the current CPU, a pointer to this class instance should be obtained through <computeroutput><ref refid="bearssl__block_8h_1a74a080a5a1fda0fcf4c7935ef81fccee" kindref="member">br_aes_pwr8_ctrcbc_get_vtable()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1976" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1aaec37d14d412cd0f4062030f443298af" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_des_tab_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_des_tab_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for DES CBC encryption (<computeroutput>des_tab</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2251" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1aa0746f9c5da939de4061e7fa959fd764" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_des_tab_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_des_tab_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for DES CBC decryption (<computeroutput>des_tab</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2256" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a446dfc065b94fb18994038ec0f8bdd79" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref></type>
        <definition>const br_block_cbcenc_class br_des_ct_cbcenc_vtable</definition>
        <argsstring></argsstring>
        <name>br_des_ct_cbcenc_vtable</name>
        <briefdescription>
<para>Class instance for DES CBC encryption (<computeroutput>des_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2343" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__block_8h_1a5b93bd2bfe8e517bcc0d96b8dbcecfca" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref></type>
        <definition>const br_block_cbcdec_class br_des_ct_cbcdec_vtable</definition>
        <argsstring></argsstring>
        <name>br_des_ct_cbcdec_vtable</name>
        <briefdescription>
<para>Class instance for DES CBC decryption (<computeroutput>des_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2348" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bearssl__block_8h_1a6e01bc2638042cd630879e68aed21132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_cbcenc_init</definition>
        <argsstring>(br_aes_big_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_big_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__aes__big__cbcenc__keys" kindref="compound">br_aes_big_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC encryption (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a9969f33445b4f28d6ea9a8d353e6abfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_cbcdec_init</definition>
        <argsstring>(br_aes_big_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_big_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__aes__big__cbcdec__keys" kindref="compound">br_aes_big_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC decryption (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a423989bf3cd8262564f05d3a742e5a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_ctr_init</definition>
        <argsstring>(br_aes_big_ctr_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_big_ctr_init</name>
        <param>
          <type><ref refid="structbr__aes__big__ctr__keys" kindref="compound">br_aes_big_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR encryption and decryption (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a222e01a3b06fef6720dbff9499e1c799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_ctrcbc_init</definition>
        <argsstring>(br_aes_big_ctrcbc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_big_ctrcbc_init</name>
        <param>
          <type><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR + CBC-MAC (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ab088b057d1cd23de47b6b139dcbaf0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_cbcenc_run</definition>
        <argsstring>(const br_aes_big_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_big_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__aes__big__cbcenc__keys" kindref="compound">br_aes_big_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1acd1212f8247b8e40f8ec0c552e1dfa85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_cbcdec_run</definition>
        <argsstring>(const br_aes_big_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_big_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__aes__big__cbcdec__keys" kindref="compound">br_aes_big_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="850" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aec4ebbe578a75ad935f721302bbc0446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_aes_big_ctr_run</definition>
        <argsstring>(const br_aes_big_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_aes_big_ctr_run</name>
        <param>
          <type>const <ref refid="structbr__aes__big__ctr__keys" kindref="compound">br_aes_big_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption and decryption with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (constant, 12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial block counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new block counter value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="863" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aba889713d106504bb4afbfabf6172eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_ctrcbc_encrypt</definition>
        <argsstring>(const br_aes_big_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_big_ctrcbc_encrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption + CBC-MAC with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="875" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a560129008eefeea111e90d0b16ccda43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_ctrcbc_decrypt</definition>
        <argsstring>(const br_aes_big_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_big_ctrcbc_decrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR decryption + CBC-MAC with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="887" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ab87fb795e0e0d7b47ff346e701d76a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_ctrcbc_ctr</definition>
        <argsstring>(const br_aes_big_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</argsstring>
        <name>br_aes_big_ctrcbc_ctr</name>
        <param>
          <type>const <ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption/decryption with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="898" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a20f7c053c17b73f9790c945c2dfb738f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_big_ctrcbc_mac</definition>
        <argsstring>(const br_aes_big_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</argsstring>
        <name>br_aes_big_ctrcbc_mac</name>
        <param>
          <type>const <ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC-MAC with AES (<computeroutput>aes_big</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (unmodified). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ab73e5321d7dce925a47694c6dde75b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_cbcenc_init</definition>
        <argsstring>(br_aes_small_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_small_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__aes__small__cbcenc__keys" kindref="compound">br_aes_small_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC encryption (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a309069429204e4d27d0e7aabfe778d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_cbcdec_init</definition>
        <argsstring>(br_aes_small_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_small_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__aes__small__cbcdec__keys" kindref="compound">br_aes_small_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC decryption (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1026" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a2d4c40d02bf483cc00b3ab96ddf95fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_ctr_init</definition>
        <argsstring>(br_aes_small_ctr_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_small_ctr_init</name>
        <param>
          <type><ref refid="structbr__aes__small__ctr__keys" kindref="compound">br_aes_small_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR encryption and decryption (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1037" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ac2d348db1c60389805d6604f25f00076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_ctrcbc_init</definition>
        <argsstring>(br_aes_small_ctrcbc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_small_ctrcbc_init</name>
        <param>
          <type><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR + CBC-MAC (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1af4dd0010c199073f5346e462f28aedc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_cbcenc_run</definition>
        <argsstring>(const br_aes_small_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_small_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__aes__small__cbcenc__keys" kindref="compound">br_aes_small_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1059" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ae0696942765d8b7fde6ccf9dd1be7aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_cbcdec_run</definition>
        <argsstring>(const br_aes_small_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_small_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__aes__small__cbcdec__keys" kindref="compound">br_aes_small_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1070" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a350606cdbf850b0d651af223413a1dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_aes_small_ctr_run</definition>
        <argsstring>(const br_aes_small_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_aes_small_ctr_run</name>
        <param>
          <type>const <ref refid="structbr__aes__small__ctr__keys" kindref="compound">br_aes_small_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption and decryption with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (constant, 12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial block counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new block counter value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1083" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a8f7ac95fe29ab1e04f95fd1d167953b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_ctrcbc_encrypt</definition>
        <argsstring>(const br_aes_small_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_small_ctrcbc_encrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption + CBC-MAC with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1095" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a919b50392b820f08de42361d92abd4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_ctrcbc_decrypt</definition>
        <argsstring>(const br_aes_small_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_small_ctrcbc_decrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR decryption + CBC-MAC with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a7f07c87b34361949a134c75f8dea2b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_ctrcbc_ctr</definition>
        <argsstring>(const br_aes_small_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</argsstring>
        <name>br_aes_small_ctrcbc_ctr</name>
        <param>
          <type>const <ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption/decryption with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aca1912b2b093bd02763b0628d982b598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_small_ctrcbc_mac</definition>
        <argsstring>(const br_aes_small_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</argsstring>
        <name>br_aes_small_ctrcbc_mac</name>
        <param>
          <type>const <ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC-MAC with AES (<computeroutput>aes_small</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (unmodified). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a4214e13e76eecc08c694b58941354f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_cbcenc_init</definition>
        <argsstring>(br_aes_ct_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__aes__ct__cbcenc__keys" kindref="compound">br_aes_ct_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC encryption (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a34c4384aeca3ff0a13ae720947ea3804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_cbcdec_init</definition>
        <argsstring>(br_aes_ct_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__aes__ct__cbcdec__keys" kindref="compound">br_aes_ct_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC decryption (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a6c8e3bf4dd30d3da3a14847fc74772a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ctr_init</definition>
        <argsstring>(br_aes_ct_ctr_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct_ctr_init</name>
        <param>
          <type><ref refid="structbr__aes__ct__ctr__keys" kindref="compound">br_aes_ct_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR encryption and decryption (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a0892afbc99158cae3ec71bbdec42b57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ctrcbc_init</definition>
        <argsstring>(br_aes_ct_ctrcbc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct_ctrcbc_init</name>
        <param>
          <type><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR + CBC-MAC (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a1875a3987b328237799bb63ef084c292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_cbcenc_run</definition>
        <argsstring>(const br_aes_ct_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_ct_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__cbcenc__keys" kindref="compound">br_aes_ct_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a2b9ea6d34952ba9e714c269e81fd0c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_cbcdec_run</definition>
        <argsstring>(const br_aes_ct_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_ct_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__cbcdec__keys" kindref="compound">br_aes_ct_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ab5331257ad658cd4c4cec57e618c787a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_aes_ct_ctr_run</definition>
        <argsstring>(const br_aes_ct_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_aes_ct_ctr_run</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__ctr__keys" kindref="compound">br_aes_ct_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption and decryption with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (constant, 12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial block counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new block counter value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a24d6dd6661d63ce0ab8200a745dc020c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ctrcbc_encrypt</definition>
        <argsstring>(const br_aes_ct_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_ct_ctrcbc_encrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption + CBC-MAC with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ab76578e1289bab86929c594ca076c567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ctrcbc_decrypt</definition>
        <argsstring>(const br_aes_ct_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_ct_ctrcbc_decrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR decryption + CBC-MAC with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a33883ec6db6b5b0dd07701ef9e26c506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ctrcbc_ctr</definition>
        <argsstring>(const br_aes_ct_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</argsstring>
        <name>br_aes_ct_ctrcbc_ctr</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption/decryption with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a2e996b5e48333a021abebd1c326167f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct_ctrcbc_mac</definition>
        <argsstring>(const br_aes_ct_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</argsstring>
        <name>br_aes_ct_ctrcbc_mac</name>
        <param>
          <type>const <ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC-MAC with AES (<computeroutput>aes_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (unmodified). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1abc8f255753882d0d06be28bbbf6c6dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_cbcenc_init</definition>
        <argsstring>(br_aes_ct64_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct64_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__aes__ct64__cbcenc__keys" kindref="compound">br_aes_ct64_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC encryption (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a003343666043989ad24541af69cd3f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_cbcdec_init</definition>
        <argsstring>(br_aes_ct64_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct64_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__aes__ct64__cbcdec__keys" kindref="compound">br_aes_ct64_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC decryption (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a9033a89a15955099cf78e84eec054450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ctr_init</definition>
        <argsstring>(br_aes_ct64_ctr_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct64_ctr_init</name>
        <param>
          <type><ref refid="structbr__aes__ct64__ctr__keys" kindref="compound">br_aes_ct64_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR encryption and decryption (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a4d5cfb4ddb5599f725ecca64a51bf71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ctrcbc_init</definition>
        <argsstring>(br_aes_ct64_ctrcbc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_ct64_ctrcbc_init</name>
        <param>
          <type><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR + CBC-MAC (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1adf86d68e8e3d9f983c34cd3de12347bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_cbcenc_run</definition>
        <argsstring>(const br_aes_ct64_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_ct64_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__cbcenc__keys" kindref="compound">br_aes_ct64_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a196e9ea0afcfb4a9524a95de269cc1d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_cbcdec_run</definition>
        <argsstring>(const br_aes_ct64_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_ct64_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__cbcdec__keys" kindref="compound">br_aes_ct64_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a7328c9312369b65d32b9991fc06690a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_aes_ct64_ctr_run</definition>
        <argsstring>(const br_aes_ct64_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_aes_ct64_ctr_run</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__ctr__keys" kindref="compound">br_aes_ct64_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption and decryption with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (constant, 12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial block counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new block counter value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a586e528dcf0fe37c0ec456e481f1164c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ctrcbc_encrypt</definition>
        <argsstring>(const br_aes_ct64_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_ct64_ctrcbc_encrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption + CBC-MAC with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a4f6dc3f86d2ad17e5a93bdf911392b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ctrcbc_decrypt</definition>
        <argsstring>(const br_aes_ct64_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_ct64_ctrcbc_decrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR decryption + CBC-MAC with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a5645ab766ad91b1fc4221f279b604f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ctrcbc_ctr</definition>
        <argsstring>(const br_aes_ct64_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</argsstring>
        <name>br_aes_ct64_ctrcbc_ctr</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption/decryption with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a9fcaf02f5320a2cd90456ffdd3fde90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_ct64_ctrcbc_mac</definition>
        <argsstring>(const br_aes_ct64_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</argsstring>
        <name>br_aes_ct64_ctrcbc_mac</name>
        <param>
          <type>const <ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC-MAC with AES (<computeroutput>aes_ct64</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (unmodified). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1af29323ad864235eb6169d8d45253b6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_cbcenc_init</definition>
        <argsstring>(br_aes_x86ni_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_x86ni_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__aes__x86ni__cbcenc__keys" kindref="compound">br_aes_x86ni_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC encryption (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a5038cd0688f4459322f510449db2599b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_cbcdec_init</definition>
        <argsstring>(br_aes_x86ni_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_x86ni_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__aes__x86ni__cbcdec__keys" kindref="compound">br_aes_x86ni_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC decryption (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aa2ad5c8bfa4b8579b9cf43038a435289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_ctr_init</definition>
        <argsstring>(br_aes_x86ni_ctr_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_x86ni_ctr_init</name>
        <param>
          <type><ref refid="structbr__aes__x86ni__ctr__keys" kindref="compound">br_aes_x86ni_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR encryption and decryption (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1717" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aaac8e5ea09eeaf31eb702cc1d2f97729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_ctrcbc_init</definition>
        <argsstring>(br_aes_x86ni_ctrcbc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_x86ni_ctrcbc_init</name>
        <param>
          <type><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR + CBC-MAC (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1728" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1afaca95f366e6b712cfb50eac6b8e0bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_cbcenc_run</definition>
        <argsstring>(const br_aes_x86ni_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__cbcenc__keys" kindref="compound">br_aes_x86ni_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a3974cc0e2739961295e9d968500012a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_cbcdec_run</definition>
        <argsstring>(const br_aes_x86ni_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__cbcdec__keys" kindref="compound">br_aes_x86ni_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a8ecb68de3a9a856511d4580be0138e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_aes_x86ni_ctr_run</definition>
        <argsstring>(const br_aes_x86ni_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_ctr_run</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__ctr__keys" kindref="compound">br_aes_x86ni_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption and decryption with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (constant, 12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial block counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new block counter value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a147d6077b0764bde1e3279c8d4ca814f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_ctrcbc_encrypt</definition>
        <argsstring>(const br_aes_x86ni_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_ctrcbc_encrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption + CBC-MAC with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a0d1a6a2df667b4f4d02a44eba8e9618b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_ctrcbc_decrypt</definition>
        <argsstring>(const br_aes_x86ni_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_ctrcbc_decrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR decryption + CBC-MAC with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1787" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aeffbf2c82e84fd8bf75bec05567d8397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_ctrcbc_ctr</definition>
        <argsstring>(const br_aes_x86ni_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_ctrcbc_ctr</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption/decryption with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a83187e22aba14f774023dddd2a9be6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_x86ni_ctrcbc_mac</definition>
        <argsstring>(const br_aes_x86ni_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</argsstring>
        <name>br_aes_x86ni_ctrcbc_mac</name>
        <param>
          <type>const <ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC-MAC with AES (<computeroutput>aes_x86ni</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (unmodified). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ac37a6d32944f51607bd5e487e0b6c6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref> *</type>
        <definition>const br_block_cbcenc_class* br_aes_x86ni_cbcenc_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_x86ni_cbcenc_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_x86ni</computeroutput> AES-CBC (encryption) implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_x86ni_cbcenc_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the x86 AES opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_x86ni</computeroutput> AES-CBC (encryption) implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1acdd5f10c9f78c11a40634fb3129b213e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref> *</type>
        <definition>const br_block_cbcdec_class* br_aes_x86ni_cbcdec_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_x86ni_cbcdec_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_x86ni</computeroutput> AES-CBC (decryption) implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_x86ni_cbcdec_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the x86 AES opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_x86ni</computeroutput> AES-CBC (decryption) implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1add02e1f27c1cd0c717cb0a0a24ad97da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref> *</type>
        <definition>const br_block_ctr_class* br_aes_x86ni_ctr_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_x86ni_ctr_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_x86ni</computeroutput> AES-CTR implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_x86ni_ctr_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the x86 AES opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_x86ni</computeroutput> AES-CTR implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1848" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a7ee868404f10f73c5fffb36185a3bc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref> *</type>
        <definition>const br_block_ctrcbc_class* br_aes_x86ni_ctrcbc_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_x86ni_ctrcbc_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_x86ni</computeroutput> AES-CTR + CBC-MAC implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_x86ni_ctrcbc_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the x86 AES opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_x86ni</computeroutput> AES-CTR implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1861" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a0ff75ac5c55d3db12b04ec77662264d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_cbcenc_init</definition>
        <argsstring>(br_aes_pwr8_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_pwr8_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__aes__pwr8__cbcenc__keys" kindref="compound">br_aes_pwr8_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC encryption (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1986" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a766bde20bc89c7240f199407d8ce0f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_cbcdec_init</definition>
        <argsstring>(br_aes_pwr8_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_pwr8_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__aes__pwr8__cbcdec__keys" kindref="compound">br_aes_pwr8_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CBC decryption (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="1997" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a82c4482fe0578ffacac04c74314c4258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_ctr_init</definition>
        <argsstring>(br_aes_pwr8_ctr_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_pwr8_ctr_init</name>
        <param>
          <type><ref refid="structbr__aes__pwr8__ctr__keys" kindref="compound">br_aes_pwr8_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR encryption and decryption (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2008" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1abd7868a368cdee986c2aa5b08a7796a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_ctrcbc_init</definition>
        <argsstring>(br_aes_pwr8_ctrcbc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_aes_pwr8_ctrcbc_init</name>
        <param>
          <type><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for AES CTR + CBC-MAC (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2019" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a2602319e333a43136f15f5455550807f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_cbcenc_run</definition>
        <argsstring>(const br_aes_pwr8_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__cbcenc__keys" kindref="compound">br_aes_pwr8_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a82b227722441d05497be698d995deafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_cbcdec_run</definition>
        <argsstring>(const br_aes_pwr8_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__cbcdec__keys" kindref="compound">br_aes_pwr8_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2041" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a956e6a74a6ac28bc7ec08572c5a51da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_aes_pwr8_ctr_run</definition>
        <argsstring>(const br_aes_pwr8_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_ctr_run</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__ctr__keys" kindref="compound">br_aes_pwr8_ctr_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption and decryption with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (constant, 12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial block counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new block counter value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2054" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a40ca400a049e173bdd268eba74daeea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_ctrcbc_encrypt</definition>
        <argsstring>(const br_aes_pwr8_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_ctrcbc_encrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption + CBC-MAC with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2066" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1af3bdc75f08af6ca27c2a0de92f1f1e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_ctrcbc_decrypt</definition>
        <argsstring>(const br_aes_pwr8_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_ctrcbc_decrypt</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR decryption + CBC-MAC with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2078" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a296e914f8eb1ca9905c50db86e0be6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_ctrcbc_ctr</definition>
        <argsstring>(const br_aes_pwr8_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_ctrcbc_ctr</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CTR encryption/decryption with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctr</parametername>
</parameternamelist>
<parameterdescription>
<para>counter for CTR (16 bytes, updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2089" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a0190e905c9c87e7c5c5ee20fd603911e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_aes_pwr8_ctrcbc_mac</definition>
        <argsstring>(const br_aes_pwr8_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</argsstring>
        <name>br_aes_pwr8_ctrcbc_mac</name>
        <param>
          <type>const <ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cbcmac</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC-MAC with AES (<computeroutput>aes_pwr8</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cbcmac</parametername>
</parameternamelist>
<parameterdescription>
<para>IV for CBC-MAC (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to MAC (unmodified). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be a multiple of 16). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a26aec06f12b9bb2ea16b3b0e2493c38a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" kindref="member">br_block_cbcenc_class</ref> *</type>
        <definition>const br_block_cbcenc_class* br_aes_pwr8_cbcenc_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_pwr8_cbcenc_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_pwr8</computeroutput> AES-CBC (encryption) implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_pwr8_cbcenc_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the POWER8 crypto opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_pwr8</computeroutput> AES-CBC (encryption) implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a2b0c52b9b1233ef05b2ce62b45039dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" kindref="member">br_block_cbcdec_class</ref> *</type>
        <definition>const br_block_cbcdec_class* br_aes_pwr8_cbcdec_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_pwr8_cbcdec_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_pwr8</computeroutput> AES-CBC (decryption) implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_pwr8_cbcdec_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the POWER8 crypto opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_pwr8</computeroutput> AES-CBC (decryption) implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aa12292c2a6224134f0dd099665342616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" kindref="member">br_block_ctr_class</ref> *</type>
        <definition>const br_block_ctr_class* br_aes_pwr8_ctr_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_pwr8_ctr_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_pwr8</computeroutput> AES-CTR implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_pwr8_ctr_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the POWER8 crypto opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_pwr8</computeroutput> AES-CTR implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a74a080a5a1fda0fcf4c7935ef81fccee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" kindref="member">br_block_ctrcbc_class</ref> *</type>
        <definition>const br_block_ctrcbc_class* br_aes_pwr8_ctrcbc_get_vtable</definition>
        <argsstring>(void)</argsstring>
        <name>br_aes_pwr8_ctrcbc_get_vtable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>aes_pwr8</computeroutput> AES-CTR + CBC-MAC implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_aes_pwr8_ctrcbc_vtable</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the POWER8 AES opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>NULL</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>aes_pwr8</computeroutput> AES-CTR implementation, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a5d11cc6d128b9600b070efb6bec245a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_tab_cbcenc_init</definition>
        <argsstring>(br_des_tab_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_des_tab_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__des__tab__cbcenc__keys" kindref="compound">br_des_tab_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for DES CBC encryption (<computeroutput>des_tab</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a1ca4dfd6ca40e2e116a268858b1db01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_tab_cbcdec_init</definition>
        <argsstring>(br_des_tab_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_des_tab_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__des__tab__cbcdec__keys" kindref="compound">br_des_tab_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for DES CBC decryption (<computeroutput>des_tab</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a99e92c49ba8e1e776b06e283b5c1d935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_tab_cbcenc_run</definition>
        <argsstring>(const br_des_tab_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_des_tab_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__des__tab__cbcenc__keys" kindref="compound">br_des_tab_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with DES (<computeroutput>des_tab</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 8). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a12c3743d89b2efb75d49d60880b28772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_tab_cbcdec_run</definition>
        <argsstring>(const br_des_tab_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_des_tab_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__des__tab__cbcdec__keys" kindref="compound">br_des_tab_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with DES (<computeroutput>des_tab</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 8). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a59c99a00b0d5bf4192c1ee6caab8467b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_ct_cbcenc_init</definition>
        <argsstring>(br_des_ct_cbcenc_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_des_ct_cbcenc_init</name>
        <param>
          <type><ref refid="structbr__des__ct__cbcenc__keys" kindref="compound">br_des_ct_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for DES CBC encryption (<computeroutput>des_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a5bfde742b556f05dd2143643a325f31b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_ct_cbcdec_init</definition>
        <argsstring>(br_des_ct_cbcdec_keys *ctx, const void *key, size_t len)</argsstring>
        <name>br_des_ct_cbcdec_init</name>
        <param>
          <type><ref refid="structbr__des__ct__cbcdec__keys" kindref="compound">br_des_ct_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Context initialisation (key schedule) for DES CBC decryption (<computeroutput>des_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1adc6a64bfa09c4919a03604c999cba5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_ct_cbcenc_run</definition>
        <argsstring>(const br_des_ct_cbcenc_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_des_ct_cbcenc_run</name>
        <param>
          <type>const <ref refid="structbr__des__ct__cbcenc__keys" kindref="compound">br_des_ct_cbcenc_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC encryption with DES (<computeroutput>des_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 8). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a1a3e13b307fb3901ccd0876b939f497f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_des_ct_cbcdec_run</definition>
        <argsstring>(const br_des_ct_cbcdec_keys *ctx, void *iv, void *data, size_t len)</argsstring>
        <name>br_des_ct_cbcdec_run</name>
        <param>
          <type>const <ref refid="structbr__des__ct__cbcdec__keys" kindref="compound">br_des_ct_cbcdec_keys</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CBC decryption with DES (<computeroutput>des_ct</computeroutput> implementation). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context (already initialised). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to decrypt (updated). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes, MUST be multiple of 8). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a5bb19b9c2880857fd30246a9932cca94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_chacha20_ct_run</definition>
        <argsstring>(const void *key, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_chacha20_ct_run</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>ChaCha20 implementation (straightforward C code, constant-time). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a613995edc096fb28d0493ae98c16cbc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_chacha20_sse2_run</definition>
        <argsstring>(const void *key, const void *iv, uint32_t cc, void *data, size_t len)</argsstring>
        <name>br_chacha20_sse2_run</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>ChaCha20 implementation (SSE2 code, constant-time). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation is available only on x86 platforms, depending on compiler support. Moreover, in 32-bit mode, it might not actually run, if the underlying hardware does not implement the SSE2 opcode (in 64-bit mode, SSE2 is part of the ABI, so if the code could be compiled at all, then it can run). Use <computeroutput><ref refid="bearssl__block_8h_1aec92d1ee7450cf0859a9c8a949764376" kindref="member">br_chacha20_sse2_get()</ref></computeroutput> to safely obtain a pointer to that function.</para><para><simplesect kind="see"><para><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>IV (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>initial counter value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1aec92d1ee7450cf0859a9c8a949764376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></type>
        <definition>br_chacha20_run br_chacha20_sse2_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_chacha20_sse2_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>sse2</computeroutput> ChaCha20 implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to <computeroutput>br_chacha20_sse2_run</computeroutput>, if that implementation was compiled in the library <emphasis>and</emphasis> the SSE2 opcodes are available on the currently running CPU. If either of these conditions is not met, then this function returns <computeroutput>0</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>sse2</computeroutput> ChaCha20 implementation, or <computeroutput>0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a1fe2626ce342f9430d198d73c463e47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_poly1305_ctmul_run</definition>
        <argsstring>(const void *key, const void *iv, void *data, size_t len, const void *aad, size_t aad_len, void *tag, br_chacha20_run ichacha, int encrypt)</argsstring>
        <name>br_poly1305_ctmul_run</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>aad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>aad_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></type>
          <declname>ichacha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>encrypt</declname>
        </param>
        <briefdescription>
<para>ChaCha20+Poly1305 AEAD implementation (mixed 32-bit multiplications). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>nonce (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional authenticated data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of additional authenticated data (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the authentication tag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ichacha</parametername>
</parameternamelist>
<parameterdescription>
<para>implementation of ChaCha20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypt</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero for encryption, zero for decryption. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a369829d6c7729cddbb454ac5290537ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_poly1305_ctmul32_run</definition>
        <argsstring>(const void *key, const void *iv, void *data, size_t len, const void *aad, size_t aad_len, void *tag, br_chacha20_run ichacha, int encrypt)</argsstring>
        <name>br_poly1305_ctmul32_run</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>aad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>aad_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></type>
          <declname>ichacha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>encrypt</declname>
        </param>
        <briefdescription>
<para>ChaCha20+Poly1305 AEAD implementation (pure 32-bit multiplications). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>nonce (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional authenticated data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of additional authenticated data (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the authentication tag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ichacha</parametername>
</parameternamelist>
<parameterdescription>
<para>implementation of ChaCha20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypt</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero for encryption, zero for decryption. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1ac1f0ec04e10dacf4d0ecd5383b09ef07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_poly1305_i15_run</definition>
        <argsstring>(const void *key, const void *iv, void *data, size_t len, const void *aad, size_t aad_len, void *tag, br_chacha20_run ichacha, int encrypt)</argsstring>
        <name>br_poly1305_i15_run</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>aad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>aad_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></type>
          <declname>ichacha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>encrypt</declname>
        </param>
        <briefdescription>
<para>ChaCha20+Poly1305 AEAD implementation (i15). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation relies on the generic big integer code &quot;i15&quot; (which uses pure 32-bit multiplications). As such, it may save a little code footprint in a context where &quot;i15&quot; is already included (e.g. for elliptic curves or for RSA); however, it is also substantially slower than the ctmul and ctmul32 implementations.</para><para><simplesect kind="see"><para><ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>nonce (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional authenticated data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of additional authenticated data (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the authentication tag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ichacha</parametername>
</parameternamelist>
<parameterdescription>
<para>implementation of ChaCha20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypt</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero for encryption, zero for decryption. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a7e37eb1c81fd560222c9aed6e617159d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_poly1305_ctmulq_run</definition>
        <argsstring>(const void *key, const void *iv, void *data, size_t len, const void *aad, size_t aad_len, void *tag, br_chacha20_run ichacha, int encrypt)</argsstring>
        <name>br_poly1305_ctmulq_run</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>aad</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>aad_len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref></type>
          <declname>ichacha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>encrypt</declname>
        </param>
        <briefdescription>
<para>ChaCha20+Poly1305 AEAD implementation (ctmulq). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation uses 64-bit multiplications (result over 128 bits). It is available only on platforms that offer such a primitive (in practice, 64-bit architectures). Use <computeroutput><ref refid="bearssl__block_8h_1a0c2b86940f73e4db3894709494080b97" kindref="member">br_poly1305_ctmulq_get()</ref></computeroutput> to dynamically obtain a pointer to that function, or 0 if not supported.</para><para><simplesect kind="see"><para><ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>secret key (32 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>nonce (12 bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to encrypt or decrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional authenticated data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of additional authenticated data (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the authentication tag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ichacha</parametername>
</parameternamelist>
<parameterdescription>
<para>implementation of ChaCha20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypt</parametername>
</parameternamelist>
<parameterdescription>
<para>non-zero for encryption, zero for decryption. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__block_8h_1a0c2b86940f73e4db3894709494080b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref></type>
        <definition>br_poly1305_run br_poly1305_ctmulq_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_poly1305_ctmulq_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the ChaCha20+Poly1305 &quot;ctmulq&quot; implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to the <computeroutput><ref refid="bearssl__block_8h_1a7e37eb1c81fd560222c9aed6e617159d" kindref="member">br_poly1305_ctmulq_run()</ref></computeroutput> function if supported on the current platform; otherwise, it returns 0.</para><para><simplesect kind="return"><para>the ctmulq ChaCha20+Poly1305 implementation, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_block.h" line="2612" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="1">Block Ciphers and Symmetric Ciphers</heading>
</para><para>This file documents the API for block ciphers and other symmetric ciphers.</para><para><heading level="2">Procedural API</heading>
</para><para>For a block cipher implementation, up to three separate sets of functions are provided, for CBC encryption, CBC decryption, and CTR encryption/decryption. Each set has its own context structure, initialised with the encryption key.</para><para>For CBC encryption and decryption, the data to encrypt or decrypt is referenced as a sequence of blocks. The implementations assume that there is no partial block; no padding is applied or removed. The caller is responsible for handling any kind of padding.</para><para>Function for CTR encryption are defined only for block ciphers with blocks of 16 bytes or more (i.e. AES, but not DES/3DES).</para><para>Each implemented block cipher is identified by an &quot;internal name&quot; from which are derived the names of structures and functions that implement the cipher. For the block cipher of internal name &quot;`xxx`&quot;, the following are defined:</para><para><itemizedlist>
<listitem><para><computeroutput>br_xxx_BLOCK_SIZE</computeroutput></para><para>A macro that evaluates to the block size (in bytes) of the cipher. For all implemented block ciphers, this value is a power of two.</para></listitem><listitem><para><computeroutput>br_xxx_cbcenc_keys</computeroutput></para><para>Context structure that contains the subkeys resulting from the key expansion. These subkeys are appropriate for CBC encryption. The structure first field is called <computeroutput>vtable</computeroutput> and points to the appropriate OOP structure.</para></listitem><listitem><para><computeroutput>br_xxx_cbcenc_init(br_xxx_cbcenc_keys *ctx, const void *key, size_t len)</computeroutput></para><para>Perform key expansion: subkeys for CBC encryption are computed and written in the provided context structure. The key length MUST be adequate for the implemented block cipher. This function also sets the <computeroutput>vtable</computeroutput> field.</para></listitem><listitem><para><computeroutput>br_xxx_cbcenc_run(const br_xxx_cbcenc_keys *ctx, void *iv, void *data, size_t len)</computeroutput></para><para>Perform CBC encryption of <computeroutput>len</computeroutput> bytes, in place. The encrypted data replaces the cleartext. <computeroutput>len</computeroutput> MUST be a multiple of the block length (if it is not, the function may loop forever or overflow a buffer). The IV is provided with the <computeroutput>iv</computeroutput> pointer; it is also updated with a copy of the last encrypted block.</para></listitem><listitem><para><computeroutput>br_xxx_cbcdec_keys</computeroutput></para><para>Context structure that contains the subkeys resulting from the key expansion. These subkeys are appropriate for CBC decryption. The structure first field is called <computeroutput>vtable</computeroutput> and points to the appropriate OOP structure.</para></listitem><listitem><para><computeroutput>br_xxx_cbcdec_init(br_xxx_cbcenc_keys *ctx, const void *key, size_t len)</computeroutput></para><para>Perform key expansion: subkeys for CBC decryption are computed and written in the provided context structure. The key length MUST be adequate for the implemented block cipher. This function also sets the <computeroutput>vtable</computeroutput> field.</para></listitem><listitem><para><computeroutput>br_xxx_cbcdec_run(const br_xxx_cbcdec_keys *ctx, void *iv, void *data, size_t num_blocks)</computeroutput></para><para>Perform CBC decryption of <computeroutput>len</computeroutput> bytes, in place. The decrypted data replaces the ciphertext. <computeroutput>len</computeroutput> MUST be a multiple of the block length (if it is not, the function may loop forever or overflow a buffer). The IV is provided with the <computeroutput>iv</computeroutput> pointer; it is also updated with a copy of the last <emphasis>encrypted</emphasis> block.</para></listitem><listitem><para><computeroutput>br_xxx_ctr_keys</computeroutput></para><para>Context structure that contains the subkeys resulting from the key expansion. These subkeys are appropriate for CTR encryption and decryption. The structure first field is called <computeroutput>vtable</computeroutput> and points to the appropriate OOP structure.</para></listitem><listitem><para><computeroutput>br_xxx_ctr_init(br_xxx_ctr_keys *ctx, const void *key, size_t len)</computeroutput></para><para>Perform key expansion: subkeys for CTR encryption and decryption are computed and written in the provided context structure. The key length MUST be adequate for the implemented block cipher. This function also sets the <computeroutput>vtable</computeroutput> field.</para></listitem><listitem><para><computeroutput>br_xxx_ctr_run(const br_xxx_ctr_keys *ctx, const void *iv, uint32_t cc, void *data, size_t len)</computeroutput> (returns <computeroutput>uint32_t</computeroutput>)</para><para>Perform CTR encryption/decryption of some data. Processing is done &quot;in place&quot; (the output data replaces the input data). This function implements the &quot;standard incrementing function&quot; from NIST SP800-38A, annex B: the IV length shall be 4 bytes less than the block size (i.e. 12 bytes for AES) and the counter is the 32-bit value starting with <computeroutput>cc</computeroutput>. The data length (<computeroutput>len</computeroutput>) is not necessarily a multiple of the block size. The new counter value is returned, which supports chunked processing, provided that each chunk length (except possibly the last one) is a multiple of the block size.</para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_keys</computeroutput></para><para>Context structure that contains the subkeys resulting from the key expansion. These subkeys are appropriate for doing combined CTR encryption/decryption and CBC-MAC, as used in the CCM and EAX authenticated encryption modes. The structure first field is called <computeroutput>vtable</computeroutput> and points to the appropriate OOP structure.</para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_init(br_xxx_ctr_keys *ctx, const void *key, size_t len)</computeroutput></para><para>Perform key expansion: subkeys for combined CTR encryption/decryption and CBC-MAC are computed and written in the provided context structure. The key length MUST be adequate for the implemented block cipher. This function also sets the <computeroutput>vtable</computeroutput> field.</para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_encrypt(const br_xxx_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</computeroutput></para><para>Perform CTR encryption of some data, and CBC-MAC. Processing is done &quot;in place&quot; (the output data replaces the input data). This function applies CTR encryption on the data, using a full block-size counter (i.e. for 128-bit blocks, the counter is incremented as a 128-bit value). The &apos;ctr&apos; array contains the initial value for the counter (used in the first block) and it is updated with the new value after data processing. The &apos;cbcmac&apos; value shall point to a block-sized value which is used as IV for CBC-MAC, computed over the encrypted data (output of CTR encryption); the resulting CBC-MAC is written over &apos;cbcmac&apos; on output.</para><para>The data length MUST be a multiple of the block size.</para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_decrypt(const br_xxx_ctrcbc_keys *ctx, void *ctr, void *cbcmac, void *data, size_t len)</computeroutput></para><para>Perform CTR decryption of some data, and CBC-MAC. Processing is done &quot;in place&quot; (the output data replaces the input data). This function applies CTR decryption on the data, using a full block-size counter (i.e. for 128-bit blocks, the counter is incremented as a 128-bit value). The &apos;ctr&apos; array contains the initial value for the counter (used in the first block) and it is updated with the new value after data processing. The &apos;cbcmac&apos; value shall point to a block-sized value which is used as IV for CBC-MAC, computed over the encrypted data (input of CTR encryption); the resulting CBC-MAC is written over &apos;cbcmac&apos; on output.</para><para>The data length MUST be a multiple of the block size.</para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_ctr(const br_xxx_ctrcbc_keys *ctx, void *ctr, void *data, size_t len)</computeroutput></para><para>Perform CTR encryption or decryption of the provided data. The data is processed &quot;in place&quot; (the output data replaces the input data). A full block-sized counter is applied (i.e. for 128-bit blocks, the counter is incremented as a 128-bit value). The &apos;ctr&apos; array contains the initial value for the counter (used in the first block), and it is updated with the new value after data processing.</para><para>The data length MUST be a multiple of the block size.</para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_mac(const br_xxx_ctrcbc_keys *ctx, void *cbcmac, const void *data, size_t len)</computeroutput></para><para>Compute CBC-MAC over the provided data. The IV for CBC-MAC is provided as &apos;cbcmac&apos;; the output is written over the same array. The data itself is untouched. The data length MUST be a multiple of the block size.</para></listitem></itemizedlist>
</para><para>It shall be noted that the key expansion functions return <computeroutput>void</computeroutput>. If the provided key length is not allowed, then there will be no error reporting; implementations need not validate the key length, thus an invalid key length may result in undefined behaviour (e.g. buffer overflow).</para><para>Subkey structures contain no interior pointer, and no external resources are allocated upon key expansion. They can thus be discarded without any explicit deallocation.</para><para><heading level="2">Object-Oriented API</heading>
</para><para>Each context structure begins with a field (called <computeroutput>vtable</computeroutput>) that points to an instance of a structure that references the relevant functions through pointers. Each such structure contains the following:</para><para><itemizedlist>
<listitem><para><computeroutput>context_size</computeroutput></para><para>The size (in bytes) of the context structure for subkeys.</para></listitem><listitem><para><computeroutput>block_size</computeroutput></para><para>The cipher block size (in bytes).</para></listitem><listitem><para><computeroutput>log_block_size</computeroutput></para><para>The base-2 logarithm of cipher block size (e.g. 4 for blocks of 16 bytes).</para></listitem><listitem><para><computeroutput>init</computeroutput></para><para>Pointer to the key expansion function.</para></listitem><listitem><para><computeroutput>run</computeroutput></para><para>Pointer to the encryption/decryption function.</para></listitem></itemizedlist>
</para><para>For combined CTR/CBC-MAC encryption, the <computeroutput>vtable</computeroutput> has a slightly different structure:</para><para><itemizedlist>
<listitem><para><computeroutput>context_size</computeroutput></para><para>The size (in bytes) of the context structure for subkeys.</para></listitem><listitem><para><computeroutput>block_size</computeroutput></para><para>The cipher block size (in bytes).</para></listitem><listitem><para><computeroutput>log_block_size</computeroutput></para><para>The base-2 logarithm of cipher block size (e.g. 4 for blocks of 16 bytes).</para></listitem><listitem><para><computeroutput>init</computeroutput></para><para>Pointer to the key expansion function.</para></listitem><listitem><para><computeroutput>encrypt</computeroutput></para><para>Pointer to the CTR encryption + CBC-MAC function.</para></listitem><listitem><para><computeroutput>decrypt</computeroutput></para><para>Pointer to the CTR decryption + CBC-MAC function.</para></listitem><listitem><para><computeroutput>ctr</computeroutput></para><para>Pointer to the CTR encryption/decryption function.</para></listitem><listitem><para><computeroutput>mac</computeroutput></para><para>Pointer to the CBC-MAC function.</para></listitem></itemizedlist>
</para><para>For block cipher &quot;`xxx`&quot;, static, constant instances of these structures are defined, under the names:</para><para><itemizedlist>
<listitem><para><computeroutput>br_xxx_cbcenc_vtable</computeroutput></para></listitem><listitem><para><computeroutput>br_xxx_cbcdec_vtable</computeroutput></para></listitem><listitem><para><computeroutput>br_xxx_ctr_vtable</computeroutput></para></listitem><listitem><para><computeroutput>br_xxx_ctrcbc_vtable</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">Implemented Block Ciphers</heading>
</para><para>Provided implementations are:</para><para><table rows="9" cols="4"><row>
<entry thead="yes"><para>Name </para></entry><entry thead="yes"><para>Function </para></entry><entry thead="yes"><para>Block Size (bytes) </para></entry><entry thead="yes"><para>Key lengths (bytes)  </para></entry></row>
<row>
<entry thead="no"><para>aes_big </para></entry><entry thead="no"><para>AES </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16, 24 and 32 </para></entry></row>
<row>
<entry thead="no"><para>aes_small </para></entry><entry thead="no"><para>AES </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16, 24 and 32 </para></entry></row>
<row>
<entry thead="no"><para>aes_ct </para></entry><entry thead="no"><para>AES </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16, 24 and 32 </para></entry></row>
<row>
<entry thead="no"><para>aes_ct64 </para></entry><entry thead="no"><para>AES </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16, 24 and 32 </para></entry></row>
<row>
<entry thead="no"><para>aes_x86ni </para></entry><entry thead="no"><para>AES </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16, 24 and 32 </para></entry></row>
<row>
<entry thead="no"><para>aes_pwr8 </para></entry><entry thead="no"><para>AES </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16, 24 and 32 </para></entry></row>
<row>
<entry thead="no"><para>des_ct </para></entry><entry thead="no"><para>DES/3DES </para></entry><entry thead="no"><para>8 </para></entry><entry thead="no"><para>8, 16 and 24 </para></entry></row>
<row>
<entry thead="no"><para>des_tab </para></entry><entry thead="no"><para>DES/3DES </para></entry><entry thead="no"><para>8 </para></entry><entry thead="no"><para>8, 16 and 24 </para></entry></row>
</table>
<bold>Note:</bold> DES/3DES nominally uses keys of 64, 128 and 192 bits (i.e. 8, 16 and 24 bytes), but some of the bits are ignored by the algorithm, so the <emphasis>effective</emphasis> key lengths, from a security point of view, are 56, 112 and 168 bits, respectively.</para><para><computeroutput>aes_big</computeroutput> is a &quot;classical&quot; AES implementation, using tables. It is fast but not constant-time, since it makes data-dependent array accesses.</para><para><computeroutput>aes_small</computeroutput> is an AES implementation optimized for code size. It is substantially slower than <computeroutput>aes_big</computeroutput>; it is not constant-time either.</para><para><computeroutput>aes_ct</computeroutput> is a constant-time implementation of AES; its code is about as big as that of <computeroutput>aes_big</computeroutput>, while its performance is comparable to that of <computeroutput>aes_small</computeroutput>. However, it is constant-time. This implementation should thus be considered to be the &quot;default&quot; AES in BearSSL, to be used unless the operational context guarantees that a non-constant-time implementation is safe, or an architecture-specific constant-time implementation can be used (e.g. using dedicated hardware opcodes).</para><para><computeroutput>aes_ct64</computeroutput> is another constant-time implementation of AES. It is similar to <computeroutput>aes_ct</computeroutput> but uses 64-bit values. On 32-bit machines, <computeroutput>aes_ct64</computeroutput> is not faster than <computeroutput>aes_ct</computeroutput>, often a bit slower, and has a larger footprint; however, on 64-bit architectures, <computeroutput>aes_ct64</computeroutput> is typically twice faster than <computeroutput>aes_ct</computeroutput> for modes that allow parallel operations (i.e. CTR, and CBC decryption, but not CBC encryption).</para><para><computeroutput>aes_x86ni</computeroutput> exists only on x86 architectures (32-bit and 64-bit). It uses the AES-NI opcodes when available.</para><para><computeroutput>aes_pwr8</computeroutput> exists only on PowerPC / POWER architectures (32-bit and 64-bit, both little-endian and big-endian). It uses the AES opcodes present in POWER8 and later.</para><para><computeroutput>des_tab</computeroutput> is a classic, table-based implementation of DES/3DES. It is not constant-time.</para><para><computeroutput>des_ct</computeroutput> is an constant-time implementation of DES/3DES. It is substantially slower than <computeroutput>des_tab</computeroutput>.</para><para><heading level="2">ChaCha20 and Poly1305</heading>
</para><para>ChaCha20 is a stream cipher. Poly1305 is a MAC algorithm. They are described in <ulink url="https://tools.ietf.org/html/rfc7539">RFC 7539</ulink>.</para><para>Two function pointer types are defined:</para><para><itemizedlist>
<listitem><para><computeroutput>br_chacha20_run</computeroutput> describes a function that implements ChaCha20 only.</para></listitem><listitem><para><computeroutput>br_poly1305_run</computeroutput> describes an implementation of Poly1305, in the AEAD combination with ChaCha20 specified in RFC 7539 (the ChaCha20 implementation is provided as a function pointer).</para></listitem></itemizedlist>
</para><para><computeroutput>chacha20_ct</computeroutput> is a straightforward implementation of ChaCha20 in plain C; it is constant-time, small, and reasonably fast.</para><para><computeroutput>chacha20_sse2</computeroutput> leverages SSE2 opcodes (on x86 architectures that support these opcodes). It is faster than <computeroutput>chacha20_ct</computeroutput>.</para><para><computeroutput>poly1305_ctmul</computeroutput> is an implementation of the ChaCha20+Poly1305 AEAD construction, where the Poly1305 part is performed with mixed 32-bit multiplications (operands are 32-bit, result is 64-bit).</para><para><computeroutput>poly1305_ctmul32</computeroutput> implements ChaCha20+Poly1305 using pure 32-bit multiplications (32-bit operands, 32-bit result). It is slower than <computeroutput>poly1305_ctmul</computeroutput>, except on some specific architectures such as the ARM Cortex M0+.</para><para><computeroutput>poly1305_ctmulq</computeroutput> implements ChaCha20+Poly1305 with mixed 64-bit multiplications (operands are 64-bit, result is 128-bit) on 64-bit platforms that support such operations.</para><para><computeroutput>poly1305_i15</computeroutput> implements ChaCha20+Poly1305 with the generic &quot;i15&quot; big integer implementation. It is meant mostly for testing purposes, although it can help with saving a few hundred bytes of code footprint on systems where code size is scarce. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Thomas<sp/>Pornin<sp/>&lt;pornin@bolet.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_BEARSSL_BLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_BEARSSL_BLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="bearssl__block_8h_1ad0ecff523e21a74dc1143dcfa52aa251" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class_</ref><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref>;</highlight></codeline>
<codeline lineno="394" refid="structbr__block__cbcenc__class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class_</ref><sp/>{</highlight></codeline>
<codeline lineno="399" refid="structbr__block__cbcenc__class___1ae731a8e995309f146d78b3877145c110" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class___1ae731a8e995309f146d78b3877145c110" kindref="member">context_size</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="structbr__block__cbcenc__class___1a2c42f682029f08d66eb025ae1c732834" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class___1a2c42f682029f08d66eb025ae1c732834" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="structbr__block__cbcenc__class___1a541cb6678a10f233ad918e5a2220f5cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class___1a541cb6678a10f233ad918e5a2220f5cf" kindref="member">log_block_size</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="structbr__block__cbcenc__class___1ab148e2bacebbee1588b9c7c0847a7d42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__block__cbcenc__class___1ab148e2bacebbee1588b9c7c0847a7d42" kindref="member">init</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="structbr__block__cbcenc__class___1a4f6818866dd7e39c07319ccbd6e99c07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__block__cbcenc__class___1a4f6818866dd7e39c07319ccbd6e99c07" kindref="member">run</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="bearssl__block_8h_1a5542970c820eeee2e62766368be8fb7f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class_</ref><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref>;</highlight></codeline>
<codeline lineno="450" refid="structbr__block__cbcdec__class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class_</ref><sp/>{</highlight></codeline>
<codeline lineno="455" refid="structbr__block__cbcdec__class___1a3905f50afc18ac57e509e6fa3de7a6d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class___1a3905f50afc18ac57e509e6fa3de7a6d6" kindref="member">context_size</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="structbr__block__cbcdec__class___1a90d49ad45057502d5c317b88b196192f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class___1a90d49ad45057502d5c317b88b196192f" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="structbr__block__cbcdec__class___1a5ee75e036596d74d8acad3390105d590" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class___1a5ee75e036596d74d8acad3390105d590" kindref="member">log_block_size</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="structbr__block__cbcdec__class___1af84792d60cd230b8ddda5ebce62a6252" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__block__cbcenc__class___1ab148e2bacebbee1588b9c7c0847a7d42" kindref="member">init</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="structbr__block__cbcdec__class___1ab1304ead1b43a55d35150d6d0b15a3e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__block__cbcenc__class___1a4f6818866dd7e39c07319ccbd6e99c07" kindref="member">run</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">};</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="bearssl__block_8h_1a8934ac58af503220bfb6e6cbc2cfb209" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class_</ref><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref>;</highlight></codeline>
<codeline lineno="507" refid="structbr__block__ctr__class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class_</ref><sp/>{</highlight></codeline>
<codeline lineno="512" refid="structbr__block__ctr__class___1a5ab70fc09d3f896286db4d9ab141b687" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class___1a5ab70fc09d3f896286db4d9ab141b687" kindref="member">context_size</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="structbr__block__ctr__class___1a5855b6805ea76905618791a911deeefc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class___1a5855b6805ea76905618791a911deeefc" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="structbr__block__ctr__class___1a9d839e9063043a3e7389d57b61c9c09e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class___1a9d839e9063043a3e7389d57b61c9c09e" kindref="member">log_block_size</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="structbr__block__ctr__class___1aa18275294e3f478f7f348be2e0acb989" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__block__cbcenc__class___1ab148e2bacebbee1588b9c7c0847a7d42" kindref="member">init</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="structbr__block__ctr__class___1a3ef339b01b47bd4dba2e084148db0530" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>(*<ref refid="structbr__block__cbcenc__class___1a4f6818866dd7e39c07319ccbd6e99c07" kindref="member">run</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="564"><highlight class="normal">};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="bearssl__block_8h_1acc35dad952fda67b68df0b107fe26f0b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class_</ref><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref>;</highlight></codeline>
<codeline lineno="574" refid="structbr__block__ctrcbc__class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class_</ref><sp/>{</highlight></codeline>
<codeline lineno="579" refid="structbr__block__ctrcbc__class___1a74b9fae6a21c846f9146f6c5d735212c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class___1a74b9fae6a21c846f9146f6c5d735212c" kindref="member">context_size</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="structbr__block__ctrcbc__class___1af15e472287ac70fcfe2fa31825e22214" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class___1af15e472287ac70fcfe2fa31825e22214" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="structbr__block__ctrcbc__class___1a968f2abc1b0035034294633e30c69ab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class___1a968f2abc1b0035034294633e30c69ab7" kindref="member">log_block_size</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="structbr__block__ctrcbc__class___1ae9fc5896bb00f38332ff72960c73d397" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__block__cbcenc__class___1ab148e2bacebbee1588b9c7c0847a7d42" kindref="member">init</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_len);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="structbr__block__ctrcbc__class___1a43fe57f6aab19bb24d59b8e5f76dc562" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*encrypt)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="structbr__block__ctrcbc__class___1ae22aeea0d1a1961dada2e3699f3f94e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*decrypt)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="structbr__block__ctrcbc__class___1ababdd95a98b5583ca53347b43a69d1ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*ctr)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="structbr__block__ctrcbc__class___1ad8a236c61c6191fe54f7c3014035aa54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*mac)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="690"><highlight class="normal">};</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>Traditional,<sp/>table-based<sp/>AES<sp/>implementation.<sp/>It<sp/>is<sp/>fast,<sp/>but<sp/>uses</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/>internal<sp/>tables<sp/>(in<sp/>particular<sp/>a<sp/>1<sp/>kB<sp/>table<sp/>for<sp/>encryption,<sp/>another</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>1<sp/>kB<sp/>table<sp/>for<sp/>decryption,<sp/>and<sp/>a<sp/>256-byte<sp/>table<sp/>for<sp/>key<sp/>schedule),</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>and<sp/>it<sp/>is<sp/>not<sp/>constant-time.<sp/>In<sp/>contexts<sp/>where<sp/>cache-timing<sp/>attacks</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>apply,<sp/>this<sp/>implementation<sp/>may<sp/>leak<sp/>the<sp/>secret<sp/>key.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="bearssl__block_8h_1a6e75e0a00f9700fbeedce5f56175675c" refkind="member"><highlight class="preprocessor">#define<sp/>br_aes_big_BLOCK_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="structbr__aes__big__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="711" refid="structbr__aes__big__cbcenc__keys_1a023975990031eb88a4fe60c998cf9d9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__aes__big__cbcenc__keys_1a023975990031eb88a4fe60c998cf9d9f" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">}<sp/><ref refid="structbr__aes__big__cbcenc__keys" kindref="compound">br_aes_big_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="structbr__aes__big__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="726" refid="structbr__aes__big__cbcdec__keys_1a379ffc6c76c3bcd68b976e460734a8a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__aes__big__cbcdec__keys_1a379ffc6c76c3bcd68b976e460734a8a3" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">}<sp/><ref refid="structbr__aes__big__cbcdec__keys" kindref="compound">br_aes_big_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="structbr__aes__big__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="742" refid="structbr__aes__big__ctr__keys_1a96e7e1a5411b7c026135cc7633964740" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="structbr__aes__big__ctr__keys_1a96e7e1a5411b7c026135cc7633964740" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">}<sp/><ref refid="structbr__aes__big__ctr__keys" kindref="compound">br_aes_big_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="structbr__aes__big__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="758" refid="structbr__aes__big__ctrcbc__keys_1a5265f1e458201a84e1eb8a8563ec3ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="structbr__aes__big__ctrcbc__keys_1a5265f1e458201a84e1eb8a8563ec3ee3" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">}<sp/><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1a05ae059c515f55a4508b0c980c5ec301" kindref="member">br_aes_big_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1a7aa261c1559cf94a8cfc2afce397cccf" kindref="member">br_aes_big_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/><ref refid="bearssl__block_8h_1ab91b0663757051a6753601260107aee6" kindref="member">br_aes_big_ctr_vtable</ref>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/><ref refid="bearssl__block_8h_1ab1a208e01460541dec24fa47c3920207" kindref="member">br_aes_big_ctrcbc_vtable</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a6e01bc2638042cd630879e68aed21132" kindref="member">br_aes_big_cbcenc_init</ref>(<ref refid="structbr__aes__big__cbcenc__keys" kindref="compound">br_aes_big_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a9969f33445b4f28d6ea9a8d353e6abfc" kindref="member">br_aes_big_cbcdec_init</ref>(<ref refid="structbr__aes__big__cbcdec__keys" kindref="compound">br_aes_big_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a423989bf3cd8262564f05d3a742e5a4d" kindref="member">br_aes_big_ctr_init</ref>(<ref refid="structbr__aes__big__ctr__keys" kindref="compound">br_aes_big_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a222e01a3b06fef6720dbff9499e1c799" kindref="member">br_aes_big_ctrcbc_init</ref>(<ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ab088b057d1cd23de47b6b139dcbaf0b2" kindref="member">br_aes_big_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__cbcenc__keys" kindref="compound">br_aes_big_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1acd1212f8247b8e40f8ec0c552e1dfa85" kindref="member">br_aes_big_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__cbcdec__keys" kindref="compound">br_aes_big_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1aec4ebbe578a75ad935f721302bbc0446" kindref="member">br_aes_big_ctr_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__ctr__keys" kindref="compound">br_aes_big_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1aba889713d106504bb4afbfabf6172eeb" kindref="member">br_aes_big_ctrcbc_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a560129008eefeea111e90d0b16ccda43" kindref="member">br_aes_big_ctrcbc_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ab87fb795e0e0d7b47ff346e701d76a19" kindref="member">br_aes_big_ctrcbc_ctr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a20f7c053c17b73f9790c945c2dfb738f" kindref="member">br_aes_big_ctrcbc_mac</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>AES<sp/>implementation<sp/>optimized<sp/>for<sp/>size.<sp/>It<sp/>is<sp/>slower<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>traditional<sp/>table-based<sp/>AES<sp/>implementation,<sp/>but<sp/>requires<sp/>much<sp/>less</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/>code.<sp/>It<sp/>still<sp/>uses<sp/>data-dependent<sp/>table<sp/>accesses<sp/>(albeit<sp/>within<sp/>a</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*<sp/>much<sp/>smaller<sp/>256-byte<sp/>table),<sp/>which<sp/>makes<sp/>it<sp/>conceptually<sp/>vulnerable</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*<sp/>to<sp/>cache-timing<sp/>attacks.</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="bearssl__block_8h_1a2433ce03d9cdadb060f2a91a826bdcd5" refkind="member"><highlight class="preprocessor">#define<sp/>br_aes_small_BLOCK_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="929" refid="structbr__aes__small__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="931" refid="structbr__aes__small__cbcenc__keys_1a6c9253c2ac9616fbeaca0738e196f2bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__aes__small__cbcenc__keys_1a6c9253c2ac9616fbeaca0738e196f2bc" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">}<sp/><ref refid="structbr__aes__small__cbcenc__keys" kindref="compound">br_aes_small_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="944" refid="structbr__aes__small__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="946" refid="structbr__aes__small__cbcdec__keys_1a914be0e021193192cfba5432b8211e1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__aes__small__cbcdec__keys_1a914be0e021193192cfba5432b8211e1c" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">}<sp/><ref refid="structbr__aes__small__cbcdec__keys" kindref="compound">br_aes_small_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="960" refid="structbr__aes__small__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="962" refid="structbr__aes__small__ctr__keys_1adbd0f7217826e6ffc183845cc0dc1632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="structbr__aes__small__ctr__keys_1adbd0f7217826e6ffc183845cc0dc1632" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal">}<sp/><ref refid="structbr__aes__small__ctr__keys" kindref="compound">br_aes_small_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="976" refid="structbr__aes__small__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="978" refid="structbr__aes__small__ctrcbc__keys_1a40295e5bdc9dfefe294f55bf36b6cbaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="structbr__aes__small__ctrcbc__keys_1a40295e5bdc9dfefe294f55bf36b6cbaa" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">}<sp/><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1ad2a06e9809ac94ecd91770d4a8dd5ba4" kindref="member">br_aes_small_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1a6e05a53f7af7dd47d147e8c789a87075" kindref="member">br_aes_small_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/><ref refid="bearssl__block_8h_1aeeadbf2d27178f1430006d676f748314" kindref="member">br_aes_small_ctr_vtable</ref>;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/><ref refid="bearssl__block_8h_1a4c2563e79e82b2f744e7cced4856054b" kindref="member">br_aes_small_ctrcbc_vtable</ref>;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ab73e5321d7dce925a47694c6dde75b89" kindref="member">br_aes_small_cbcenc_init</ref>(<ref refid="structbr__aes__small__cbcenc__keys" kindref="compound">br_aes_small_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a309069429204e4d27d0e7aabfe778d93" kindref="member">br_aes_small_cbcdec_init</ref>(<ref refid="structbr__aes__small__cbcdec__keys" kindref="compound">br_aes_small_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a2d4c40d02bf483cc00b3ab96ddf95fb9" kindref="member">br_aes_small_ctr_init</ref>(<ref refid="structbr__aes__small__ctr__keys" kindref="compound">br_aes_small_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ac2d348db1c60389805d6604f25f00076" kindref="member">br_aes_small_ctrcbc_init</ref>(<ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1af4dd0010c199073f5346e462f28aedc1" kindref="member">br_aes_small_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__cbcenc__keys" kindref="compound">br_aes_small_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ae0696942765d8b7fde6ccf9dd1be7aae" kindref="member">br_aes_small_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__cbcdec__keys" kindref="compound">br_aes_small_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1a350606cdbf850b0d651af223413a1dbf" kindref="member">br_aes_small_ctr_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__ctr__keys" kindref="compound">br_aes_small_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a8f7ac95fe29ab1e04f95fd1d167953b7" kindref="member">br_aes_small_ctrcbc_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a919b50392b820f08de42361d92abd4e9" kindref="member">br_aes_small_ctrcbc_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a7f07c87b34361949a134c75f8dea2b55" kindref="member">br_aes_small_ctrcbc_ctr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1aca1912b2b093bd02763b0628d982b598" kindref="member">br_aes_small_ctrcbc_mac</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/>*<sp/>Constant-time<sp/>AES<sp/>implementation.<sp/>Its<sp/>size<sp/>is<sp/>similar<sp/>to<sp/>that<sp/>of</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/>*<sp/>&apos;aes_big&apos;,<sp/>and<sp/>its<sp/>performance<sp/>is<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>&apos;aes_small&apos;<sp/>(faster</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/>*<sp/>decryption,<sp/>slower<sp/>encryption).<sp/>However,<sp/>it<sp/>is<sp/>constant-time,<sp/>i.e.</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/>*<sp/>immune<sp/>to<sp/>cache-timing<sp/>and<sp/>similar<sp/>attacks.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140" refid="bearssl__block_8h_1a6a55ba4c0598ab5fa978a4bc8b6c6ebc" refkind="member"><highlight class="preprocessor">#define<sp/>br_aes_ct_BLOCK_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="structbr__aes__ct__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150" refid="structbr__aes__ct__cbcenc__keys_1a5de95e89490f15b176acb70a0c115752" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__aes__ct__cbcenc__keys_1a5de95e89490f15b176acb70a0c115752" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct__cbcenc__keys" kindref="compound">br_aes_ct_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163" refid="structbr__aes__ct__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1165" refid="structbr__aes__ct__cbcdec__keys_1a2cce0eacfebf4fb19ec3877e39d9597f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__aes__ct__cbcdec__keys_1a2cce0eacfebf4fb19ec3877e39d9597f" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct__cbcdec__keys" kindref="compound">br_aes_ct_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179" refid="structbr__aes__ct__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181" refid="structbr__aes__ct__ctr__keys_1af1bb322ecd571a1a99529ceac021775f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="structbr__aes__ct__ctr__keys_1af1bb322ecd571a1a99529ceac021775f" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct__ctr__keys" kindref="compound">br_aes_ct_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195" refid="structbr__aes__ct__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1197" refid="structbr__aes__ct__ctrcbc__keys_1a52cf447acb37c8b1b2e017169d69bb44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="structbr__aes__ct__ctrcbc__keys_1a52cf447acb37c8b1b2e017169d69bb44" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[60];</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1a080d532a4c93d02baf8c1361f1ac4cbc" kindref="member">br_aes_ct_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1a9ffdf18afde3f09601bab834c8c59caa" kindref="member">br_aes_ct_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/><ref refid="bearssl__block_8h_1af11aa0427f2fb4266bf07faaf89f1513" kindref="member">br_aes_ct_ctr_vtable</ref>;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/><ref refid="bearssl__block_8h_1aa4ecb7983757a746baede2bbdb38a66d" kindref="member">br_aes_ct_ctrcbc_vtable</ref>;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a4214e13e76eecc08c694b58941354f4e" kindref="member">br_aes_ct_cbcenc_init</ref>(<ref refid="structbr__aes__ct__cbcenc__keys" kindref="compound">br_aes_ct_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a34c4384aeca3ff0a13ae720947ea3804" kindref="member">br_aes_ct_cbcdec_init</ref>(<ref refid="structbr__aes__ct__cbcdec__keys" kindref="compound">br_aes_ct_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a6c8e3bf4dd30d3da3a14847fc74772a6" kindref="member">br_aes_ct_ctr_init</ref>(<ref refid="structbr__aes__ct__ctr__keys" kindref="compound">br_aes_ct_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a0892afbc99158cae3ec71bbdec42b57f" kindref="member">br_aes_ct_ctrcbc_init</ref>(<ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a1875a3987b328237799bb63ef084c292" kindref="member">br_aes_ct_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__cbcenc__keys" kindref="compound">br_aes_ct_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a2b9ea6d34952ba9e714c269e81fd0c59" kindref="member">br_aes_ct_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__cbcdec__keys" kindref="compound">br_aes_ct_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1ab5331257ad658cd4c4cec57e618c787a" kindref="member">br_aes_ct_ctr_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__ctr__keys" kindref="compound">br_aes_ct_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a24d6dd6661d63ce0ab8200a745dc020c" kindref="member">br_aes_ct_ctrcbc_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ab76578e1289bab86929c594ca076c567" kindref="member">br_aes_ct_ctrcbc_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a33883ec6db6b5b0dd07701ef9e26c506" kindref="member">br_aes_ct_ctrcbc_ctr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a2e996b5e48333a021abebd1c326167f6" kindref="member">br_aes_ct_ctrcbc_mac</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/>*<sp/>64-bit<sp/>constant-time<sp/>AES<sp/>implementation.<sp/>It<sp/>is<sp/>similar<sp/>to<sp/>&apos;aes_ct&apos;</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/>*<sp/>but<sp/>uses<sp/>64-bit<sp/>registers,<sp/>making<sp/>it<sp/>about<sp/>twice<sp/>faster<sp/>than<sp/>&apos;aes_ct&apos;</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/>*<sp/>on<sp/>64-bit<sp/>platforms,<sp/>while<sp/>remaining<sp/>constant-time<sp/>and<sp/>with<sp/>a<sp/>similar</highlight></codeline>
<codeline lineno="1355"><highlight class="comment"><sp/>*<sp/>code<sp/>size.<sp/>(The<sp/>doubling<sp/>in<sp/>performance<sp/>is<sp/>only<sp/>for<sp/>CBC<sp/>decryption</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/>*<sp/>and<sp/>CTR<sp/>mode;<sp/>CBC<sp/>encryption<sp/>is<sp/>non-parallel<sp/>and<sp/>cannot<sp/>benefit<sp/>from</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"><sp/>*<sp/>the<sp/>larger<sp/>registers.)</highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361" refid="bearssl__block_8h_1a0fbffe218c8483b5ad9071f13a5d951d" refkind="member"><highlight class="preprocessor">#define<sp/>br_aes_ct64_BLOCK_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369" refid="structbr__aes__ct64__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1371" refid="structbr__aes__ct64__cbcenc__keys_1a609be492289baafbf2f9d1f1c1a4a3cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__aes__ct64__cbcenc__keys_1a609be492289baafbf2f9d1f1c1a4a3cf" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>skey[30];</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct64__cbcenc__keys" kindref="compound">br_aes_ct64_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384" refid="structbr__aes__ct64__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1386" refid="structbr__aes__ct64__cbcdec__keys_1a43a346c9f307096b8e7671f6798a27ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__aes__ct64__cbcdec__keys_1a43a346c9f307096b8e7671f6798a27ab" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>skey[30];</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct64__cbcdec__keys" kindref="compound">br_aes_ct64_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400" refid="structbr__aes__ct64__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1402" refid="structbr__aes__ct64__ctr__keys_1a359466407eb584c792c4c284b7b167e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="structbr__aes__ct64__ctr__keys_1a359466407eb584c792c4c284b7b167e2" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>skey[30];</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct64__ctr__keys" kindref="compound">br_aes_ct64_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416" refid="structbr__aes__ct64__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1418" refid="structbr__aes__ct64__ctrcbc__keys_1a6aecca0094570def66e724d25e702b3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="structbr__aes__ct64__ctrcbc__keys_1a6aecca0094570def66e724d25e702b3c" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>skey[30];</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}<sp/><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1a5ee7275811d1faf971fb8642561dd911" kindref="member">br_aes_ct64_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1aba1575077a300a48dc95b468ef71adf9" kindref="member">br_aes_ct64_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/><ref refid="bearssl__block_8h_1ad3a4453eeee0bc2ab6bc4c19cae40539" kindref="member">br_aes_ct64_ctr_vtable</ref>;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/><ref refid="bearssl__block_8h_1a6d6a212efa86ac79c104d4a4193a917e" kindref="member">br_aes_ct64_ctrcbc_vtable</ref>;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1abc8f255753882d0d06be28bbbf6c6dfc" kindref="member">br_aes_ct64_cbcenc_init</ref>(<ref refid="structbr__aes__ct64__cbcenc__keys" kindref="compound">br_aes_ct64_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a003343666043989ad24541af69cd3f4c" kindref="member">br_aes_ct64_cbcdec_init</ref>(<ref refid="structbr__aes__ct64__cbcdec__keys" kindref="compound">br_aes_ct64_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a9033a89a15955099cf78e84eec054450" kindref="member">br_aes_ct64_ctr_init</ref>(<ref refid="structbr__aes__ct64__ctr__keys" kindref="compound">br_aes_ct64_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a4d5cfb4ddb5599f725ecca64a51bf71c" kindref="member">br_aes_ct64_ctrcbc_init</ref>(<ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1adf86d68e8e3d9f983c34cd3de12347bb" kindref="member">br_aes_ct64_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__cbcenc__keys" kindref="compound">br_aes_ct64_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a196e9ea0afcfb4a9524a95de269cc1d2" kindref="member">br_aes_ct64_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__cbcdec__keys" kindref="compound">br_aes_ct64_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1a7328c9312369b65d32b9991fc06690a5" kindref="member">br_aes_ct64_ctr_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__ctr__keys" kindref="compound">br_aes_ct64_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a586e528dcf0fe37c0ec456e481f1164c" kindref="member">br_aes_ct64_ctrcbc_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a4f6dc3f86d2ad17e5a93bdf911392b7f" kindref="member">br_aes_ct64_ctrcbc_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a5645ab766ad91b1fc4221f279b604f93" kindref="member">br_aes_ct64_ctrcbc_ctr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a9fcaf02f5320a2cd90456ffdd3fde90a" kindref="member">br_aes_ct64_ctrcbc_mac</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/>*<sp/>AES<sp/>implementation<sp/>using<sp/>AES-NI<sp/>opcodes<sp/>(x86<sp/>platform).</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577" refid="bearssl__block_8h_1a0130f54fcf81a7beb535dc3b9c102467" refkind="member"><highlight class="preprocessor">#define<sp/>br_aes_x86ni_BLOCK_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585" refid="structbr__aes__x86ni__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1587" refid="structbr__aes__x86ni__cbcenc__keys_1ab6c00f24ec0b4614c2e0e84f4a22a691" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__aes__x86ni__cbcenc__keys_1ab6c00f24ec0b4614c2e0e84f4a22a691" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal">}<sp/><ref refid="structbr__aes__x86ni__cbcenc__keys" kindref="compound">br_aes_x86ni_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602" refid="structbr__aes__x86ni__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1604" refid="structbr__aes__x86ni__cbcdec__keys_1a60addc6b6c10c21aa5e96c62f81ce48e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__aes__x86ni__cbcdec__keys_1a60addc6b6c10c21aa5e96c62f81ce48e" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}<sp/><ref refid="structbr__aes__x86ni__cbcdec__keys" kindref="compound">br_aes_x86ni_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620" refid="structbr__aes__x86ni__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1622" refid="structbr__aes__x86ni__ctr__keys_1abfd1aa4d5d363932acc554dd958aabde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="structbr__aes__x86ni__ctr__keys_1abfd1aa4d5d363932acc554dd958aabde" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}<sp/><ref refid="structbr__aes__x86ni__ctr__keys" kindref="compound">br_aes_x86ni_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638" refid="structbr__aes__x86ni__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1640" refid="structbr__aes__x86ni__ctrcbc__keys_1a3559cf99c9885531fbc6392025cf1332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="structbr__aes__x86ni__ctrcbc__keys_1a3559cf99c9885531fbc6392025cf1332" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}<sp/><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1a1c329f355710948b807dd0bfa1dbf5fb" kindref="member">br_aes_x86ni_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1a6b7037eab477c93536ab2bb02f2987ad" kindref="member">br_aes_x86ni_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/><ref refid="bearssl__block_8h_1a9ac8b2b06d07aa31e2aa1db069ae0c78" kindref="member">br_aes_x86ni_ctr_vtable</ref>;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/><ref refid="bearssl__block_8h_1afb6f9443770928720a70b152dec7752e" kindref="member">br_aes_x86ni_ctrcbc_vtable</ref>;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1af29323ad864235eb6169d8d45253b6fd" kindref="member">br_aes_x86ni_cbcenc_init</ref>(<ref refid="structbr__aes__x86ni__cbcenc__keys" kindref="compound">br_aes_x86ni_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a5038cd0688f4459322f510449db2599b" kindref="member">br_aes_x86ni_cbcdec_init</ref>(<ref refid="structbr__aes__x86ni__cbcdec__keys" kindref="compound">br_aes_x86ni_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1aa2ad5c8bfa4b8579b9cf43038a435289" kindref="member">br_aes_x86ni_ctr_init</ref>(<ref refid="structbr__aes__x86ni__ctr__keys" kindref="compound">br_aes_x86ni_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1aaac8e5ea09eeaf31eb702cc1d2f97729" kindref="member">br_aes_x86ni_ctrcbc_init</ref>(<ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1afaca95f366e6b712cfb50eac6b8e0bc5" kindref="member">br_aes_x86ni_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__cbcenc__keys" kindref="compound">br_aes_x86ni_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a3974cc0e2739961295e9d968500012a0" kindref="member">br_aes_x86ni_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__cbcdec__keys" kindref="compound">br_aes_x86ni_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1a8ecb68de3a9a856511d4580be0138e6e" kindref="member">br_aes_x86ni_ctr_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__ctr__keys" kindref="compound">br_aes_x86ni_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a147d6077b0764bde1e3279c8d4ca814f" kindref="member">br_aes_x86ni_ctrcbc_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a0d1a6a2df667b4f4d02a44eba8e9618b" kindref="member">br_aes_x86ni_ctrcbc_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1aeffbf2c82e84fd8bf75bec05567d8397" kindref="member">br_aes_x86ni_ctrcbc_ctr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a83187e22aba14f774023dddd2a9be6e3" kindref="member">br_aes_x86ni_ctrcbc_mac</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="bearssl__block_8h_1ac37a6d32944f51607bd5e487e0b6c6f7" kindref="member">br_aes_x86ni_cbcenc_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="bearssl__block_8h_1acdd5f10c9f78c11a40634fb3129b213e" kindref="member">br_aes_x86ni_cbcdec_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="bearssl__block_8h_1add02e1f27c1cd0c717cb0a0a24ad97da" kindref="member">br_aes_x86ni_ctr_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="bearssl__block_8h_1a7ee868404f10f73c5fffb36185a3bc8d" kindref="member">br_aes_x86ni_ctrcbc_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/>*<sp/>AES<sp/>implementation<sp/>using<sp/>POWER8<sp/>opcodes.</highlight></codeline>
<codeline lineno="1865"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868" refid="bearssl__block_8h_1a03200129c18f31aa6c779e946b5b1d0a" refkind="member"><highlight class="preprocessor">#define<sp/>br_aes_pwr8_BLOCK_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876" refid="structbr__aes__pwr8__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1878" refid="structbr__aes__pwr8__cbcenc__keys_1a8b3fa91e685250c7a195a4d2bc488edf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__aes__pwr8__cbcenc__keys_1a8b3fa91e685250c7a195a4d2bc488edf" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}<sp/><ref refid="structbr__aes__pwr8__cbcenc__keys" kindref="compound">br_aes_pwr8_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893" refid="structbr__aes__pwr8__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1895" refid="structbr__aes__pwr8__cbcdec__keys_1a4bf8db2e1e063a911bd0776aa290ee5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__aes__pwr8__cbcdec__keys_1a4bf8db2e1e063a911bd0776aa290ee5a" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}<sp/><ref refid="structbr__aes__pwr8__cbcdec__keys" kindref="compound">br_aes_pwr8_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911" refid="structbr__aes__pwr8__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1913" refid="structbr__aes__pwr8__ctr__keys_1a4301bfe6690c67ca08b0b138dd954240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="structbr__aes__pwr8__ctr__keys_1a4301bfe6690c67ca08b0b138dd954240" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal">}<sp/><ref refid="structbr__aes__pwr8__ctr__keys" kindref="compound">br_aes_pwr8_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929" refid="structbr__aes__pwr8__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1931" refid="structbr__aes__pwr8__ctrcbc__keys_1a4cd7c894e9d1c96cc24f18ecf542a559" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="structbr__aes__pwr8__ctrcbc__keys_1a4cd7c894e9d1c96cc24f18ecf542a559" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>skni[16<sp/>*<sp/>15];</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>skey;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal">}<sp/><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1a38c535fd8af3b8339503c171d9d3fdf5" kindref="member">br_aes_pwr8_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1aa729209611025ece626a341722d5affb" kindref="member">br_aes_pwr8_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/><ref refid="bearssl__block_8h_1ab36c022212741b3cbdca7859bcd80d94" kindref="member">br_aes_pwr8_ctr_vtable</ref>;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/><ref refid="bearssl__block_8h_1a81bd16de3deb250e17da07560590883c" kindref="member">br_aes_pwr8_ctrcbc_vtable</ref>;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a0ff75ac5c55d3db12b04ec77662264d6" kindref="member">br_aes_pwr8_cbcenc_init</ref>(<ref refid="structbr__aes__pwr8__cbcenc__keys" kindref="compound">br_aes_pwr8_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a766bde20bc89c7240f199407d8ce0f3c" kindref="member">br_aes_pwr8_cbcdec_init</ref>(<ref refid="structbr__aes__pwr8__cbcdec__keys" kindref="compound">br_aes_pwr8_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a82c4482fe0578ffacac04c74314c4258" kindref="member">br_aes_pwr8_ctr_init</ref>(<ref refid="structbr__aes__pwr8__ctr__keys" kindref="compound">br_aes_pwr8_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1abd7868a368cdee986c2aa5b08a7796a2" kindref="member">br_aes_pwr8_ctrcbc_init</ref>(<ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a2602319e333a43136f15f5455550807f" kindref="member">br_aes_pwr8_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__cbcenc__keys" kindref="compound">br_aes_pwr8_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a82b227722441d05497be698d995deafe" kindref="member">br_aes_pwr8_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__cbcdec__keys" kindref="compound">br_aes_pwr8_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1a956e6a74a6ac28bc7ec08572c5a51da9" kindref="member">br_aes_pwr8_ctr_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__ctr__keys" kindref="compound">br_aes_pwr8_ctr_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a40ca400a049e173bdd268eba74daeea2" kindref="member">br_aes_pwr8_ctrcbc_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1af3bdc75f08af6ca27c2a0de92f1f1e26" kindref="member">br_aes_pwr8_ctrcbc_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a296e914f8eb1ca9905c50db86e0be6aa" kindref="member">br_aes_pwr8_ctrcbc_ctr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a0190e905c9c87e7c5c5ee20fd603911e" kindref="member">br_aes_pwr8_ctrcbc_mac</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cbcmac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="bearssl__block_8h_1a26aec06f12b9bb2ea16b3b0e2493c38a" kindref="member">br_aes_pwr8_cbcenc_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="bearssl__block_8h_1a2b0c52b9b1233ef05b2ce62b45039dc1" kindref="member">br_aes_pwr8_cbcdec_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*<ref refid="bearssl__block_8h_1aa12292c2a6224134f0dd099665342616" kindref="member">br_aes_pwr8_ctr_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*<ref refid="bearssl__block_8h_1a74a080a5a1fda0fcf4c7935ef81fccee" kindref="member">br_aes_pwr8_ctrcbc_get_vtable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158" refid="unionbr__aes__gen__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__big__cbcenc__keys" kindref="compound">br_aes_big_cbcenc_keys</ref><sp/>c_big;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__small__cbcenc__keys" kindref="compound">br_aes_small_cbcenc_keys</ref><sp/>c_small;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct__cbcenc__keys" kindref="compound">br_aes_ct_cbcenc_keys</ref><sp/>c_ct;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct64__cbcenc__keys" kindref="compound">br_aes_ct64_cbcenc_keys</ref><sp/>c_ct64;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__x86ni__cbcenc__keys" kindref="compound">br_aes_x86ni_cbcenc_keys</ref><sp/>c_x86ni;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__pwr8__cbcenc__keys" kindref="compound">br_aes_pwr8_cbcenc_keys</ref><sp/>c_pwr8;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}<sp/><ref refid="unionbr__aes__gen__cbcenc__keys" kindref="compound">br_aes_gen_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172" refid="unionbr__aes__gen__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__big__cbcdec__keys" kindref="compound">br_aes_big_cbcdec_keys</ref><sp/>c_big;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__small__cbcdec__keys" kindref="compound">br_aes_small_cbcdec_keys</ref><sp/>c_small;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct__cbcdec__keys" kindref="compound">br_aes_ct_cbcdec_keys</ref><sp/>c_ct;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct64__cbcdec__keys" kindref="compound">br_aes_ct64_cbcdec_keys</ref><sp/>c_ct64;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__x86ni__cbcdec__keys" kindref="compound">br_aes_x86ni_cbcdec_keys</ref><sp/>c_x86ni;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__pwr8__cbcdec__keys" kindref="compound">br_aes_pwr8_cbcdec_keys</ref><sp/>c_pwr8;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal">}<sp/><ref refid="unionbr__aes__gen__cbcdec__keys" kindref="compound">br_aes_gen_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186" refid="unionbr__aes__gen__ctr__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctr__class__" kindref="compound">br_block_ctr_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__big__ctr__keys" kindref="compound">br_aes_big_ctr_keys</ref><sp/>c_big;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__small__ctr__keys" kindref="compound">br_aes_small_ctr_keys</ref><sp/>c_small;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct__ctr__keys" kindref="compound">br_aes_ct_ctr_keys</ref><sp/>c_ct;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct64__ctr__keys" kindref="compound">br_aes_ct64_ctr_keys</ref><sp/>c_ct64;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__x86ni__ctr__keys" kindref="compound">br_aes_x86ni_ctr_keys</ref><sp/>c_x86ni;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__pwr8__ctr__keys" kindref="compound">br_aes_pwr8_ctr_keys</ref><sp/>c_pwr8;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">}<sp/><ref refid="unionbr__aes__gen__ctr__keys" kindref="compound">br_aes_gen_ctr_keys</ref>;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200" refid="unionbr__aes__gen__ctrcbc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__ctrcbc__class__" kindref="compound">br_block_ctrcbc_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__big__ctrcbc__keys" kindref="compound">br_aes_big_ctrcbc_keys</ref><sp/>c_big;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__small__ctrcbc__keys" kindref="compound">br_aes_small_ctrcbc_keys</ref><sp/>c_small;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct__ctrcbc__keys" kindref="compound">br_aes_ct_ctrcbc_keys</ref><sp/>c_ct;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__ct64__ctrcbc__keys" kindref="compound">br_aes_ct64_ctrcbc_keys</ref><sp/>c_ct64;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__x86ni__ctrcbc__keys" kindref="compound">br_aes_x86ni_ctrcbc_keys</ref><sp/>c_x86ni;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__aes__pwr8__ctrcbc__keys" kindref="compound">br_aes_pwr8_ctrcbc_keys</ref><sp/>c_pwr8;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">}<sp/><ref refid="unionbr__aes__gen__ctrcbc__keys" kindref="compound">br_aes_gen_ctrcbc_keys</ref>;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/>*<sp/>Traditional,<sp/>table-based<sp/>implementation<sp/>for<sp/>DES/3DES.<sp/>Since<sp/>tables<sp/>are</highlight></codeline>
<codeline lineno="2212"><highlight class="comment"><sp/>*<sp/>used,<sp/>cache-timing<sp/>attacks<sp/>are<sp/>conceptually<sp/>possible.</highlight></codeline>
<codeline lineno="2213"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216" refid="bearssl__block_8h_1a90d145f2bf09be81a7e08661d897fe86" refkind="member"><highlight class="preprocessor">#define<sp/>br_des_tab_BLOCK_SIZE<sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224" refid="structbr__des__tab__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2226" refid="structbr__des__tab__cbcenc__keys_1a3697bd9d96b0a24bd8f932858e319b6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__des__tab__cbcenc__keys_1a3697bd9d96b0a24bd8f932858e319b6a" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[96];</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal">}<sp/><ref refid="structbr__des__tab__cbcenc__keys" kindref="compound">br_des_tab_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239" refid="structbr__des__tab__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2241" refid="structbr__des__tab__cbcdec__keys_1a9b6ad5c87e21163110486fee3336542d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__des__tab__cbcdec__keys_1a9b6ad5c87e21163110486fee3336542d" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[96];</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}<sp/><ref refid="structbr__des__tab__cbcdec__keys" kindref="compound">br_des_tab_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1aaec37d14d412cd0f4062030f443298af" kindref="member">br_des_tab_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1aa0746f9c5da939de4061e7fa959fd764" kindref="member">br_des_tab_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a5d11cc6d128b9600b070efb6bec245a6" kindref="member">br_des_tab_cbcenc_init</ref>(<ref refid="structbr__des__tab__cbcenc__keys" kindref="compound">br_des_tab_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a1ca4dfd6ca40e2e116a268858b1db01e" kindref="member">br_des_tab_cbcdec_init</ref>(<ref refid="structbr__des__tab__cbcdec__keys" kindref="compound">br_des_tab_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a99e92c49ba8e1e776b06e283b5c1d935" kindref="member">br_des_tab_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__des__tab__cbcenc__keys" kindref="compound">br_des_tab_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a12c3743d89b2efb75d49d60880b28772" kindref="member">br_des_tab_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__des__tab__cbcdec__keys" kindref="compound">br_des_tab_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2303"><highlight class="comment"><sp/>*<sp/>Constant-time<sp/>implementation<sp/>for<sp/>DES/3DES.<sp/>It<sp/>is<sp/>substantially<sp/>slower</highlight></codeline>
<codeline lineno="2304"><highlight class="comment"><sp/>*<sp/>(by<sp/>a<sp/>factor<sp/>of<sp/>about<sp/>4x),<sp/>but<sp/>also<sp/>immune<sp/>to<sp/>cache-timing<sp/>attacks.</highlight></codeline>
<codeline lineno="2305"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308" refid="bearssl__block_8h_1a6efec390f30746dd8f7c0b22cf9bc572" refkind="member"><highlight class="preprocessor">#define<sp/>br_des_ct_BLOCK_SIZE<sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316" refid="structbr__des__ct__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2318" refid="structbr__des__ct__cbcenc__keys_1a037c84bcddac3d8ab80aabd8e27a1481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*<ref refid="structbr__des__ct__cbcenc__keys_1a037c84bcddac3d8ab80aabd8e27a1481" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[96];</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal">}<sp/><ref refid="structbr__des__ct__cbcenc__keys" kindref="compound">br_des_ct_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331" refid="structbr__des__ct__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2333" refid="structbr__des__ct__cbcdec__keys_1a3fc3b0c828f8700877bf515625061492" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*<ref refid="structbr__des__ct__cbcdec__keys_1a3fc3b0c828f8700877bf515625061492" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>skey[96];</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_rounds;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal">}<sp/><ref refid="structbr__des__ct__cbcdec__keys" kindref="compound">br_des_ct_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/><ref refid="bearssl__block_8h_1a446dfc065b94fb18994038ec0f8bdd79" kindref="member">br_des_ct_cbcenc_vtable</ref>;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/><ref refid="bearssl__block_8h_1a5b93bd2bfe8e517bcc0d96b8dbcecfca" kindref="member">br_des_ct_cbcdec_vtable</ref>;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a59c99a00b0d5bf4192c1ee6caab8467b" kindref="member">br_des_ct_cbcenc_init</ref>(<ref refid="structbr__des__ct__cbcenc__keys" kindref="compound">br_des_ct_cbcenc_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a5bfde742b556f05dd2143643a325f31b" kindref="member">br_des_ct_cbcdec_init</ref>(<ref refid="structbr__des__ct__cbcdec__keys" kindref="compound">br_des_ct_cbcdec_keys</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1adc6a64bfa09c4919a03604c999cba5ae" kindref="member">br_des_ct_cbcenc_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__des__ct__cbcenc__keys" kindref="compound">br_des_ct_cbcenc_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a1a3e13b307fb3901ccd0876b939f497f" kindref="member">br_des_ct_cbcdec_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__des__ct__cbcdec__keys" kindref="compound">br_des_ct_cbcdec_keys</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2395"><highlight class="comment"><sp/>*<sp/>These<sp/>structures<sp/>are<sp/>large<sp/>enough<sp/>to<sp/>accommodate<sp/>subkeys<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="2396"><highlight class="comment"><sp/>*<sp/>DES/3DES<sp/>implementations.</highlight></codeline>
<codeline lineno="2397"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403" refid="unionbr__des__gen__cbcenc__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcenc__class__" kindref="compound">br_block_cbcenc_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__des__tab__cbcenc__keys" kindref="compound">br_des_tab_cbcenc_keys</ref><sp/>tab;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__des__ct__cbcenc__keys" kindref="compound">br_des_ct_cbcenc_keys</ref><sp/>ct;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal">}<sp/><ref refid="unionbr__des__gen__cbcenc__keys" kindref="compound">br_des_gen_cbcenc_keys</ref>;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413" refid="unionbr__des__gen__cbcdec__keys" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__block__cbcdec__class__" kindref="compound">br_block_cbcdec_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__des__tab__cbcdec__keys" kindref="compound">br_des_tab_cbcdec_keys</ref><sp/>c_tab;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__des__ct__cbcdec__keys" kindref="compound">br_des_ct_cbcdec_keys</ref><sp/>c_ct;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal">}<sp/><ref refid="unionbr__des__gen__cbcdec__keys" kindref="compound">br_des_gen_cbcdec_keys</ref>;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442" refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1a5bb19b9c2880857fd30246a9932cca94" kindref="member">br_chacha20_ct_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__block_8h_1a613995edc096fb28d0493ae98c16cbc0" kindref="member">br_chacha20_sse2_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,<sp/>uint32_t<sp/>cc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref><sp/><ref refid="bearssl__block_8h_1aec92d1ee7450cf0859a9c8a949764376" kindref="member">br_chacha20_sse2_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513" refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aad_len,</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tag,<sp/><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref><sp/>ichacha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encrypt);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a1fe2626ce342f9430d198d73c463e47c" kindref="member">br_poly1305_ctmul_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aad_len,</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tag,<sp/><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref><sp/>ichacha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encrypt);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a369829d6c7729cddbb454ac5290537ae" kindref="member">br_poly1305_ctmul32_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aad_len,</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tag,<sp/><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref><sp/>ichacha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encrypt);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1ac1f0ec04e10dacf4d0ecd5383b09ef07" kindref="member">br_poly1305_i15_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aad_len,</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tag,<sp/><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref><sp/>ichacha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encrypt);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__block_8h_1a7e37eb1c81fd560222c9aed6e617159d" kindref="member">br_poly1305_ctmulq_run</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iv,</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*aad,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aad_len,</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tag,<sp/><ref refid="bearssl__block_8h_1a274de0985f8bb5b252a37526a9591826" kindref="member">br_chacha20_run</ref><sp/>ichacha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>encrypt);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><ref refid="bearssl__block_8h_1a657418e5ad2f2667390885239ba0524d" kindref="member">br_poly1305_run</ref><sp/><ref refid="bearssl__block_8h_1a0c2b86940f73e4db3894709494080b97" kindref="member">br_poly1305_ctmulq_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/docs/lib/bearssl/bearssl_block.h"/>
  </compounddef>
</doxygen>
