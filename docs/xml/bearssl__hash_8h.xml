<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bearssl__hash_8h" kind="file" language="C++">
    <compoundname>bearssl_hash.h</compoundname>
    <includes refid="stddef_8h" local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includedby refid="bearssl__rand_8h" local="yes">/docs/lib/bearssl/bearssl_rand.h</includedby>
    <includedby refid="bearssl__rsa_8h" local="yes">/docs/lib/bearssl/bearssl_rsa.h</includedby>
    <includedby refid="bearssl__x509_8h" local="yes">/docs/lib/bearssl/bearssl_x509.h</includedby>
    <includedby refid="inner_8h" local="yes">/docs/lib/bearssl/inner.h</includedby>
    <incdepgraph>
      <node id="765">
        <label>stddef.h</label>
        <link refid="stddef_8h_source"/>
        <childnode refid="766" relation="include">
        </childnode>
      </node>
      <node id="768">
        <label>stdint_.h</label>
      </node>
      <node id="766">
        <label>stddef_.h</label>
      </node>
      <node id="769">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="770" relation="include">
        </childnode>
      </node>
      <node id="764">
        <label>/docs/lib/bearssl/bearssl_hash.h</label>
        <link refid="bearssl__hash_8h"/>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="769" relation="include">
        </childnode>
      </node>
      <node id="767">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="768" relation="include">
        </childnode>
      </node>
      <node id="770">
        <label>string_.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="775">
        <label>/docs/lib/bearssl/bearssl_rsa.h</label>
        <link refid="bearssl__rsa_8h"/>
        <childnode refid="774" relation="include">
        </childnode>
      </node>
      <node id="772">
        <label>/docs/lib/bearssl/bearssl_rand.h</label>
        <link refid="bearssl__rand_8h"/>
        <childnode refid="773" relation="include">
        </childnode>
      </node>
      <node id="774">
        <label>/docs/lib/bearssl/bearssl_x509.h</label>
        <link refid="bearssl__x509_8h"/>
      </node>
      <node id="776">
        <label>/docs/lib/bearssl/inner.h</label>
        <link refid="inner_8h_source"/>
      </node>
      <node id="773">
        <label>/docs/lib/bearssl/bearssl_ec.h</label>
        <link refid="bearssl__ec_8h"/>
        <childnode refid="774" relation="include">
        </childnode>
      </node>
      <node id="771">
        <label>/docs/lib/bearssl/bearssl_hash.h</label>
        <link refid="bearssl__hash_8h"/>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="774" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structbr__hash__class__" prot="public">br_hash_class_</innerclass>
    <innerclass refid="structbr__md5__context" prot="public">br_md5_context</innerclass>
    <innerclass refid="structbr__sha1__context" prot="public">br_sha1_context</innerclass>
    <innerclass refid="structbr__sha224__context" prot="public">br_sha224_context</innerclass>
    <innerclass refid="structbr__sha384__context" prot="public">br_sha384_context</innerclass>
    <innerclass refid="structbr__md5sha1__context" prot="public">br_md5sha1_context</innerclass>
    <innerclass refid="unionbr__hash__compat__context" prot="public">br_hash_compat_context</innerclass>
    <innerclass refid="structbr__multihash__context" prot="public">br_multihash_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bearssl__hash_8h_1a32a85e0d1ab12cdff747a18e364232d2" prot="public" static="no">
        <name>BR_HASHDESC_ID</name>
        <param><defname>id</defname></param>
        <initializer>((uint32_t)(id) &lt;&lt; BR_HASHDESC_ID_OFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="332" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1aa9b9432202f52577aa4060603ba6befe" prot="public" static="no">
        <name>BR_HASHDESC_ID_OFF</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="333" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1aaef7ff9855edd30445f9e1cce5493a01" prot="public" static="no">
        <name>BR_HASHDESC_ID_MASK</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="334" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1ace4453e1447ee1d3c44295d7f8a6956b" prot="public" static="no">
        <name>BR_HASHDESC_OUT</name>
        <param><defname>size</defname></param>
        <initializer>((uint32_t)(size) &lt;&lt; BR_HASHDESC_OUT_OFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="336" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1ad0834ff2fac74346b071c8db7d21f5bb" prot="public" static="no">
        <name>BR_HASHDESC_OUT_OFF</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="337" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a1f9ba92cbff89e883002cd49ea9725dc" prot="public" static="no">
        <name>BR_HASHDESC_OUT_MASK</name>
        <initializer>0x7F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="338" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a24cc8f2abe9985f3763e8aea27f41f87" prot="public" static="no">
        <name>BR_HASHDESC_STATE</name>
        <param><defname>size</defname></param>
        <initializer>((uint32_t)(size) &lt;&lt; BR_HASHDESC_STATE_OFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="340" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a3e7ffe2b45e31f0d35e24f131b75eedc" prot="public" static="no">
        <name>BR_HASHDESC_STATE_OFF</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="341" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1ad1dc68e52f272ae3b0def0fbd8aeeea0" prot="public" static="no">
        <name>BR_HASHDESC_STATE_MASK</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="342" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a649ecbca14d3564bb47db56d870128ef" prot="public" static="no">
        <name>BR_HASHDESC_LBLEN</name>
        <param><defname>ls</defname></param>
        <initializer>((uint32_t)(ls) &lt;&lt; BR_HASHDESC_LBLEN_OFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="344" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1adf6626f9dc3f03a1ac6649d433c58c37" prot="public" static="no">
        <name>BR_HASHDESC_LBLEN_OFF</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="345" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a0db9be1bde2e4f84f46ce93ec87e5151" prot="public" static="no">
        <name>BR_HASHDESC_LBLEN_MASK</name>
        <initializer>0x0F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="346" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a8e94842c7e99c52bfe53081473e33fc5" prot="public" static="no">
        <name>BR_HASHDESC_MD_PADDING</name>
        <initializer>((uint32_t)1 &lt;&lt; 28)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="348" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a3a741ec6b4e0f273d4b264c31641e47f" prot="public" static="no">
        <name>BR_HASHDESC_MD_PADDING_128</name>
        <initializer>((uint32_t)1 &lt;&lt; 29)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="349" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a56c80c866e4afc127c78905fd4279770" prot="public" static="no">
        <name>BR_HASHDESC_MD_PADDING_BE</name>
        <initializer>((uint32_t)1 &lt;&lt; 30)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="350" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a42c99336cf302182bbcc28d840408de3" prot="public" static="no">
        <name>br_md5_ID</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbolic identifier for MD5. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="371" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1adbab9a6322c4af56d4c7d9557a33fa55" prot="public" static="no">
        <name>br_md5_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>MD5 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="376" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1acebafe1b4ea9c302fdaf4a215eb0fb81" prot="public" static="no">
        <name>br_sha1_ID</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Symbolic identifier for SHA-1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="466" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1af2add9a9e1d2cb48e37c763beeed5a43" prot="public" static="no">
        <name>br_sha1_SIZE</name>
        <initializer>20</initializer>
        <briefdescription>
<para>SHA-1 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="471" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1af24c0a2a7ac5713391069fb7ccc01996" prot="public" static="no">
        <name>br_sha224_ID</name>
        <initializer>3</initializer>
        <briefdescription>
<para>Symbolic identifier for SHA-224. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="561" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a39448cd1ec009190541e1be5f1c34092" prot="public" static="no">
        <name>br_sha224_SIZE</name>
        <initializer>28</initializer>
        <briefdescription>
<para>SHA-224 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="566" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a74d79bb00b490778be147e3e40569fee" prot="public" static="no">
        <name>br_sha256_ID</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Symbolic identifier for SHA-256. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="657" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1aa8f082193cac7771f3872f1b7aa97457" prot="public" static="no">
        <name>br_sha256_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>SHA-256 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="662" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1ab216c1ab29f9a31e1a9e73a4dbab1bf6" prot="public" static="no">
        <name>br_sha256_update</name>
        <initializer><ref refid="bearssl__hash_8h_1a7310e2a905f3c0ce90a0b1aa88f89475" kindref="member">br_sha224_update</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="710" column="10" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a498649535d3b72aed7e481bcb2cbc7c1" prot="public" static="no">
        <name>br_sha256_state</name>
        <initializer><ref refid="bearssl__hash_8h_1a40f1486516809dcef586f368b02216e0" kindref="member">br_sha224_state</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="742" column="10" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a07d09a601954a750f26fa7706cdd00c5" prot="public" static="no">
        <name>br_sha256_set_state</name>
        <initializer><ref refid="bearssl__hash_8h_1af543b1782f1d39f4557dfac93b1e311c" kindref="member">br_sha224_set_state</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="758" column="10" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a0e2217e85194284521a51a68a34c49c7" prot="public" static="no">
        <name>br_sha384_ID</name>
        <initializer>5</initializer>
        <briefdescription>
<para>Symbolic identifier for SHA-384. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="764" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1ac144bb346fc8d413a07f07eab627e74f" prot="public" static="no">
        <name>br_sha384_SIZE</name>
        <initializer>48</initializer>
        <briefdescription>
<para>SHA-384 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="769" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a96479080f06dc9a893844406d2cff822" prot="public" static="no">
        <name>br_sha512_ID</name>
        <initializer>6</initializer>
        <briefdescription>
<para>Symbolic identifier for SHA-512. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="860" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a4d2de91522fa3e8008bcc326c342c89b" prot="public" static="no">
        <name>br_sha512_SIZE</name>
        <initializer>64</initializer>
        <briefdescription>
<para>SHA-512 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="865" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a7d7064bf98efc95167602e221e3a6c1e" prot="public" static="no">
        <name>br_sha512_update</name>
        <initializer><ref refid="bearssl__hash_8h_1a4d8322810db3c53943881248a7fed729" kindref="member">br_sha384_update</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="913" column="10" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a41438d1d8633805d7be2526d2d7c6d14" prot="public" static="no">
        <name>br_sha512_state</name>
        <initializer><ref refid="bearssl__hash_8h_1a5cb31e87af33ab51de2982a36351efc5" kindref="member">br_sha384_state</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="945" column="10" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a37e689968b11d5c709f01c03f5abc1ef" prot="public" static="no">
        <name>br_sha512_set_state</name>
        <initializer><ref refid="bearssl__hash_8h_1afc4fd7a33f3918b5e860e757d1e75d71" kindref="member">br_sha384_set_state</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="961" column="10" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1a863c89b0fafda39d5d8962b19b737f4e" prot="public" static="no">
        <name>br_md5sha1_ID</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Symbolic identifier for MD5+SHA-1. </para>        </briefdescription>
        <detaileddescription>
<para>MD5+SHA-1 is the concatenation of MD5 and SHA-1, computed over the same input. It is not one of the functions identified in TLS, so we give it a symbolic identifier of value 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="977" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__hash_8h_1aebf08f240af1bf6b3bb28311a53d3833" prot="public" static="no">
        <name>br_md5sha1_SIZE</name>
        <initializer>36</initializer>
        <briefdescription>
<para>MD5+SHA-1 output size (in bytes). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="982" column="9" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="982" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" prot="public" static="no">
        <type>struct <ref refid="structbr__hash__class__" kindref="compound">br_hash_class_</ref></type>
        <definition>typedef struct br_hash_class_ br_hash_class</definition>
        <argsstring></argsstring>
        <name>br_hash_class</name>
        <briefdescription>
<para>Class type for hash function implementations. </para>        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>br_hash_class</computeroutput> instance references the methods implementing a hash function. Constant instances of this structure are defined for each implemented hash function. Such instances are also called &quot;vtables&quot;.</para><para>Vtables are used to support object-oriented programming, as described on <ulink url="https://www.bearssl.org/oop.html">the BearSSL Web site</ulink>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="412" column="1" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__hash_8h_1a884f78fd8a40e739916601b2213b59e6" prot="public" static="no">
        <type><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref></type>
        <definition>typedef br_sha224_context br_sha256_context</definition>
        <argsstring></argsstring>
        <name>br_sha256_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="683" column="1" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__hash_8h_1ab2d7656d68951c9340e41f64403685de" prot="public" static="no">
        <type><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref></type>
        <definition>typedef br_sha384_context br_sha512_context</definition>
        <argsstring></argsstring>
        <name>br_sha512_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="886" column="1" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* br_ghash) (void *y, const void *h, const void *data, size_t len)</definition>
        <argsstring>)(void *y, const void *h, const void *data, size_t len)</argsstring>
        <name>br_ghash</name>
        <briefdescription>
<para>Type for a GHASH implementation. </para>        </briefdescription>
        <detaileddescription>
<para>GHASH is a sort of keyed hash meant to be used to implement GCM in combination with a block cipher (with 16-byte blocks).</para><para>The <computeroutput>y</computeroutput> array has length 16 bytes and is used for input and output; in a complete GHASH run, it starts with an all-zero value. <computeroutput>h</computeroutput> is a 16-byte value that serves as key (it is derived from the encryption key in GCM, using the block cipher). The data length (<computeroutput>len</computeroutput>) is expressed in bytes. The <computeroutput>y</computeroutput> array is updated.</para><para>If the data length is not a multiple of 16, then the data is implicitly padded with zeros up to the next multiple of 16. Thus, when using GHASH in GCM, this method may be called twice, for the associated data and for the ciphertext, respectively; the zero-padding implements exactly the GCM rules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the GHASH key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data (may be <computeroutput>NULL</computeroutput> if <computeroutput>len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1239" column="1" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="1239" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bearssl__hash_8h_1ac94ba2258a7b845b3b103f231d96bfdc" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_md5_vtable</definition>
        <argsstring></argsstring>
        <name>br_md5_vtable</name>
        <briefdescription>
<para>Constant vtable for MD5. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__hash_8h_1a7bfc9c94f4553ed9ab1d2bdda81db9db" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_sha1_vtable</definition>
        <argsstring></argsstring>
        <name>br_sha1_vtable</name>
        <briefdescription>
<para>Constant vtable for SHA-1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__hash_8h_1a3e9da33567b629168106d78ad5331de2" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_sha224_vtable</definition>
        <argsstring></argsstring>
        <name>br_sha224_vtable</name>
        <briefdescription>
<para>Constant vtable for SHA-224. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__hash_8h_1a927ac5204d96fdffb96495ea893123fe" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_sha256_vtable</definition>
        <argsstring></argsstring>
        <name>br_sha256_vtable</name>
        <briefdescription>
<para>Constant vtable for SHA-256. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__hash_8h_1a84ad19accb85ad8b0776dd667d538f42" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_sha384_vtable</definition>
        <argsstring></argsstring>
        <name>br_sha384_vtable</name>
        <briefdescription>
<para>Constant vtable for SHA-384. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="774" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__hash_8h_1a982a18d69d7520a63a4d25dee2c9aee3" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_sha512_vtable</definition>
        <argsstring></argsstring>
        <name>br_sha512_vtable</name>
        <briefdescription>
<para>Constant vtable for SHA-512. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="870" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__hash_8h_1ae650e30ac0b2ed86921bc5d562d232f6" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref></type>
        <definition>const br_hash_class br_md5sha1_vtable</definition>
        <argsstring></argsstring>
        <name>br_md5sha1_vtable</name>
        <briefdescription>
<para>Constant vtable for MD5+SHA-1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="987" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bearssl__hash_8h_1a327516bdef675d61ab15b809cc42536a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5_init</definition>
        <argsstring>(br_md5_context *ctx)</argsstring>
        <name>br_md5_init</name>
        <param>
          <type><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>MD5 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new MD5 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1af40e3352df8dd2b09137bff113d501eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5_update</definition>
        <argsstring>(br_md5_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_md5_update</name>
        <param>
          <type><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Inject some data bytes in a running MD5 computation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided context is updated with some data bytes. If the number of bytes (<computeroutput>len</computeroutput>) is zero, then the data pointer (<computeroutput>data</computeroutput>) is ignored and may be <computeroutput>NULL</computeroutput>, and this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the injected data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>injected data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a6066a47965a7c2c31684df53f304799b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5_out</definition>
        <argsstring>(const br_md5_context *ctx, void *out)</argsstring>
        <name>br_md5_out</name>
        <param>
          <type>const <ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute MD5 output. </para>        </briefdescription>
        <detaileddescription>
<para>The MD5 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a801d0c0dbdb788b96e96ea69476b9887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t br_md5_state</definition>
        <argsstring>(const br_md5_context *ctx, void *out)</argsstring>
        <name>br_md5_state</name>
        <param>
          <type>const <ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save MD5 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for MD5 (output of the last internal block processing) is written in the buffer pointed to by <computeroutput>out</computeroutput>. The number of bytes injected since the last initialisation or reset call is returned. The context is not modified.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the running state. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the injected total byte length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1aee877ce9b1785b36a002f1aea8e01f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5_set_state</definition>
        <argsstring>(br_md5_context *ctx, const void *stb, uint64_t count)</argsstring>
        <name>br_md5_set_state</name>
        <param>
          <type><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>stb</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Restore MD5 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for MD5 is set to the provided values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stb</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer for the running state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the injected total byte length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a2384f9e51f7e67f875140649870c8075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha1_init</definition>
        <argsstring>(br_sha1_context *ctx)</argsstring>
        <name>br_sha1_init</name>
        <param>
          <type><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>SHA-1 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new SHA-1 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1ad5bee10b391c9c1cf647a98a6120c732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha1_update</definition>
        <argsstring>(br_sha1_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_sha1_update</name>
        <param>
          <type><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Inject some data bytes in a running SHA-1 computation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided context is updated with some data bytes. If the number of bytes (<computeroutput>len</computeroutput>) is zero, then the data pointer (<computeroutput>data</computeroutput>) is ignored and may be <computeroutput>NULL</computeroutput>, and this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the injected data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>injected data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a47412559bf48abfa7666d8ba6f8c678c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha1_out</definition>
        <argsstring>(const br_sha1_context *ctx, void *out)</argsstring>
        <name>br_sha1_out</name>
        <param>
          <type>const <ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute SHA-1 output. </para>        </briefdescription>
        <detaileddescription>
<para>The SHA-1 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1af2669b87984d1aead0632d01706b704f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t br_sha1_state</definition>
        <argsstring>(const br_sha1_context *ctx, void *out)</argsstring>
        <name>br_sha1_state</name>
        <param>
          <type>const <ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save SHA-1 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for SHA-1 (output of the last internal block processing) is written in the buffer pointed to by <computeroutput>out</computeroutput>. The number of bytes injected since the last initialisation or reset call is returned. The context is not modified.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the running state. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the injected total byte length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a4e3514683f72f8803ed5b41a4e1eda24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha1_set_state</definition>
        <argsstring>(br_sha1_context *ctx, const void *stb, uint64_t count)</argsstring>
        <name>br_sha1_set_state</name>
        <param>
          <type><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>stb</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Restore SHA-1 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for SHA-1 is set to the provided values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stb</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer for the running state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the injected total byte length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a91ece438a9fc80dc3b456aef3df7781e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha224_init</definition>
        <argsstring>(br_sha224_context *ctx)</argsstring>
        <name>br_sha224_init</name>
        <param>
          <type><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>SHA-224 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new SHA-224 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a7310e2a905f3c0ce90a0b1aa88f89475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha224_update</definition>
        <argsstring>(br_sha224_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_sha224_update</name>
        <param>
          <type><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Inject some data bytes in a running SHA-224 computation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided context is updated with some data bytes. If the number of bytes (<computeroutput>len</computeroutput>) is zero, then the data pointer (<computeroutput>data</computeroutput>) is ignored and may be <computeroutput>NULL</computeroutput>, and this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the injected data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>injected data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1af53f8c444f14191383f9f0b22e34e792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha224_out</definition>
        <argsstring>(const br_sha224_context *ctx, void *out)</argsstring>
        <name>br_sha224_out</name>
        <param>
          <type>const <ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute SHA-224 output. </para>        </briefdescription>
        <detaileddescription>
<para>The SHA-224 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a40f1486516809dcef586f368b02216e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t br_sha224_state</definition>
        <argsstring>(const br_sha224_context *ctx, void *out)</argsstring>
        <name>br_sha224_state</name>
        <param>
          <type>const <ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save SHA-224 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for SHA-224 (output of the last internal block processing) is written in the buffer pointed to by <computeroutput>out</computeroutput>. The number of bytes injected since the last initialisation or reset call is returned. The context is not modified.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the running state. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the injected total byte length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1af543b1782f1d39f4557dfac93b1e311c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha224_set_state</definition>
        <argsstring>(br_sha224_context *ctx, const void *stb, uint64_t count)</argsstring>
        <name>br_sha224_set_state</name>
        <param>
          <type><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>stb</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Restore SHA-224 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for SHA-224 is set to the provided values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stb</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer for the running state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the injected total byte length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a949408045ab075839c699022f9f68a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha256_init</definition>
        <argsstring>(br_sha256_context *ctx)</argsstring>
        <name>br_sha256_init</name>
        <param>
          <type><ref refid="structbr__sha224__context" kindref="compound">br_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>SHA-256 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new SHA-256 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a68dcbfd55a35576fc8e4aecbf476fd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha256_out</definition>
        <argsstring>(const br_sha256_context *ctx, void *out)</argsstring>
        <name>br_sha256_out</name>
        <param>
          <type>const <ref refid="structbr__sha224__context" kindref="compound">br_sha256_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute SHA-256 output. </para>        </briefdescription>
        <detaileddescription>
<para>The SHA-256 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="725" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a2596f734fa0da9e13f11345dafec616c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha384_init</definition>
        <argsstring>(br_sha384_context *ctx)</argsstring>
        <name>br_sha384_init</name>
        <param>
          <type><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>SHA-384 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new SHA-384 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a4d8322810db3c53943881248a7fed729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha384_update</definition>
        <argsstring>(br_sha384_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_sha384_update</name>
        <param>
          <type><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Inject some data bytes in a running SHA-384 computation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided context is updated with some data bytes. If the number of bytes (<computeroutput>len</computeroutput>) is zero, then the data pointer (<computeroutput>data</computeroutput>) is ignored and may be <computeroutput>NULL</computeroutput>, and this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the injected data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>injected data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a92143866501f0941ce3546033d9ca7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha384_out</definition>
        <argsstring>(const br_sha384_context *ctx, void *out)</argsstring>
        <name>br_sha384_out</name>
        <param>
          <type>const <ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute SHA-384 output. </para>        </briefdescription>
        <detaileddescription>
<para>The SHA-384 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a5cb31e87af33ab51de2982a36351efc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t br_sha384_state</definition>
        <argsstring>(const br_sha384_context *ctx, void *out)</argsstring>
        <name>br_sha384_state</name>
        <param>
          <type>const <ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save SHA-384 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for SHA-384 (output of the last internal block processing) is written in the buffer pointed to by <computeroutput>out</computeroutput>. The number of bytes injected since the last initialisation or reset call is returned. The context is not modified.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the running state. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the injected total byte length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1afc4fd7a33f3918b5e860e757d1e75d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha384_set_state</definition>
        <argsstring>(br_sha384_context *ctx, const void *stb, uint64_t count)</argsstring>
        <name>br_sha384_set_state</name>
        <param>
          <type><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>stb</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Restore SHA-384 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for SHA-384 is set to the provided values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stb</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer for the running state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the injected total byte length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a87d16f76a966afeda00bbf58a64e6f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha512_init</definition>
        <argsstring>(br_sha512_context *ctx)</argsstring>
        <name>br_sha512_init</name>
        <param>
          <type><ref refid="structbr__sha384__context" kindref="compound">br_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>SHA-512 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new SHA-512 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1add7e62e41a02736efea20b89c63902b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_sha512_out</definition>
        <argsstring>(const br_sha512_context *ctx, void *out)</argsstring>
        <name>br_sha512_out</name>
        <param>
          <type>const <ref refid="structbr__sha384__context" kindref="compound">br_sha512_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute SHA-512 output. </para>        </briefdescription>
        <detaileddescription>
<para>The SHA-512 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1aeebb882c0a9fda2ee5e9f9a678b58f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5sha1_init</definition>
        <argsstring>(br_md5sha1_context *ctx)</argsstring>
        <name>br_md5sha1_init</name>
        <param>
          <type><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>MD5+SHA-1 context initialisation. </para>        </briefdescription>
        <detaileddescription>
<para>This function initialises or resets a context for a new SHA-512 computation. It also sets the vtable pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1016" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a3719e9948e1ecf5cf7d2c042aab07a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5sha1_update</definition>
        <argsstring>(br_md5sha1_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_md5sha1_update</name>
        <param>
          <type><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Inject some data bytes in a running MD5+SHA-1 computation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided context is updated with some data bytes. If the number of bytes (<computeroutput>len</computeroutput>) is zero, then the data pointer (<computeroutput>data</computeroutput>) is ignored and may be <computeroutput>NULL</computeroutput>, and this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the injected data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>injected data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a9d3a681efa08d6adca5a0902ad5b68d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5sha1_out</definition>
        <argsstring>(const br_md5sha1_context *ctx, void *out)</argsstring>
        <name>br_md5sha1_out</name>
        <param>
          <type>const <ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute MD5+SHA-1 output. </para>        </briefdescription>
        <detaileddescription>
<para>The MD5+SHA-1 output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>out</computeroutput>. The context itself is not modified, so extra bytes may be injected afterwards to continue that computation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1043" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a0358c22dfed3054ba81d524bed53027a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t br_md5sha1_state</definition>
        <argsstring>(const br_md5sha1_context *ctx, void *out)</argsstring>
        <name>br_md5sha1_state</name>
        <param>
          <type>const <ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Save MD5+SHA-1 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for MD5+SHA-1 (output of the last internal block processing) is written in the buffer pointed to by <computeroutput>out</computeroutput>. The number of bytes injected since the last initialisation or reset call is returned. The context is not modified.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the running state. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the injected total byte length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1057" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a1471c410abe94e6631410023cd9e1992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_md5sha1_set_state</definition>
        <argsstring>(br_md5sha1_context *ctx, const void *stb, uint64_t count)</argsstring>
        <name>br_md5sha1_set_state</name>
        <param>
          <type><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>stb</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Restore MD5+SHA-1 running state. </para>        </briefdescription>
        <detaileddescription>
<para>The running state for MD5+SHA-1 is set to the provided values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stb</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer for the running state. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the injected total byte length. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1af9a9e454a2e69fdcfafd4c27e866b526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_multihash_zero</definition>
        <argsstring>(br_multihash_context *ctx)</argsstring>
        <name>br_multihash_zero</name>
        <param>
          <type><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Clear a multi-hasher context. </para>        </briefdescription>
        <detaileddescription>
<para>This should always be called once on a given context, <emphasis>before</emphasis> setting the implementation pointers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-hasher context. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a0382f56818e3d1f3eee88dff1859c8c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_multihash_setimpl</definition>
        <argsstring>(br_multihash_context *ctx, int id, const br_hash_class *impl)</argsstring>
        <name>br_multihash_setimpl</name>
        <param>
          <type><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Set a hash function implementation. </para>        </briefdescription>
        <detaileddescription>
<para>Implementations shall be set <emphasis>after</emphasis> clearing the context (with <computeroutput><ref refid="bearssl__hash_8h_1af9a9e454a2e69fdcfafd4c27e866b526" kindref="member">br_multihash_zero()</ref></computeroutput>) but <emphasis>before</emphasis> initialising the computation (with <computeroutput><ref refid="bearssl__hash_8h_1a18fd76f8d1c2b40169b9899127d47136" kindref="member">br_multihash_init()</ref></computeroutput>). The hash function implementation MUST be one of the standard hash functions (MD5, SHA-1, SHA-224, SHA-256, SHA-384 or SHA-512); it may also be <computeroutput>NULL</computeroutput> to remove an implementation from the multi-hasher.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-hasher context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash function symbolic identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>impl</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash function vtable, or <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1142" column="1" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="1142" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a64a9a52be8593981436ab3bee1e5c673" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
        <definition>static const br_hash_class* br_multihash_getimpl</definition>
        <argsstring>(const br_multihash_context *ctx, int id)</argsstring>
        <name>br_multihash_getimpl</name>
        <param>
          <type>const <ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a hash function implementation. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the currently configured vtable for a given hash function (by symbolic ID). If no such function was configured in the provided multi-hasher context, then this function returns <computeroutput>NULL</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-hasher context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash function symbolic identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash function vtable, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1164" column="1" bodyfile="/docs/lib/bearssl/bearssl_hash.h" bodystart="1164" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a18fd76f8d1c2b40169b9899127d47136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_multihash_init</definition>
        <argsstring>(br_multihash_context *ctx)</argsstring>
        <name>br_multihash_init</name>
        <param>
          <type><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Reset a multi-hasher context. </para>        </briefdescription>
        <detaileddescription>
<para>This function prepares the context for a new hashing computation, for all implementations configured at that point.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the multi-hasher context. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1ae9b9736423fad34dd0613fbb9b1d3149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_multihash_update</definition>
        <argsstring>(br_multihash_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_multihash_update</name>
        <param>
          <type><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Inject some data bytes in a running multi-hashing computation. </para>        </briefdescription>
        <detaileddescription>
<para>The provided context is updated with some data bytes. If the number of bytes (<computeroutput>len</computeroutput>) is zero, then the data pointer (<computeroutput>data</computeroutput>) is ignored and may be <computeroutput>NULL</computeroutput>, and this function does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the injected data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>injected data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a9631a82310a6e1248c974414c39a30fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_multihash_out</definition>
        <argsstring>(const br_multihash_context *ctx, int id, void *dst)</argsstring>
        <name>br_multihash_out</name>
        <param>
          <type>const <ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Compute a hash output from a multi-hasher. </para>        </briefdescription>
        <detaileddescription>
<para>The hash output for the concatenation of all bytes injected in the provided context since the last initialisation or reset call, is computed and written in the buffer pointed to by <computeroutput>dst</computeroutput>. The hash function to use is identified by <computeroutput>id</computeroutput> and must be one of the standard hash functions. If that hash function was indeed configured in the multi-hasher context, the corresponding hash value is written in <computeroutput>dst</computeroutput> and its length (in bytes) is returned. If the hash function was <emphasis>not</emphasis> configured, then nothing is written in <computeroutput>dst</computeroutput> and 0 is returned.</para><para>The context itself is not modified, so extra bytes may be injected afterwards to continue the hash computations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the context structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash function symbolic identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer for the hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash output length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1afa4160818f8ea8bfc5869a5625520e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ghash_ctmul</definition>
        <argsstring>(void *y, const void *h, const void *data, size_t len)</argsstring>
        <name>br_ghash_ctmul</name>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>GHASH implementation using multiplications (mixed 32-bit). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation uses multiplications of 32-bit values, with a 64-bit result. It is constant-time (if multiplications are constant-time).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the GHASH key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data (may be <computeroutput>NULL</computeroutput> if <computeroutput>len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a4d173225ad510f8757601e839ffbb82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ghash_ctmul32</definition>
        <argsstring>(void *y, const void *h, const void *data, size_t len)</argsstring>
        <name>br_ghash_ctmul32</name>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>GHASH implementation using multiplications (strict 32-bit). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation uses multiplications of 32-bit values, with a 32-bit result. It is usually somewhat slower than <computeroutput><ref refid="bearssl__hash_8h_1afa4160818f8ea8bfc5869a5625520e34" kindref="member">br_ghash_ctmul()</ref></computeroutput>, but it is expected to be faster on architectures for which the 32-bit multiplication opcode does not yield the upper 32 bits of the product. It is constant-time (if multiplications are constant-time).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the GHASH key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data (may be <computeroutput>NULL</computeroutput> if <computeroutput>len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a2fd9bd9fc9531066cec8e722a3c9de36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ghash_ctmul64</definition>
        <argsstring>(void *y, const void *h, const void *data, size_t len)</argsstring>
        <name>br_ghash_ctmul64</name>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>GHASH implementation using multiplications (64-bit). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation uses multiplications of 64-bit values, with a 64-bit result. It is constant-time (if multiplications are constant-time). It is substantially faster than <computeroutput><ref refid="bearssl__hash_8h_1afa4160818f8ea8bfc5869a5625520e34" kindref="member">br_ghash_ctmul()</ref></computeroutput> and <computeroutput><ref refid="bearssl__hash_8h_1a4d173225ad510f8757601e839ffbb82f" kindref="member">br_ghash_ctmul32()</ref></computeroutput> on most 64-bit architectures.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the GHASH key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data (may be <computeroutput>NULL</computeroutput> if <computeroutput>len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a5089d68c22f18510fddd8708c93915a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ghash_pclmul</definition>
        <argsstring>(void *y, const void *h, const void *data, size_t len)</argsstring>
        <name>br_ghash_pclmul</name>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>GHASH implementation using the <computeroutput>pclmulqdq</computeroutput> opcode (part of the AES-NI instructions). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation is available only on x86 platforms where the compiler supports the relevant intrinsic functions. Even if the compiler supports these functions, the local CPU might not support the <computeroutput>pclmulqdq</computeroutput> opcode, meaning that a call will fail with an illegal instruction exception. To safely obtain a pointer to this function when supported (or 0 otherwise), use <computeroutput><ref refid="bearssl__hash_8h_1a2cf285e0e630ff13b7641e24dc574c09" kindref="member">br_ghash_pclmul_get()</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the GHASH key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data (may be <computeroutput>NULL</computeroutput> if <computeroutput>len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a2cf285e0e630ff13b7641e24dc574c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" kindref="member">br_ghash</ref></type>
        <definition>br_ghash br_ghash_pclmul_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_ghash_pclmul_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>pclmul</computeroutput> GHASH implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>If the <computeroutput>pclmul</computeroutput> implementation was compiled in the library (depending on the compiler abilities) <emphasis>and</emphasis> the local CPU appears to support the opcode, then this function will return a pointer to the <computeroutput><ref refid="bearssl__hash_8h_1a5089d68c22f18510fddd8708c93915a3" kindref="member">br_ghash_pclmul()</ref></computeroutput> function. Otherwise, it will return <computeroutput>0</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>pclmul</computeroutput> GHASH implementation, or <computeroutput>0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1a3a9ec93d144301e2a11e73fd75f90575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_ghash_pwr8</definition>
        <argsstring>(void *y, const void *h, const void *data, size_t len)</argsstring>
        <name>br_ghash_pwr8</name>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>GHASH implementation using the POWER8 opcodes. </para>        </briefdescription>
        <detaileddescription>
<para>This implementation is available only on POWER8 platforms (and later). To safely obtain a pointer to this function when supported (or 0 otherwise), use <computeroutput><ref refid="bearssl__hash_8h_1ae717cf3cabedd7fb93af1f5d676000fb" kindref="member">br_ghash_pwr8_get()</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the GHASH key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data (may be <computeroutput>NULL</computeroutput> if <computeroutput>len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the input data length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__hash_8h_1ae717cf3cabedd7fb93af1f5d676000fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" kindref="member">br_ghash</ref></type>
        <definition>br_ghash br_ghash_pwr8_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_ghash_pwr8_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain the <computeroutput>pwr8</computeroutput> GHASH implementation, if available. </para>        </briefdescription>
        <detaileddescription>
<para>If the <computeroutput>pwr8</computeroutput> implementation was compiled in the library (depending on the compiler abilities) <emphasis>and</emphasis> the local CPU appears to support the opcode, then this function will return a pointer to the <computeroutput><ref refid="bearssl__hash_8h_1a3a9ec93d144301e2a11e73fd75f90575" kindref="member">br_ghash_pwr8()</ref></computeroutput> function. Otherwise, it will return <computeroutput>0</computeroutput>.</para><para><simplesect kind="return"><para>the <computeroutput>pwr8</computeroutput> GHASH implementation, or <computeroutput>0</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_hash.h" line="1340" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="1">Hash Functions</heading>
</para><para>This file documents the API for hash functions.</para><para><heading level="2">Procedural API</heading>
</para><para>For each implemented hash function, of name &quot;`xxx`&quot;, the following elements are defined:</para><para><itemizedlist>
<listitem><para><computeroutput>br_xxx_vtable</computeroutput></para><para>An externally defined instance of <computeroutput>br_hash_class</computeroutput>.</para></listitem><listitem><para><computeroutput>br_xxx_SIZE</computeroutput></para><para>A macro that evaluates to the output size (in bytes) of the hash function.</para></listitem><listitem><para><computeroutput>br_xxx_ID</computeroutput></para><para>A macro that evaluates to a symbolic identifier for the hash function. Such identifiers are used with HMAC and signature algorithm implementations.</para><para>NOTE: for the &quot;standard&quot; hash functions defined in <ulink url="https://tools.ietf.org/html/rfc5246#section-7.4.1.4.1">the TLS standard</ulink>, the symbolic identifiers match the constants used in TLS, i.e. 1 to 6 for MD5, SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512, respectively.</para></listitem><listitem><para><computeroutput>br_xxx_context</computeroutput></para><para>Context for an ongoing computation. It is allocated by the caller, and a pointer to it is passed to all functions. A context contains no interior pointer, so it can be moved around and cloned (with a simple <computeroutput>memcpy()</computeroutput> or equivalent) in order to capture the function state at some point. Computations that use distinct context structures are independent of each other. The first field of <computeroutput>br_xxx_context</computeroutput> is always a pointer to the <computeroutput>br_xxx_vtable</computeroutput> structure; <computeroutput>br_xxx_init()</computeroutput> sets that pointer.</para></listitem><listitem><para><computeroutput>br_xxx_init(br_xxx_context *ctx)</computeroutput></para><para>Initialise the provided context. Previous contents of the structure are ignored. This calls resets the context to the start of a new hash computation; it also sets the first field of the context structure (called <computeroutput>vtable</computeroutput>) to a pointer to the statically allocated constant <computeroutput>br_xxx_vtable</computeroutput> structure.</para></listitem><listitem><para><computeroutput>br_xxx_update(br_xxx_context *ctx, const void *data, size_t len)</computeroutput></para><para>Add some more bytes to the hash computation represented by the provided context.</para></listitem><listitem><para><computeroutput>br_xxx_out(const br_xxx_context *ctx, void *out)</computeroutput></para><para>Complete the hash computation and write the result in the provided buffer. The output buffer MUST be large enough to accommodate the result. The context is NOT modified by this operation, so this function can be used to get a &quot;partial hash&quot; while still keeping the possibility of adding more bytes to the input.</para></listitem><listitem><para><computeroutput>br_xxx_state(const br_xxx_context *ctx, void *out)</computeroutput></para><para>Get a copy of the &quot;current state&quot; for the computation so far. For MD functions (MD5, SHA-1, SHA-2 family), this is the running state resulting from the processing of the last complete input block. Returned value is the current input length (in bytes).</para></listitem><listitem><para><computeroutput>br_xxx_set_state(br_xxx_context *ctx, const void *stb, uint64_t count)</computeroutput></para><para>Set the internal state to the provided values. The &apos;stb&apos; and &apos;count&apos; values shall match that which was obtained from <computeroutput>br_xxx_state()</computeroutput>. This restores the hash state only if the state values were at an appropriate block boundary. This does NOT set the <computeroutput>vtable</computeroutput> pointer in the context.</para></listitem></itemizedlist>
</para><para>Context structures can be discarded without any explicit deallocation. Hash function implementations are purely software and don&apos;t reserve any resources outside of the context structure itself.</para><para><heading level="2">Object-Oriented API</heading>
</para><para>For each hash function that follows the procedural API described above, an object-oriented API is also provided. In that API, function pointers from the vtable (<computeroutput>br_xxx_vtable</computeroutput>) are used. The vtable incarnates object-oriented programming. An introduction on the OOP concept used here can be read on the BearSSL Web site:<linebreak/>
 <nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><ulink url="https://www.bearssl.org/oop.html">https://www.bearssl.org/oop.html</ulink></para><para>The vtable offers functions called <computeroutput>init()</computeroutput>, <computeroutput>update()</computeroutput>, <computeroutput>out()</computeroutput>, <computeroutput>set()</computeroutput> and <computeroutput>set_state()</computeroutput>, which are in fact the functions from the procedural API. That vtable also contains two informative fields:</para><para><itemizedlist>
<listitem><para><computeroutput>context_size</computeroutput></para><para>The size of the context structure (<computeroutput>br_xxx_context</computeroutput>), in bytes. This can be used by generic implementations to perform dynamic context allocation.</para></listitem><listitem><para><computeroutput>desc</computeroutput></para><para>A &quot;descriptor&quot; field that encodes some information on the hash function: symbolic identifier, output size, state size, internal block size, details on the padding.</para></listitem></itemizedlist>
</para><para>Users of this object-oriented API (in particular generic HMAC implementations) may make the following assumptions:</para><para><itemizedlist>
<listitem><para>Hash output size is no more than 64 bytes.</para></listitem><listitem><para>Hash internal state size is no more than 64 bytes.</para></listitem><listitem><para>Internal block size is a power of two, no less than 16 and no more than 256.</para></listitem></itemizedlist>
</para><para><heading level="2">Implemented Hash Functions</heading>
</para><para>Implemented hash functions are:</para><para><table rows="8" cols="4"><row>
<entry thead="yes"><para>Function </para></entry><entry thead="yes"><para>Name </para></entry><entry thead="yes"><para>Output length </para></entry><entry thead="yes"><para>State length  </para></entry></row>
<row>
<entry thead="no"><para>MD5 </para></entry><entry thead="no"><para>md5 </para></entry><entry thead="no"><para>16 </para></entry><entry thead="no"><para>16 </para></entry></row>
<row>
<entry thead="no"><para>SHA-1 </para></entry><entry thead="no"><para>sha1 </para></entry><entry thead="no"><para>20 </para></entry><entry thead="no"><para>20 </para></entry></row>
<row>
<entry thead="no"><para>SHA-224 </para></entry><entry thead="no"><para>sha224 </para></entry><entry thead="no"><para>28 </para></entry><entry thead="no"><para>32 </para></entry></row>
<row>
<entry thead="no"><para>SHA-256 </para></entry><entry thead="no"><para>sha256 </para></entry><entry thead="no"><para>32 </para></entry><entry thead="no"><para>32 </para></entry></row>
<row>
<entry thead="no"><para>SHA-384 </para></entry><entry thead="no"><para>sha384 </para></entry><entry thead="no"><para>48 </para></entry><entry thead="no"><para>64 </para></entry></row>
<row>
<entry thead="no"><para>SHA-512 </para></entry><entry thead="no"><para>sha512 </para></entry><entry thead="no"><para>64 </para></entry><entry thead="no"><para>64 </para></entry></row>
<row>
<entry thead="no"><para>MD5+SHA-1 </para></entry><entry thead="no"><para>md5sha1 </para></entry><entry thead="no"><para>36 </para></entry><entry thead="no"><para>36 </para></entry></row>
</table>
(MD5+SHA-1 is the concatenation of MD5 and SHA-1 computed over the same input; in the implementation, the internal data buffer is shared, thus making it more memory-efficient than separate MD5 and SHA-1. It can be useful in implementing SSL 3.0, TLS 1.0 and TLS 1.1.)</para><para><heading level="2">Multi-Hasher</heading>
</para><para>An aggregate hasher is provided, that can compute several standard hash functions in parallel. It uses <computeroutput><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref></computeroutput> and a procedural API. It is configured with the implementations (the vtables) that it should use; it will then compute all these hash functions in parallel, on the same input. It is meant to be used in cases when the hash of an object will be used, but the exact hash function is not known yet (typically, streamed processing on X.509 certificates).</para><para>Only the standard hash functions (MD5, SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512) are supported by the multi-hasher.</para><para><heading level="2">GHASH</heading>
</para><para>GHASH is not a generic hash function; it is a <emphasis>universal</emphasis> hash function, which, as the name does not say, means that it CANNOT be used in most places where a hash function is needed. GHASH is used within the GCM encryption mode, to provide the checked integrity functionality.</para><para>A GHASH implementation is basically a function that uses the type defined in this file under the name <computeroutput>br_ghash</computeroutput>: <verbatim>typedef void (*br_ghash)(void *y, const void *h, const void *data, size_t len);
</verbatim></para><para>The <computeroutput>y</computeroutput> pointer refers to a 16-byte value which is used as input, and receives the output of the GHASH invocation. <computeroutput>h</computeroutput> is a 16-byte secret value (that serves as key). <computeroutput>data</computeroutput> and <computeroutput>len</computeroutput> define the input data.</para><para>Three GHASH implementations are provided, all constant-time, based on the use of integer multiplications with appropriate masking to cancel carry propagation. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Thomas<sp/>Pornin<sp/>&lt;pornin@bolet.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_BEARSSL_HASH_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_BEARSSL_HASH_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__hash__class__" kindref="compound">br_hash_class_</ref><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref>;</highlight></codeline>
<codeline lineno="222" refid="structbr__hash__class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__hash__class__" kindref="compound">br_hash_class_</ref><sp/>{</highlight></codeline>
<codeline lineno="227" refid="structbr__hash__class___1a53b629c36645dd703da6ccefa245a78d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class___1a53b629c36645dd703da6ccefa245a78d" kindref="member">context_size</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="structbr__hash__class___1a83ce0b40ed9d8de4cdfde6391c7d8728" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structbr__hash__class___1a83ce0b40ed9d8de4cdfde6391c7d8728" kindref="member">desc</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="structbr__hash__class___1a576d5f1abbd1bb61a8686e0ff0f0d2ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__hash__class___1a576d5f1abbd1bb61a8686e0ff0f0d2ff" kindref="member">init</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>**ctx);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="structbr__hash__class___1a5f8725811995c5064c87939c1957547e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__hash__class___1a5f8725811995c5064c87939c1957547e" kindref="member">update</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>**ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="structbr__hash__class___1ad5feeec7686f6d9ea9c378353c308d10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>(*<ref refid="structbr__hash__class___1ad5feeec7686f6d9ea9c378353c308d10" kindref="member">state</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="structbr__hash__class___1a1b8f07b0f48736ed41b5a7900f9bf335" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__hash__class___1a1b8f07b0f48736ed41b5a7900f9bf335" kindref="member">set_state</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_ID(id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(id)<sp/>&lt;&lt;<sp/>BR_HASHDESC_ID_OFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_ID_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_ID_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_OUT(size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(size)<sp/>&lt;&lt;<sp/>BR_HASHDESC_OUT_OFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_OUT_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_OUT_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_STATE(size)<sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(size)<sp/>&lt;&lt;<sp/>BR_HASHDESC_STATE_OFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_STATE_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_STATE_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_LBLEN(ls)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(ls)<sp/>&lt;&lt;<sp/>BR_HASHDESC_LBLEN_OFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_LBLEN_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_LBLEN_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_MD_PADDING<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)1<sp/>&lt;&lt;<sp/>28)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_MD_PADDING_128<sp/><sp/><sp/>((uint32_t)1<sp/>&lt;&lt;<sp/>29)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_HASHDESC_MD_PADDING_BE<sp/><sp/><sp/><sp/>((uint32_t)1<sp/>&lt;&lt;<sp/>30)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>Specific<sp/>hash<sp/>functions.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>Rules<sp/>for<sp/>contexts:</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>--<sp/>No<sp/>interior<sp/>pointer.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>--<sp/>No<sp/>pointer<sp/>to<sp/>external<sp/>dynamically<sp/>allocated<sp/>resources.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>--<sp/>First<sp/>field<sp/>is<sp/>called<sp/>&apos;vtable&apos;<sp/>and<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>const-qualified<sp/>br_hash_class<sp/>instance<sp/>(pointer<sp/>is<sp/>set<sp/>by<sp/>init()).</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>--<sp/>SHA-224<sp/>and<sp/>SHA-256<sp/>contexts<sp/>are<sp/>identical.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>--<sp/>SHA-384<sp/>and<sp/>SHA-512<sp/>contexts<sp/>are<sp/>identical.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>Thus,<sp/>contexts<sp/>can<sp/>be<sp/>moved<sp/>and<sp/>cloned<sp/>to<sp/>capture<sp/>the<sp/>hash<sp/>function</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>current<sp/>state;<sp/>and<sp/>there<sp/>is<sp/>no<sp/>need<sp/>for<sp/>any<sp/>explicit<sp/>&quot;release&quot;<sp/>function.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="bearssl__hash_8h_1a42c99336cf302182bbcc28d840408de3" refkind="member"><highlight class="preprocessor">#define<sp/>br_md5_ID<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="bearssl__hash_8h_1adbab9a6322c4af56d4c7d9557a33fa55" refkind="member"><highlight class="preprocessor">#define<sp/>br_md5_SIZE<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1ac94ba2258a7b845b3b103f231d96bfdc" kindref="member">br_md5_vtable</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="structbr__md5__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="393" refid="structbr__md5__context_1a74653b79b12521810c4d880a384de058" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*<ref refid="structbr__md5__context_1a74653b79b12521810c4d880a384de058" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val[4];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">}<sp/><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a327516bdef675d61ab15b809cc42536a" kindref="member">br_md5_init</ref>(<ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1af40e3352df8dd2b09137bff113d501eb" kindref="member">br_md5_update</ref>(<ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a6066a47965a7c2c31684df53f304799b" kindref="member">br_md5_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">uint64_t<sp/><ref refid="bearssl__hash_8h_1a801d0c0dbdb788b96e96ea69476b9887" kindref="member">br_md5_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1aee877ce9b1785b36a002f1aea8e01f78" kindref="member">br_md5_set_state</ref>(<ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="bearssl__hash_8h_1acebafe1b4ea9c302fdaf4a215eb0fb81" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha1_ID<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="bearssl__hash_8h_1af2add9a9e1d2cb48e37c763beeed5a43" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha1_SIZE<sp/><sp/><sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1a7bfc9c94f4553ed9ab1d2bdda81db9db" kindref="member">br_sha1_vtable</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="structbr__sha1__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488" refid="structbr__sha1__context_1a3b38baab67ad976fe45b6c3d4523acab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*<ref refid="structbr__sha1__context_1a3b38baab67ad976fe45b6c3d4523acab" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val[5];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">}<sp/><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref>;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a2384f9e51f7e67f875140649870c8075" kindref="member">br_sha1_init</ref>(<ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1ad5bee10b391c9c1cf647a98a6120c732" kindref="member">br_sha1_update</ref>(<ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a47412559bf48abfa7666d8ba6f8c678c" kindref="member">br_sha1_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">uint64_t<sp/><ref refid="bearssl__hash_8h_1af2669b87984d1aead0632d01706b704f" kindref="member">br_sha1_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a4e3514683f72f8803ed5b41a4e1eda24" kindref="member">br_sha1_set_state</ref>(<ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="bearssl__hash_8h_1af24c0a2a7ac5713391069fb7ccc01996" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha224_ID<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="bearssl__hash_8h_1a39448cd1ec009190541e1be5f1c34092" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha224_SIZE<sp/><sp/><sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1a3e9da33567b629168106d78ad5331de2" kindref="member">br_sha224_vtable</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="structbr__sha224__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="583" refid="structbr__sha224__context_1a6228bdda4ace7bb68e4ddfda50e5a7d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*<ref refid="structbr__sha224__context_1a6228bdda4ace7bb68e4ddfda50e5a7d1" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64];</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val[8];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">}<sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a91ece438a9fc80dc3b456aef3df7781e" kindref="member">br_sha224_init</ref>(<ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a7310e2a905f3c0ce90a0b1aa88f89475" kindref="member">br_sha224_update</ref>(<ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1af53f8c444f14191383f9f0b22e34e792" kindref="member">br_sha224_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">uint64_t<sp/><ref refid="bearssl__hash_8h_1a40f1486516809dcef586f368b02216e0" kindref="member">br_sha224_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1af543b1782f1d39f4557dfac93b1e311c" kindref="member">br_sha224_set_state</ref>(<ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="bearssl__hash_8h_1a74d79bb00b490778be147e3e40569fee" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha256_ID<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="bearssl__hash_8h_1aa8f082193cac7771f3872f1b7aa97457" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha256_SIZE<sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1a927ac5204d96fdffb96495ea893123fe" kindref="member">br_sha256_vtable</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}<sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha256_context</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha256_context</ref>;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a949408045ab075839c699022f9f68a73" kindref="member">br_sha256_init</ref>(br_sha256_context<sp/>*ctx);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_sha256_update(br_sha256_context<sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_sha256_update<sp/><sp/><sp/><sp/><sp/><sp/>br_sha224_update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a68dcbfd55a35576fc8e4aecbf476fd11" kindref="member">br_sha256_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>br_sha256_context<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structbr__hash__class___1a8a200645aa525939cb33d6c448c24e65" kindref="member">out</ref>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">uint64_t<sp/>br_sha256_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>br_sha256_context<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_sha256_state<sp/><sp/><sp/><sp/><sp/><sp/><sp/>br_sha224_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_sha256_set_state(br_sha256_context<sp/>*ctx,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_sha256_set_state<sp/><sp/><sp/>br_sha224_set_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="bearssl__hash_8h_1a0e2217e85194284521a51a68a34c49c7" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha384_ID<sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="bearssl__hash_8h_1ac144bb346fc8d413a07f07eab627e74f" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha384_SIZE<sp/><sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1a84ad19accb85ad8b0776dd667d538f42" kindref="member">br_sha384_vtable</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="structbr__sha384__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="786" refid="structbr__sha384__context_1adb2aaa29a1399ec390409dc9fc8cad16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*<ref refid="structbr__sha384__context_1adb2aaa29a1399ec390409dc9fc8cad16" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[128];</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>val[8];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">}<sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref>;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a2596f734fa0da9e13f11345dafec616c" kindref="member">br_sha384_init</ref>(<ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a4d8322810db3c53943881248a7fed729" kindref="member">br_sha384_update</ref>(<ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a92143866501f0941ce3546033d9ca7fe" kindref="member">br_sha384_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">uint64_t<sp/><ref refid="bearssl__hash_8h_1a5cb31e87af33ab51de2982a36351efc5" kindref="member">br_sha384_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1afc4fd7a33f3918b5e860e757d1e75d71" kindref="member">br_sha384_set_state</ref>(<ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="bearssl__hash_8h_1a96479080f06dc9a893844406d2cff822" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha512_ID<sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="bearssl__hash_8h_1a4d2de91522fa3e8008bcc326c342c89b" refkind="member"><highlight class="preprocessor">#define<sp/>br_sha512_SIZE<sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1a982a18d69d7520a63a4d25dee2c9aee3" kindref="member">br_sha512_vtable</ref>;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}<sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha512_context</ref>;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha512_context</ref>;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a87d16f76a966afeda00bbf58a64e6f92" kindref="member">br_sha512_init</ref>(br_sha512_context<sp/>*ctx);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_sha512_update(br_sha512_context<sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_sha512_update<sp/><sp/><sp/>br_sha384_update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1add7e62e41a02736efea20b89c63902b9" kindref="member">br_sha512_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>br_sha512_context<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal">uint64_t<sp/>br_sha512_state(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>br_sha512_context<sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_sha512_state<sp/><sp/><sp/>br_sha384_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>br_sha512_set_state(br_sha512_context<sp/>*ctx,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>br_sha512_set_state<sp/><sp/><sp/>br_sha384_set_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*<sp/>&quot;md5sha1&quot;<sp/>is<sp/>a<sp/>special<sp/>hash<sp/>function<sp/>that<sp/>computes<sp/>both<sp/>MD5<sp/>and<sp/>SHA-1</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*<sp/>on<sp/>the<sp/>same<sp/>input,<sp/>and<sp/>produces<sp/>a<sp/>36-byte<sp/>output<sp/>(MD5<sp/>and<sp/>SHA-1</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/>*<sp/>concatenation,<sp/>in<sp/>that<sp/>order).<sp/>State<sp/>size<sp/>is<sp/>also<sp/>36<sp/>bytes.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="bearssl__hash_8h_1a863c89b0fafda39d5d8962b19b737f4e" refkind="member"><highlight class="preprocessor">#define<sp/>br_md5sha1_ID<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="982" refid="bearssl__hash_8h_1aebf08f240af1bf6b3bb28311a53d3833" refkind="member"><highlight class="preprocessor">#define<sp/>br_md5sha1_SIZE<sp/><sp/><sp/>36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/><ref refid="bearssl__hash_8h_1ae650e30ac0b2ed86921bc5d562d232f6" kindref="member">br_md5sha1_vtable</ref>;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="structbr__md5sha1__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="999" refid="structbr__md5sha1__context_1a09d819dd750941a1e29fc0f36a5f2d68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*<ref refid="structbr__md5sha1__context_1a09d819dd750941a1e29fc0f36a5f2d68" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64];</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val_md5[4];</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val_sha1[5];</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}<sp/><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref>;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1aeebb882c0a9fda2ee5e9f9a678b58f2d" kindref="member">br_md5sha1_init</ref>(<ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a3719e9948e1ecf5cf7d2c042aab07a8f" kindref="member">br_md5sha1_update</ref>(<ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a9d3a681efa08d6adca5a0902ad5b68d0" kindref="member">br_md5sha1_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">uint64_t<sp/><ref refid="bearssl__hash_8h_1a0358c22dfed3054ba81d524bed53027a" kindref="member">br_md5sha1_state</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*out);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a1471c410abe94e6631410023cd9e1992" kindref="member">br_md5sha1_set_state</ref>(<ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb,<sp/>uint64_t<sp/>count);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="unionbr__hash__compat__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__md5__context" kindref="compound">br_md5_context</ref><sp/>md5;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__sha1__context" kindref="compound">br_sha1_context</ref><sp/>sha1;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__sha224__context" kindref="compound">br_sha224_context</ref><sp/>sha224;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>br_sha256_context<sp/>sha256;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__sha384__context" kindref="compound">br_sha384_context</ref><sp/>sha384;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>br_sha512_context<sp/>sha512;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__md5sha1__context" kindref="compound">br_md5sha1_context</ref><sp/>md5sha1;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}<sp/><ref refid="unionbr__hash__compat__context" kindref="compound">br_hash_compat_context</ref>;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/>*<sp/>The<sp/>multi-hasher<sp/>is<sp/>a<sp/>construct<sp/>that<sp/>handles<sp/>hashing<sp/>of<sp/>the<sp/>same<sp/>input</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/>*<sp/>data<sp/>with<sp/>several<sp/>hash<sp/>functions,<sp/>with<sp/>a<sp/>single<sp/>shared<sp/>input<sp/>buffer.</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/>*<sp/>It<sp/>can<sp/>handle<sp/>MD5,<sp/>SHA-1,<sp/>SHA-224,<sp/>SHA-256,<sp/>SHA-384<sp/>and<sp/>SHA-512</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/>*<sp/>simultaneously,<sp/>though<sp/>which<sp/>functions<sp/>are<sp/>activated<sp/>depends<sp/>on</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/>*<sp/>the<sp/>set<sp/>implementation<sp/>pointers.</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107" refid="structbr__multihash__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[128];</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val_32[25];</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>val_64[16];</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*impl[6];</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}<sp/><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref>;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1af9a9e454a2e69fdcfafd4c27e866b526" kindref="member">br_multihash_zero</ref>(<ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal">br_multihash_setimpl(<ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*impl)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>code<sp/>relies<sp/>on<sp/>hash<sp/>functions<sp/>ID<sp/>being<sp/>values<sp/>1<sp/>to<sp/>6,</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>MD5<sp/>to<sp/>SHA-512<sp/>order.</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;impl[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>-<sp/>1]<sp/>=<sp/>impl;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">br_multihash_getimpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;impl[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a18fd76f8d1c2b40169b9899127d47136" kindref="member">br_multihash_init</ref>(<ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1ae9b9736423fad34dd0613fbb9b1d3149" kindref="member">br_multihash_update</ref>(<ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a9631a82310a6e1248c974414c39a30fe" kindref="member">br_multihash_out</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239" refid="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" kindref="member">br_ghash</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1afa4160818f8ea8bfc5869a5625520e34" kindref="member">br_ghash_ctmul</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a4d173225ad510f8757601e839ffbb82f" kindref="member">br_ghash_ctmul32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a2fd9bd9fc9531066cec8e722a3c9de36" kindref="member">br_ghash_ctmul64</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a5089d68c22f18510fddd8708c93915a3" kindref="member">br_ghash_pclmul</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><ref refid="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" kindref="member">br_ghash</ref><sp/><ref refid="bearssl__hash_8h_1a2cf285e0e630ff13b7641e24dc574c09" kindref="member">br_ghash_pclmul_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__hash_8h_1a3a9ec93d144301e2a11e73fd75f90575" kindref="member">br_ghash_pwr8</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><ref refid="bearssl__hash_8h_1a06b9d6420d8038e78efbb53fb4a26eae" kindref="member">br_ghash</ref><sp/><ref refid="bearssl__hash_8h_1ae717cf3cabedd7fb93af1f5d676000fb" kindref="member">br_ghash_pwr8_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/docs/lib/bearssl/bearssl_hash.h"/>
  </compounddef>
</doxygen>
