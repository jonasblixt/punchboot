<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bearssl__x509_8h" kind="file" language="C++">
    <compoundname>bearssl_x509.h</compoundname>
    <includes refid="stddef_8h" local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="bearssl__ec_8h" local="yes">bearssl_ec.h</includes>
    <includes refid="bearssl__hash_8h" local="yes">bearssl_hash.h</includes>
    <includes refid="bearssl__rsa_8h" local="yes">bearssl_rsa.h</includes>
    <incdepgraph>
      <node id="800">
        <label>stddef.h</label>
        <link refid="stddef_8h_source"/>
        <childnode refid="801" relation="include">
        </childnode>
      </node>
      <node id="803">
        <label>stdint_.h</label>
      </node>
      <node id="810">
        <label>bearssl_rsa.h</label>
        <link refid="bearssl__rsa_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
      </node>
      <node id="805">
        <label>bearssl_rand.h</label>
        <link refid="bearssl__rand_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
      </node>
      <node id="801">
        <label>stddef_.h</label>
      </node>
      <node id="799">
        <label>/docs/lib/bearssl/bearssl_x509.h</label>
        <link refid="bearssl__x509_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
      </node>
      <node id="808">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="809" relation="include">
        </childnode>
      </node>
      <node id="804">
        <label>bearssl_ec.h</label>
        <link refid="bearssl__ec_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
      </node>
      <node id="807">
        <label>bearssl_hash.h</label>
        <link refid="bearssl__hash_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
      </node>
      <node id="802">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="803" relation="include">
        </childnode>
      </node>
      <node id="809">
        <label>string_.h</label>
      </node>
      <node id="806">
        <label>bearssl_block.h</label>
        <link refid="bearssl__block_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structbr__x509__pkey" prot="public">br_x509_pkey</innerclass>
    <innerclass refid="structbr__x500__name" prot="public">br_x500_name</innerclass>
    <innerclass refid="structbr__x509__trust__anchor" prot="public">br_x509_trust_anchor</innerclass>
    <innerclass refid="structbr__x509__class__" prot="public">br_x509_class_</innerclass>
    <innerclass refid="structbr__x509__knownkey__context" prot="public">br_x509_knownkey_context</innerclass>
    <innerclass refid="structbr__name__element" prot="public">br_name_element</innerclass>
    <innerclass refid="structbr__x509__minimal__context" prot="public">br_x509_minimal_context</innerclass>
    <innerclass refid="structbr__x509__decoder__context" prot="public">br_x509_decoder_context</innerclass>
    <innerclass refid="structbr__x509__certificate" prot="public">br_x509_certificate</innerclass>
    <innerclass refid="structbr__skey__decoder__context" prot="public">br_skey_decoder_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bearssl__x509_8h_1a1713df679830bd69521cc939cab39795" prot="public" static="no">
        <name>BR_ERR_X509_OK</name>
        <initializer>32</initializer>
        <briefdescription>
<para>X.509 status: validation was successful; this is not actually an error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="130" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1adb3fb396c748032c6efa6525ad03cf75" prot="public" static="no">
        <name>BR_ERR_X509_INVALID_VALUE</name>
        <initializer>33</initializer>
        <briefdescription>
<para>X.509 status: invalid value in an ASN.1 structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="133" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a8b445cbe2575b9599185da86056517f2" prot="public" static="no">
        <name>BR_ERR_X509_TRUNCATED</name>
        <initializer>34</initializer>
        <briefdescription>
<para>X.509 status: truncated certificate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="136" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1aa48ca05c973de29e6b72617d71b8a20b" prot="public" static="no">
        <name>BR_ERR_X509_EMPTY_CHAIN</name>
        <initializer>35</initializer>
        <briefdescription>
<para>X.509 status: empty certificate chain (no certificate at all). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="139" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a5a1ef832c53c92ed31ea4ced41d830a1" prot="public" static="no">
        <name>BR_ERR_X509_INNER_TRUNC</name>
        <initializer>36</initializer>
        <briefdescription>
<para>X.509 status: decoding error: inner element extends beyond outer element size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="143" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1ad74563eca438c807cdd34601895a520e" prot="public" static="no">
        <name>BR_ERR_X509_BAD_TAG_CLASS</name>
        <initializer>37</initializer>
        <briefdescription>
<para>X.509 status: decoding error: unsupported tag class (application or private). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="147" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a80f3d62dae18d5ba825669b8327dc222" prot="public" static="no">
        <name>BR_ERR_X509_BAD_TAG_VALUE</name>
        <initializer>38</initializer>
        <briefdescription>
<para>X.509 status: decoding error: unsupported tag value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="150" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a5eca7f43877fb54d56f83cc6485cbd7f" prot="public" static="no">
        <name>BR_ERR_X509_INDEFINITE_LENGTH</name>
        <initializer>39</initializer>
        <briefdescription>
<para>X.509 status: decoding error: indefinite length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="153" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a5b1a43a6a5527c3f1b9c74be101b1370" prot="public" static="no">
        <name>BR_ERR_X509_EXTRA_ELEMENT</name>
        <initializer>40</initializer>
        <briefdescription>
<para>X.509 status: decoding error: extraneous element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="156" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a26c5e29f093f6eeb4147472056d03aed" prot="public" static="no">
        <name>BR_ERR_X509_UNEXPECTED</name>
        <initializer>41</initializer>
        <briefdescription>
<para>X.509 status: decoding error: unexpected element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="159" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a510bdeb41a9782fb80616f3418492bb1" prot="public" static="no">
        <name>BR_ERR_X509_NOT_CONSTRUCTED</name>
        <initializer>42</initializer>
        <briefdescription>
<para>X.509 status: decoding error: expected constructed element, but is primitive. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="163" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1ac5c08b9752662c478d9349e361ba68cf" prot="public" static="no">
        <name>BR_ERR_X509_NOT_PRIMITIVE</name>
        <initializer>43</initializer>
        <briefdescription>
<para>X.509 status: decoding error: expected primitive element, but is constructed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="167" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a12493cab12ebee5e0e2b7562c4358702" prot="public" static="no">
        <name>BR_ERR_X509_PARTIAL_BYTE</name>
        <initializer>44</initializer>
        <briefdescription>
<para>X.509 status: decoding error: BIT STRING length is not multiple of 8. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="171" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1aee3368e0cad941d65856dbcb721b730e" prot="public" static="no">
        <name>BR_ERR_X509_BAD_BOOLEAN</name>
        <initializer>45</initializer>
        <briefdescription>
<para>X.509 status: decoding error: BOOLEAN value has invalid length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="174" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a4a133e8d6152a9161a40a85536404fc0" prot="public" static="no">
        <name>BR_ERR_X509_OVERFLOW</name>
        <initializer>46</initializer>
        <briefdescription>
<para>X.509 status: decoding error: value is off-limits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="177" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a21a6d9cb8c5d2e2930029534e3b3338e" prot="public" static="no">
        <name>BR_ERR_X509_BAD_DN</name>
        <initializer>47</initializer>
        <briefdescription>
<para>X.509 status: invalid distinguished name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="180" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a8a0c65156da06846c30f3e7b2aa558b8" prot="public" static="no">
        <name>BR_ERR_X509_BAD_TIME</name>
        <initializer>48</initializer>
        <briefdescription>
<para>X.509 status: invalid date/time representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="183" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a4a9c8afe343765b22382298a3cabdd2f" prot="public" static="no">
        <name>BR_ERR_X509_UNSUPPORTED</name>
        <initializer>49</initializer>
        <briefdescription>
<para>X.509 status: certificate contains unsupported features that cannot be ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="187" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1aa6c69bc7b1c049fba240319f65772597" prot="public" static="no">
        <name>BR_ERR_X509_LIMIT_EXCEEDED</name>
        <initializer>50</initializer>
        <briefdescription>
<para>X.509 status: key or signature size exceeds internal limits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="190" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a7a73183803aeecefe30215ecf80fac1b" prot="public" static="no">
        <name>BR_ERR_X509_WRONG_KEY_TYPE</name>
        <initializer>51</initializer>
        <briefdescription>
<para>X.509 status: key type does not match that which was expected. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="193" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1af9e74d2d7c70c880b09d7d94d84e7b1a" prot="public" static="no">
        <name>BR_ERR_X509_BAD_SIGNATURE</name>
        <initializer>52</initializer>
        <briefdescription>
<para>X.509 status: signature is invalid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="196" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a72c572f1b9c48d94223d2dfafe6eff57" prot="public" static="no">
        <name>BR_ERR_X509_TIME_UNKNOWN</name>
        <initializer>53</initializer>
        <briefdescription>
<para>X.509 status: validation time is unknown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="199" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1acf49f37ed522b5dcd027fe9cfac82ffd" prot="public" static="no">
        <name>BR_ERR_X509_EXPIRED</name>
        <initializer>54</initializer>
        <briefdescription>
<para>X.509 status: certificate is expired or not yet valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="202" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a57ead28e301eea1bf920fc326cd49664" prot="public" static="no">
        <name>BR_ERR_X509_DN_MISMATCH</name>
        <initializer>55</initializer>
        <briefdescription>
<para>X.509 status: issuer/subject DN mismatch in the chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="205" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a2f402b64447ac4f5a8c6aac76ed554c1" prot="public" static="no">
        <name>BR_ERR_X509_BAD_SERVER_NAME</name>
        <initializer>56</initializer>
        <briefdescription>
<para>X.509 status: expected server name was not found in the chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="208" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1ad86cd52316e312c88a59b2814c96d60f" prot="public" static="no">
        <name>BR_ERR_X509_CRITICAL_EXTENSION</name>
        <initializer>57</initializer>
        <briefdescription>
<para>X.509 status: unknown critical extension in certificate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="211" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a6bf90db87eefa0be5cd725432ae0a7c9" prot="public" static="no">
        <name>BR_ERR_X509_NOT_CA</name>
        <initializer>58</initializer>
        <briefdescription>
<para>X.509 status: not a CA, or path length constraint violation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="214" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a5440a6d99f7284d191bb6c2ce51508ba" prot="public" static="no">
        <name>BR_ERR_X509_FORBIDDEN_KEY_USAGE</name>
        <initializer>59</initializer>
        <briefdescription>
<para>X.509 status: Key Usage extension prohibits intended usage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="217" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a7342dc5f96cebafcf93100d46a7871c5" prot="public" static="no">
        <name>BR_ERR_X509_WEAK_PUBLIC_KEY</name>
        <initializer>60</initializer>
        <briefdescription>
<para>X.509 status: public key found in certificate is too small. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="220" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1ad5e550c257b6d6425f87d13c2783e056" prot="public" static="no">
        <name>BR_ERR_X509_NOT_TRUSTED</name>
        <initializer>62</initializer>
        <briefdescription>
<para>X.509 status: chain could not be linked to a trust anchor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="223" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a5f63e9c9bf9ef4ee76354f4662ea0d74" prot="public" static="no">
        <name>BR_X509_TA_CA</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>Trust anchor flag: CA. </para>        </briefdescription>
        <detaileddescription>
<para>A &quot;CA&quot; anchor is deemed fit to verify signatures on certificates. A &quot;non-CA&quot; anchor is accepted only for direct trust (server&apos;s certificate name and key match the anchor). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="271" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1abbcac225e09cbd86978e9273013d9fdb" prot="public" static="no">
        <name>BR_KEYTYPE_RSA</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Key type: algorithm is RSA. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="284" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a3a1aac0260adb768632b555740b5dfe4" prot="public" static="no">
        <name>BR_KEYTYPE_EC</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Key type: algorithm is EC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="286" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1ad0585c052f9a73cc7b83f7ab9a1c9b28" prot="public" static="no">
        <name>BR_KEYTYPE_KEYX</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>Key type: usage is &quot;key exchange&quot;. </para>        </briefdescription>
        <detaileddescription>
<para>This value is combined (with bitwise OR) with the algorithm (<computeroutput>BR_KEYTYPE_RSA</computeroutput> or <computeroutput>BR_KEYTYPE_EC</computeroutput>) when informing the X.509 validation engine that it should find a public key of that type, fit for key exchanges (e.g. <computeroutput>TLS_RSA_*</computeroutput> and <computeroutput>TLS_ECDH_*</computeroutput> cipher suites). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="297" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a2b2bd4c6ec8d26754645743ca26ba9ac" prot="public" static="no">
        <name>BR_KEYTYPE_SIGN</name>
        <initializer>0x20</initializer>
        <briefdescription>
<para>Key type: usage is &quot;signature&quot;. </para>        </briefdescription>
        <detaileddescription>
<para>This value is combined (with bitwise OR) with the algorithm (<computeroutput>BR_KEYTYPE_RSA</computeroutput> or <computeroutput>BR_KEYTYPE_EC</computeroutput>) when informing the X.509 validation engine that it should find a public key of that type, fit for signatures (e.g. <computeroutput>TLS_ECDHE_*</computeroutput> cipher suites). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="307" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1ad567cfe4c48cd4fe58d0d3deb046e121" prot="public" static="no">
        <name>BR_X509_BUFSIZE_KEY</name>
        <initializer>520</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="554" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1afa92c87927450445749eafe8c0dd69be" prot="public" static="no">
        <name>BR_X509_BUFSIZE_SIG</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="555" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1af95b588de4303cf590c2f18d038e6f82" prot="public" static="no">
        <name>BR_ENCODE_PEM_RSA_RAW</name>
        <initializer>&quot;RSA PRIVATE KEY&quot;</initializer>
        <briefdescription>
<para>PEM banner for RSA private key (raw). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1381" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a2db01781a6e7322133e640ef82de0af1" prot="public" static="no">
        <name>BR_ENCODE_PEM_EC_RAW</name>
        <initializer>&quot;EC PRIVATE KEY&quot;</initializer>
        <briefdescription>
<para>PEM banner for EC private key (raw). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1386" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__x509_8h_1a348912c232920f05f810d4474be6053a" prot="public" static="no">
        <name>BR_ENCODE_PEM_PKCS8</name>
        <initializer>&quot;PRIVATE KEY&quot;</initializer>
        <briefdescription>
<para>PEM banner for an RSA or EC private key in PKCS#8 format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1391" column="9" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1391" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bearssl__x509_8h_1acf3af5c1ad4007b178e4c6d68ce5bb0d" prot="public" static="no">
        <type>struct <ref refid="structbr__x509__class__" kindref="compound">br_x509_class_</ref></type>
        <definition>typedef struct br_x509_class_ br_x509_class</definition>
        <argsstring></argsstring>
        <name>br_x509_class</name>
        <briefdescription>
<para>Class type for an X.509 engine. </para>        </briefdescription>
        <detaileddescription>
<para>A certificate chain validation uses a caller-allocated context, which contains the running state for that validation. Methods are called in due order:</para><para><itemizedlist>
<listitem><para><computeroutput>start_chain()</computeroutput> is called at the start of the validation.</para></listitem><listitem><para>Certificates are processed one by one, in SSL order (end-entity comes first). For each certificate, the following methods are called:<itemizedlist>
<listitem><para><computeroutput>start_cert()</computeroutput> at the beginning of the certificate.</para></listitem><listitem><para><computeroutput>append()</computeroutput> is called zero, one or more times, to provide the certificate (possibly in chunks).</para></listitem><listitem><para><computeroutput>end_cert()</computeroutput> at the end of the certificate.</para></listitem></itemizedlist>
</para></listitem><listitem><para><computeroutput>end_chain()</computeroutput> is called when the last certificate in the chain was processed.</para></listitem><listitem><para><computeroutput>get_pkey()</computeroutput> is called after chain processing, if the chain validation was successful.</para></listitem></itemizedlist>
</para><para>A context structure may be reused; the <computeroutput>start_chain()</computeroutput> method shall ensure (re)initialisation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="203" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bearssl__x509_8h_1abb114e00d31b7520ea44323cd3a4f884" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__x509_8h_1acf3af5c1ad4007b178e4c6d68ce5bb0d" kindref="member">br_x509_class</ref></type>
        <definition>const br_x509_class br_x509_knownkey_vtable</definition>
        <argsstring></argsstring>
        <name>br_x509_knownkey_vtable</name>
        <briefdescription>
<para>Class instance for the &quot;known key&quot; X.509 engine. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="bearssl__x509_8h_1aee76f2097e6c267a77e458e11b237c62" prot="public" static="no" mutable="no">
        <type>const <ref refid="bearssl__x509_8h_1acf3af5c1ad4007b178e4c6d68ce5bb0d" kindref="member">br_x509_class</ref></type>
        <definition>const br_x509_class br_x509_minimal_vtable</definition>
        <argsstring></argsstring>
        <name>br_x509_minimal_vtable</name>
        <briefdescription>
<para>Class instance for the &quot;minimal&quot; X.509 engine. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="739" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bearssl__x509_8h_1af89092ad96523f50ef0c104d38a58e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_x509_knownkey_init_rsa</definition>
        <argsstring>(br_x509_knownkey_context *ctx, const br_rsa_public_key *pk, unsigned usages)</argsstring>
        <name>br_x509_knownkey_init_rsa</name>
        <param>
          <type><ref refid="structbr__x509__knownkey__context" kindref="compound">br_x509_knownkey_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>usages</declname>
        </param>
        <briefdescription>
<para>Initialize a &quot;known key&quot; X.509 engine with a known RSA public key. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>usages</computeroutput> parameter indicates the allowed key usages for that key (<computeroutput>BR_KEYTYPE_KEYX</computeroutput> and/or <computeroutput>BR_KEYTYPE_SIGN</computeroutput>).</para><para>The provided pointers are linked in, not copied, so they must remain valid while the public key may be in usage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>known public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usages</parametername>
</parameternamelist>
<parameterdescription>
<para>allowed key usages. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a79ce369dcf609ec27926fe8825eb8dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_x509_knownkey_init_ec</definition>
        <argsstring>(br_x509_knownkey_context *ctx, const br_ec_public_key *pk, unsigned usages)</argsstring>
        <name>br_x509_knownkey_init_ec</name>
        <param>
          <type><ref refid="structbr__x509__knownkey__context" kindref="compound">br_x509_knownkey_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>usages</declname>
        </param>
        <briefdescription>
<para>Initialize a &quot;known key&quot; X.509 engine with a known EC public key. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>usages</computeroutput> parameter indicates the allowed key usages for that key (<computeroutput>BR_KEYTYPE_KEYX</computeroutput> and/or <computeroutput>BR_KEYTYPE_SIGN</computeroutput>).</para><para>The provided pointers are linked in, not copied, so they must remain valid while the public key may be in usage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>known public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usages</parametername>
</parameternamelist>
<parameterdescription>
<para>allowed key usages. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a183044724b9ff13c4d6b88bb4b91f376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_x509_minimal_init</definition>
        <argsstring>(br_x509_minimal_context *ctx, const br_hash_class *dn_hash_impl, const br_x509_trust_anchor *trust_anchors, size_t trust_anchors_num)</argsstring>
        <name>br_x509_minimal_init</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dn_hash_impl</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__x509__trust__anchor" kindref="compound">br_x509_trust_anchor</ref> *</type>
          <declname>trust_anchors</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>trust_anchors_num</declname>
        </param>
        <briefdescription>
<para>Initialise a &quot;minimal&quot; X.509 engine. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>dn_hash_impl</computeroutput> parameter shall be a hash function internally used to match X.500 names (subject/issuer DN, and anchor names). Any standard hash function may be used, but a collision-resistant hash function is advised.</para><para>After initialization, some implementations for signature verification (hash functions and signature algorithms) MUST be added.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dn_hash_impl</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function for DN comparisons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_anchors</parametername>
</parameternamelist>
<parameterdescription>
<para>trust anchors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_anchors_num</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trust anchors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="757" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1aa71dd3ae52f17abfdddf0eb96d1a7168" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_x509_minimal_set_hash</definition>
        <argsstring>(br_x509_minimal_context *ctx, int id, const br_hash_class *impl)</argsstring>
        <name>br_x509_minimal_set_hash</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Set a supported hash function in an X.509 &quot;minimal&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para>Hash functions are used with signature verification algorithms. Once initialised (with <computeroutput><ref refid="bearssl__x509_8h_1a183044724b9ff13c4d6b88bb4b91f376" kindref="member">br_x509_minimal_init()</ref></computeroutput>), the context must be configured with the hash functions it shall support for that purpose. The hash function identifier MUST be one of the standard hash function identifiers (1 to 6, for MD5, SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512).</para><para>If <computeroutput>impl</computeroutput> is <computeroutput>NULL</computeroutput>, this <emphasis>removes</emphasis> support for the designated hash function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>validation context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function identifier (from 1 to 6). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>impl</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function implementation (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="779" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="779" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a27c26912c3c387289728d0b7c2331dfa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_x509_minimal_set_rsa</definition>
        <argsstring>(br_x509_minimal_context *ctx, br_rsa_pkcs1_vrfy irsa)</argsstring>
        <name>br_x509_minimal_set_rsa</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></type>
          <declname>irsa</declname>
        </param>
        <briefdescription>
<para>Set a RSA signature verification implementation in the X.509 &quot;minimal&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para>Once initialised (with <computeroutput><ref refid="bearssl__x509_8h_1a183044724b9ff13c4d6b88bb4b91f376" kindref="member">br_x509_minimal_init()</ref></computeroutput>), the context must be configured with the signature verification implementations that it is supposed to support. If <computeroutput>irsa</computeroutput> is <computeroutput>0</computeroutput>, then the RSA support is disabled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>validation context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irsa</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA signature verification implementation (or <computeroutput>0</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="798" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="798" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a1b81dd68c985dc6d0dc55b4dafccfc8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_x509_minimal_set_ecdsa</definition>
        <argsstring>(br_x509_minimal_context *ctx, const br_ec_impl *iec, br_ecdsa_vrfy iecdsa)</argsstring>
        <name>br_x509_minimal_set_ecdsa</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__ec__impl" kindref="compound">br_ec_impl</ref> *</type>
          <declname>iec</declname>
        </param>
        <param>
          <type><ref refid="bearssl__ec_8h_1abaff5c9daad6e7dc61e4a1004ef1c8c8" kindref="member">br_ecdsa_vrfy</ref></type>
          <declname>iecdsa</declname>
        </param>
        <briefdescription>
<para>Set a ECDSA signature verification implementation in the X.509 &quot;minimal&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para>Once initialised (with <computeroutput><ref refid="bearssl__x509_8h_1a183044724b9ff13c4d6b88bb4b91f376" kindref="member">br_x509_minimal_init()</ref></computeroutput>), the context must be configured with the signature verification implementations that it is supposed to support.</para><para>If <computeroutput>iecdsa</computeroutput> is <computeroutput>0</computeroutput>, then this call disables ECDSA support; in that case, <computeroutput>iec</computeroutput> may be <computeroutput>NULL</computeroutput>. Otherwise, <computeroutput>iecdsa</computeroutput> MUST point to a function that verifies ECDSA signatures with format &quot;asn1&quot;, and it will use <computeroutput>iec</computeroutput> as underlying elliptic curve support.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>validation context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iec</parametername>
</parameternamelist>
<parameterdescription>
<para>elliptic curve implementation (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iecdsa</parametername>
</parameternamelist>
<parameterdescription>
<para>ECDSA implementation (or <computeroutput>0</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="822" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="822" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1aa15bdbcb9fa20f20184b9f4689452a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_x509_minimal_init_full</definition>
        <argsstring>(br_x509_minimal_context *ctx, const br_x509_trust_anchor *trust_anchors, size_t trust_anchors_num)</argsstring>
        <name>br_x509_minimal_init_full</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__x509__trust__anchor" kindref="compound">br_x509_trust_anchor</ref> *</type>
          <declname>trust_anchors</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>trust_anchors_num</declname>
        </param>
        <briefdescription>
<para>Initialise a &quot;minimal&quot; X.509 engine with default algorithms. </para>        </briefdescription>
        <detaileddescription>
<para>This function performs the same job as <computeroutput><ref refid="bearssl__x509_8h_1a183044724b9ff13c4d6b88bb4b91f376" kindref="member">br_x509_minimal_init()</ref></computeroutput>, but also sets implementations for RSA, ECDSA, and the standard hash functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_anchors</parametername>
</parameternamelist>
<parameterdescription>
<para>trust anchors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trust_anchors_num</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trust anchors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="840" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a7f3558b1999ce904084d578700b1002c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_x509_minimal_set_time</definition>
        <argsstring>(br_x509_minimal_context *ctx, uint32_t days, uint32_t seconds)</argsstring>
        <name>br_x509_minimal_set_time</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>days</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Set the validation time for the X.509 &quot;minimal&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para>The validation time is set as two 32-bit integers, for days and seconds since a fixed epoch:</para><para><itemizedlist>
<listitem><para>Days are counted in a proleptic Gregorian calendar since January 1st, 0 AD. Year &quot;0 AD&quot; is the one that preceded &quot;1 AD&quot;; it is also traditionally known as &quot;1 BC&quot;.</para></listitem><listitem><para>Seconds are counted since midnight, from 0 to 86400 (a count of 86400 is possible only if a leap second happened).</para></listitem></itemizedlist>
</para><para>The validation date and time is understood in the UTC time zone.</para><para>If the validation date and time are not explicitly set, but BearSSL was compiled with support for the system clock on the underlying platform, then the current time will automatically be used. Otherwise, not setting the validation date and time implies a validation failure (except in case of direct trust of the EE key).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>validation context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>days</parametername>
</parameternamelist>
<parameterdescription>
<para>days since January 1st, 0 AD (Gregorian calendar). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>seconds since midnight (0 to 86400). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="869" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="869" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a2f26eb9e67e8aecfccfd3286254a6190" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_x509_minimal_set_minrsa</definition>
        <argsstring>(br_x509_minimal_context *ctx, int byte_length)</argsstring>
        <name>br_x509_minimal_set_minrsa</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>byte_length</declname>
        </param>
        <briefdescription>
<para>Set the minimal acceptable length for RSA keys (X.509 &quot;minimal&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para>The RSA key length is expressed in bytes. The default minimum key length is 128 bytes, corresponding to 1017 bits. RSA keys shorter than the configured length will be rejected, implying validation failure. This setting applies to keys extracted from certificates (both end-entity, and intermediate CA) but not to &quot;CA&quot; trust anchors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>validation context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_length</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum RSA key length, <bold>in bytes</bold> (not bits). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="890" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="890" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1abd7874fca3b70932d3abf6acbda17d8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void br_x509_minimal_set_name_elements</definition>
        <argsstring>(br_x509_minimal_context *ctx, br_name_element *elts, size_t num_elts)</argsstring>
        <name>br_x509_minimal_set_name_elements</name>
        <param>
          <type><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structbr__name__element" kindref="compound">br_name_element</ref> *</type>
          <declname>elts</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_elts</declname>
        </param>
        <briefdescription>
<para>Set the name elements to gather. </para>        </briefdescription>
        <detaileddescription>
<para>The provided array is linked in the context. The elements are gathered from the EE certificate. If the same element type is requested several times, then the relevant structures will be filled in the order the matching values are encountered in the certificate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>validation context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elts</parametername>
</parameternamelist>
<parameterdescription>
<para>array of name element structures to fill. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_elts</parametername>
</parameternamelist>
<parameterdescription>
<para>number of name element structures to fill. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="908" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="908" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a1b34a7f2ce9f8c9086491551f848ad0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_x509_decoder_init</definition>
        <argsstring>(br_x509_decoder_context *ctx, void(*append_dn)(void *ctx, const void *buf, size_t len), void *append_dn_ctx)</argsstring>
        <name>br_x509_decoder_init</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void(*)(void *ctx, const void *buf, size_t len)</type>
          <declname>append_dn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>append_dn_ctx</declname>
        </param>
        <briefdescription>
<para>Initialise an X.509 decoder context for processing a new certificate. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>append_dn()</computeroutput> callback (with opaque context <computeroutput>append_dn_ctx</computeroutput>) will be invoked to receive, chunk by chunk, the certificate&apos;s subject DN. If <computeroutput>append_dn</computeroutput> is <computeroutput>0</computeroutput> then the subject DN will be ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context to initialise. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_dn</parametername>
</parameternamelist>
<parameterdescription>
<para>DN receiver callback (or <computeroutput>0</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>append_dn_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>context for the DN receiver callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a8d0fe7d0e8f5a5a6420bf1af831b2ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_x509_decoder_push</definition>
        <argsstring>(br_x509_decoder_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_x509_decoder_push</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Push some certificate bytes into a decoder context. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>len</computeroutput> is non-zero, then that many bytes are pushed, from address <computeroutput>data</computeroutput>, into the provided decoder context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>certificate data chunk. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>certificate data chunk length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a70f524e5bc39bb6ff699cb638f74e387" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref> *</type>
        <definition>static br_x509_pkey* br_x509_decoder_get_pkey</definition>
        <argsstring>(br_x509_decoder_context *ctx)</argsstring>
        <name>br_x509_decoder_get_pkey</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Obtain the decoded public key. </para>        </briefdescription>
        <detaileddescription>
<para>Returned value is a pointer to a structure internal to the decoder context; releasing or reusing the decoder context invalidates that structure.</para><para>If decoding was not finished, or failed, then <computeroutput>NULL</computeroutput> is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the public key, or <computeroutput>NULL</computeroutput> on unfinished/error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1017" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1017" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1ac08bb052bb90916cd2dba6c9e91b2b5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int br_x509_decoder_last_error</definition>
        <argsstring>(br_x509_decoder_context *ctx)</argsstring>
        <name>br_x509_decoder_last_error</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get decoder error status. </para>        </briefdescription>
        <detaileddescription>
<para>If no error was reported yet but the certificate decoding is not finished, then the error code is <computeroutput>BR_ERR_X509_TRUNCATED</computeroutput>. If decoding was successful, then 0 is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on successful decoding, or a non-zero error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1037" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1037" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a52f7c05267e9f0dba3ea8a57e84d88d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int br_x509_decoder_isCA</definition>
        <argsstring>(br_x509_decoder_context *ctx)</argsstring>
        <name>br_x509_decoder_isCA</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the &quot;isCA&quot; flag from an X.509 decoder context. </para>        </briefdescription>
        <detaileddescription>
<para>This flag is set if the decoded certificate claims to be a CA through a Basic Constraints extension. This flag should not be read before decoding completed successfully.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the &quot;isCA&quot; flag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1059" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1059" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a80ab695c616c19a973fd8f2a3eac579d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int br_x509_decoder_get_signer_key_type</definition>
        <argsstring>(br_x509_decoder_context *ctx)</argsstring>
        <name>br_x509_decoder_get_signer_key_type</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the issuing CA key type (type of algorithm used to sign the decoded certificate). </para>        </briefdescription>
        <detaileddescription>
<para>This is <computeroutput>BR_KEYTYPE_RSA</computeroutput> or <computeroutput>BR_KEYTYPE_EC</computeroutput>. The value 0 is returned if the signature type was not recognised.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the issuing CA key type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1075" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1075" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a6f375e6f2dfb92a01e7cfcd005c36a20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int br_x509_decoder_get_signer_hash_id</definition>
        <argsstring>(br_x509_decoder_context *ctx)</argsstring>
        <name>br_x509_decoder_get_signer_hash_id</name>
        <param>
          <type><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the identifier for the hash function used to sign the decoded certificate. </para>        </briefdescription>
        <detaileddescription>
<para>This is 0 if the hash function was not recognised.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>X.509 decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signature hash function identifier. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1090" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1090" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a4b00a6191bf93b916c58f461145f0987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_skey_decoder_init</definition>
        <argsstring>(br_skey_decoder_context *ctx)</argsstring>
        <name>br_skey_decoder_init</name>
        <param>
          <type><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialise a private key decoder context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>key decoder context to initialise. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1ab56c19464ac61076ecab2bcbd080b8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void br_skey_decoder_push</definition>
        <argsstring>(br_skey_decoder_context *ctx, const void *data, size_t len)</argsstring>
        <name>br_skey_decoder_push</name>
        <param>
          <type><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Push some data bytes into a private key decoder context. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>len</computeroutput> is non-zero, then that many data bytes, starting at address <computeroutput>data</computeroutput>, are pushed into the decoder.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>key decoder context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>private key data chunk. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>private key data chunk length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1ab936f60cab1b35c2c128356a84daef71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int br_skey_decoder_last_error</definition>
        <argsstring>(const br_skey_decoder_context *ctx)</argsstring>
        <name>br_skey_decoder_last_error</name>
        <param>
          <type>const <ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the decoding status for a private key. </para>        </briefdescription>
        <detaileddescription>
<para>Decoding status is 0 on success, or a non-zero error code. If the decoding is unfinished when this function is called, then the status code <computeroutput>BR_ERR_X509_TRUNCATED</computeroutput> is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>key decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on successful decoding, or a non-zero error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1180" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1180" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a9228f3192948e56a68ef8a5707f84918" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int br_skey_decoder_key_type</definition>
        <argsstring>(const br_skey_decoder_context *ctx)</argsstring>
        <name>br_skey_decoder_key_type</name>
        <param>
          <type>const <ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the decoded private key type. </para>        </briefdescription>
        <detaileddescription>
<para>Private key type is <computeroutput>BR_KEYTYPE_RSA</computeroutput> or <computeroutput>BR_KEYTYPE_EC</computeroutput>. If decoding is not finished or failed, then 0 is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>key decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>decoded private key type, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1201" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1201" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1aff151aa02b8fef19cb4420c8339cb58a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
        <definition>static const br_rsa_private_key* br_skey_decoder_get_rsa</definition>
        <argsstring>(const br_skey_decoder_context *ctx)</argsstring>
        <name>br_skey_decoder_get_rsa</name>
        <param>
          <type>const <ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the decoded RSA private key. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns <computeroutput>NULL</computeroutput> if the decoding failed, or is not finished, or the key is not RSA. The returned pointer references structures within the context that can become invalid if the context is reused or released.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>key decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>decoded RSA private key, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1222" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1222" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a05b05c495aa7b29aa5a0647e2e3581ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref> *</type>
        <definition>static const br_ec_private_key* br_skey_decoder_get_ec</definition>
        <argsstring>(const br_skey_decoder_context *ctx)</argsstring>
        <name>br_skey_decoder_get_ec</name>
        <param>
          <type>const <ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the decoded EC private key. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns <computeroutput>NULL</computeroutput> if the decoding failed, or is not finished, or the key is not EC. The returned pointer references structures within the context that can become invalid if the context is reused or released.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>key decoder context. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>decoded EC private key, or <computeroutput>NULL</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1243" column="1" bodyfile="/docs/lib/bearssl/bearssl_x509.h" bodystart="1243" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1abf188fc6765c2320040d547b650e0553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_encode_rsa_raw_der</definition>
        <argsstring>(void *dest, const br_rsa_private_key *sk, const br_rsa_public_key *pk, const void *d, size_t dlen)</argsstring>
        <name>br_encode_rsa_raw_der</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dlen</declname>
        </param>
        <briefdescription>
<para>Encode an RSA private key (raw DER format). </para>        </briefdescription>
        <detaileddescription>
<para>This function encodes the provided key into the &quot;raw&quot; format specified in PKCS#1 (RFC 8017, Appendix C, type <computeroutput>RSAPrivateKey</computeroutput>), with DER encoding rules.</para><para>The key elements are:</para><para><itemizedlist>
<listitem><para><computeroutput>sk</computeroutput>: the private key (<computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>dp</computeroutput>, <computeroutput>dq</computeroutput> and <computeroutput>iq</computeroutput>)</para></listitem><listitem><para><computeroutput>pk</computeroutput>: the public key (<computeroutput>n</computeroutput> and <computeroutput>e</computeroutput>)</para></listitem><listitem><para><computeroutput>d</computeroutput> (size: <computeroutput>dlen</computeroutput> bytes): the private exponent</para></listitem></itemizedlist>
</para><para>The public key elements, and the private exponent <computeroutput>d</computeroutput>, can be recomputed from the private key (see <computeroutput><ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus()</ref></computeroutput>, <computeroutput><ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp()</ref></computeroutput> and <computeroutput><ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp()</ref></computeroutput>).</para><para>If <computeroutput>dest</computeroutput> is not <computeroutput>NULL</computeroutput>, then the encoded key is written at that address, and the encoded length (in bytes) is returned. If <computeroutput>dest</computeroutput> is <computeroutput>NULL</computeroutput>, then nothing is written, but the encoded length is still computed and returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA private exponent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlen</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA private exponent length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded key length (in bytes). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1aa2d52c6998d6260a885285aacb7ffde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_encode_rsa_pkcs8_der</definition>
        <argsstring>(void *dest, const br_rsa_private_key *sk, const br_rsa_public_key *pk, const void *d, size_t dlen)</argsstring>
        <name>br_encode_rsa_pkcs8_der</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dlen</declname>
        </param>
        <briefdescription>
<para>Encode an RSA private key (PKCS#8 DER format). </para>        </briefdescription>
        <detaileddescription>
<para>This function encodes the provided key into the PKCS#8 format (RFC 5958, type <computeroutput>OneAsymmetricKey</computeroutput>). It wraps around the &quot;raw DER&quot; format for the RSA key, as implemented by <computeroutput><ref refid="bearssl__x509_8h_1abf188fc6765c2320040d547b650e0553" kindref="member">br_encode_rsa_raw_der()</ref></computeroutput>.</para><para>The key elements are:</para><para><itemizedlist>
<listitem><para><computeroutput>sk</computeroutput>: the private key (<computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>dp</computeroutput>, <computeroutput>dq</computeroutput> and <computeroutput>iq</computeroutput>)</para></listitem><listitem><para><computeroutput>pk</computeroutput>: the public key (<computeroutput>n</computeroutput> and <computeroutput>e</computeroutput>)</para></listitem><listitem><para><computeroutput>d</computeroutput> (size: <computeroutput>dlen</computeroutput> bytes): the private exponent</para></listitem></itemizedlist>
</para><para>The public key elements, and the private exponent <computeroutput>d</computeroutput>, can be recomputed from the private key (see <computeroutput><ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus()</ref></computeroutput>, <computeroutput><ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp()</ref></computeroutput> and <computeroutput><ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp()</ref></computeroutput>).</para><para>If <computeroutput>dest</computeroutput> is not <computeroutput>NULL</computeroutput>, then the encoded key is written at that address, and the encoded length (in bytes) is returned. If <computeroutput>dest</computeroutput> is <computeroutput>NULL</computeroutput>, then nothing is written, but the encoded length is still computed and returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA private exponent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlen</parametername>
</parameternamelist>
<parameterdescription>
<para>the RSA private exponent length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded key length (in bytes). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1a98b3401f11002d17cb8305ff57ab893a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_encode_ec_raw_der</definition>
        <argsstring>(void *dest, const br_ec_private_key *sk, const br_ec_public_key *pk)</argsstring>
        <name>br_encode_ec_raw_der</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>Encode an EC private key (raw DER format). </para>        </briefdescription>
        <detaileddescription>
<para>This function encodes the provided key into the &quot;raw&quot; format specified in RFC 5915 (type <computeroutput>ECPrivateKey</computeroutput>), with DER encoding rules.</para><para>The private key is provided in <computeroutput>sk</computeroutput>, the public key being <computeroutput>pk</computeroutput>. If <computeroutput>pk</computeroutput> is <computeroutput>NULL</computeroutput>, then the encoded key will not include the public key in its <computeroutput>publicKey</computeroutput> field (which is nominally optional).</para><para>If <computeroutput>dest</computeroutput> is not <computeroutput>NULL</computeroutput>, then the encoded key is written at that address, and the encoded length (in bytes) is returned. If <computeroutput>dest</computeroutput> is <computeroutput>NULL</computeroutput>, then nothing is written, but the encoded length is still computed and returned.</para><para>If the key cannot be encoded (e.g. because there is no known OBJECT IDENTIFIER for the used curve), then 0 is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC public key (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded key length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__x509_8h_1ae64c72a25d5f3a3d8ddd8105de16a8a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_encode_ec_pkcs8_der</definition>
        <argsstring>(void *dest, const br_ec_private_key *sk, const br_ec_public_key *pk)</argsstring>
        <name>br_encode_ec_pkcs8_der</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>Encode an EC private key (PKCS#8 DER format). </para>        </briefdescription>
        <detaileddescription>
<para>This function encodes the provided key into the PKCS#8 format (RFC 5958, type <computeroutput>OneAsymmetricKey</computeroutput>). The curve is identified by an OID provided as parameters to the <computeroutput>privateKeyAlgorithm</computeroutput> field. The private key value (contents of the <computeroutput>privateKey</computeroutput> field) contains the DER encoding of the <computeroutput>ECPrivateKey</computeroutput> type defined in RFC 5915, without the <computeroutput>parameters</computeroutput> field (since they would be redundant with the information in <computeroutput>privateKeyAlgorithm</computeroutput>).</para><para>The private key is provided in <computeroutput>sk</computeroutput>, the public key being <computeroutput>pk</computeroutput>. If <computeroutput>pk</computeroutput> is not <computeroutput>NULL</computeroutput>, then the encoded public key is included in the <computeroutput>publicKey</computeroutput> field of the private key value (but not in the <computeroutput>publicKey</computeroutput> field of the PKCS#8 <computeroutput>OneAsymmetricKey</computeroutput> wrapper).</para><para>If <computeroutput>dest</computeroutput> is not <computeroutput>NULL</computeroutput>, then the encoded key is written at that address, and the encoded length (in bytes) is returned. If <computeroutput>dest</computeroutput> is <computeroutput>NULL</computeroutput>, then nothing is written, but the encoded length is still computed and returned.</para><para>If the key cannot be encoded (e.g. because there is no known OBJECT IDENTIFIER for the used curve), then 0 is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>the EC public key (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded key length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_x509.h" line="1375" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="1">X.509 Certificate Chain Processing</heading>
</para><para>An X.509 processing engine receives an X.509 chain, chunk by chunk, as received from a SSL/TLS client or server (the client receives the server&apos;s certificate chain, and the server receives the client&apos;s certificate chain if it requested a client certificate). The chain is thus injected in the engine in SSL order (end-entity first).</para><para>The engine&apos;s job is to return the public key to use for SSL/TLS. How exactly that key is obtained and verified is entirely up to the engine.</para><para><bold>The &quot;known key&quot; engine</bold> returns a public key which is already known from out-of-band information (e.g. the client <emphasis>remembers</emphasis> the key from a previous connection, as in the usual SSH model). This is the simplest engine since it simply ignores the chain, thereby avoiding the need for any decoding logic.</para><para><bold>The &quot;minimal&quot; engine</bold> implements minimal X.509 decoding and chain validation:</para><para><itemizedlist>
<listitem><para>The provided chain should validate &quot;as is&quot;. There is no attempt at reordering, skipping or downloading extra certificates.</para></listitem><listitem><para>X.509 v1, v2 and v3 certificates are supported.</para></listitem><listitem><para>Trust anchors are a DN and a public key. Each anchor is either a &quot;CA&quot; anchor, or a non-CA.</para></listitem><listitem><para>If the end-entity certificate matches a non-CA anchor (subject DN is equal to the non-CA name, and public key is also identical to the anchor key), then this is a <emphasis>direct trust</emphasis> case and the remaining certificates are ignored.</para></listitem><listitem><para>Unless direct trust is applied, the chain must be verifiable up to a certificate whose issuer DN matches the DN from a &quot;CA&quot; trust anchor, and whose signature is verifiable against that anchor&apos;s public key. Subsequent certificates in the chain are ignored.</para></listitem><listitem><para>The engine verifies subject/issuer DN matching, and enforces processing of Basic Constraints and Key Usage extensions. The Authority Key Identifier, Subject Key Identifier, Issuer Alt Name, Subject Directory Attribute, CRL Distribution Points, Freshest CRL, Authority Info Access and Subject Info Access extensions are ignored. The Subject Alt Name is decoded for the end-entity certificate under some conditions (see below). Other extensions are ignored if non-critical, or imply chain rejection if critical.</para></listitem><listitem><para>The Subject Alt Name extension is parsed for names of type <computeroutput>dNSName</computeroutput> when decoding the end-entity certificate, and only if there is a server name to match. If there is no SAN extension, then the Common Name from the subjectDN is used. That name matching is case-insensitive and honours a single starting wildcard (i.e. if the name in the certificate starts with &quot;`*.`&quot; then this matches any word as first element). Note: this name matching is performed also in the &quot;direct trust&quot; model.</para></listitem><listitem><para>DN matching is byte-to-byte equality (a future version might include some limited processing for case-insensitive matching and whitespace normalisation).</para></listitem><listitem><para>Successful validation produces a public key type but also a set of allowed usages (<computeroutput>BR_KEYTYPE_KEYX</computeroutput> and/or <computeroutput>BR_KEYTYPE_SIGN</computeroutput>). The caller is responsible for checking that the key type and usages are compatible with the expected values (e.g. with the selected cipher suite, when the client validates the server&apos;s certificate).</para></listitem></itemizedlist>
</para><para><bold>Important caveats:</bold></para><para><itemizedlist>
<listitem><para>The &quot;minimal&quot; engine does not check revocation status. The relevant extensions are ignored, and CRL or OCSP responses are not gathered or checked.</para></listitem><listitem><para>The &quot;minimal&quot; engine does not currently support Name Constraints (some basic functionality to handle sub-domains may be added in a later version).</para></listitem><listitem><para>The decoder is not &quot;validating&quot; in the sense that it won&apos;t reject some certificates with invalid field values when these fields are not actually processed. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Thomas<sp/>Pornin<sp/>&lt;pornin@bolet.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_BEARSSL_X509_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_BEARSSL_X509_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bearssl__ec_8h" kindref="compound">bearssl_ec.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bearssl__hash_8h" kindref="compound">bearssl_hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bearssl__rsa_8h" kindref="compound">bearssl_rsa.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>X.509<sp/>error<sp/>codes<sp/>are<sp/>in<sp/>the<sp/>32..63<sp/>range.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="bearssl__x509_8h_1a1713df679830bd69521cc939cab39795" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="bearssl__x509_8h_1adb3fb396c748032c6efa6525ad03cf75" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_INVALID_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>33</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="bearssl__x509_8h_1a8b445cbe2575b9599185da86056517f2" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_TRUNCATED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>34</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="bearssl__x509_8h_1aa48ca05c973de29e6b72617d71b8a20b" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_EMPTY_CHAIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="bearssl__x509_8h_1a5a1ef832c53c92ed31ea4ced41d830a1" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_INNER_TRUNC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="bearssl__x509_8h_1ad74563eca438c807cdd34601895a520e" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_TAG_CLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>37</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="bearssl__x509_8h_1a80f3d62dae18d5ba825669b8327dc222" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_TAG_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="bearssl__x509_8h_1a5eca7f43877fb54d56f83cc6485cbd7f" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_INDEFINITE_LENGTH<sp/><sp/><sp/><sp/><sp/>39</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="bearssl__x509_8h_1a5b1a43a6a5527c3f1b9c74be101b1370" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_EXTRA_ELEMENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="bearssl__x509_8h_1a26c5e29f093f6eeb4147472056d03aed" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_UNEXPECTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="bearssl__x509_8h_1a510bdeb41a9782fb80616f3418492bb1" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_NOT_CONSTRUCTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>42</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="bearssl__x509_8h_1ac5c08b9752662c478d9349e361ba68cf" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_NOT_PRIMITIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>43</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="bearssl__x509_8h_1a12493cab12ebee5e0e2b7562c4358702" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_PARTIAL_BYTE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="bearssl__x509_8h_1aee3368e0cad941d65856dbcb721b730e" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_BOOLEAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>45</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="bearssl__x509_8h_1a4a133e8d6152a9161a40a85536404fc0" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_OVERFLOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>46</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="bearssl__x509_8h_1a21a6d9cb8c5d2e2930029534e3b3338e" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_DN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>47</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="bearssl__x509_8h_1a8a0c65156da06846c30f3e7b2aa558b8" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="bearssl__x509_8h_1a4a9c8afe343765b22382298a3cabdd2f" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_UNSUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="bearssl__x509_8h_1aa6c69bc7b1c049fba240319f65772597" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_LIMIT_EXCEEDED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="bearssl__x509_8h_1a7a73183803aeecefe30215ecf80fac1b" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_WRONG_KEY_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="bearssl__x509_8h_1af9e74d2d7c70c880b09d7d94d84e7b1a" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_SIGNATURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>52</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="bearssl__x509_8h_1a72c572f1b9c48d94223d2dfafe6eff57" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_TIME_UNKNOWN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>53</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="bearssl__x509_8h_1acf49f37ed522b5dcd027fe9cfac82ffd" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_EXPIRED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>54</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="bearssl__x509_8h_1a57ead28e301eea1bf920fc326cd49664" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_DN_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>55</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="bearssl__x509_8h_1a2f402b64447ac4f5a8c6aac76ed554c1" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_BAD_SERVER_NAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/>56</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="bearssl__x509_8h_1ad86cd52316e312c88a59b2814c96d60f" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_CRITICAL_EXTENSION<sp/><sp/><sp/><sp/>57</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="bearssl__x509_8h_1a6bf90db87eefa0be5cd725432ae0a7c9" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_NOT_CA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>58</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="bearssl__x509_8h_1a5440a6d99f7284d191bb6c2ce51508ba" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_FORBIDDEN_KEY_USAGE<sp/><sp/><sp/>59</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="bearssl__x509_8h_1a7342dc5f96cebafcf93100d46a7871c5" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_WEAK_PUBLIC_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>60</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="bearssl__x509_8h_1ad5e550c257b6d6425f87d13c2783e056" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ERR_X509_NOT_TRUSTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>62</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="structbr__x509__pkey" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230" refid="structbr__x509__pkey_1ae71f837af474a3a78e41a2be9c54001f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__pkey_1ae71f837af474a3a78e41a2be9c54001f" kindref="member">key_type</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234" refid="structbr__x509__pkey_1a7f7c843bd143d99567e9975cfddb4aba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/><ref refid="structbr__x509__pkey_1a7f7c843bd143d99567e9975cfddb4aba" kindref="member">rsa</ref>;</highlight></codeline>
<codeline lineno="236" refid="structbr__x509__pkey_1a406633613711a0ccd38729a11c84e2a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref><sp/><ref refid="structbr__x509__pkey_1a406633613711a0ccd38729a11c84e2a8" kindref="member">ec</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>key;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}<sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="structbr__x500__name" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247" refid="structbr__x500__name_1aa0be18c6acf0e6585f5abde290c873dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__x500__name_1aa0be18c6acf0e6585f5abde290c873dc" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="249" refid="structbr__x500__name_1af204bdadd183aee37e421bd2bd516c13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__x500__name_1af204bdadd183aee37e421bd2bd516c13" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/><ref refid="structbr__x500__name" kindref="compound">br_x500_name</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="structbr__x509__trust__anchor" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257" refid="structbr__x509__trust__anchor_1aa2443241c80366d647110a92f27b04a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__x500__name" kindref="compound">br_x500_name</ref><sp/><ref refid="structbr__x509__trust__anchor_1aa2443241c80366d647110a92f27b04a9" kindref="member">dn</ref>;</highlight></codeline>
<codeline lineno="259" refid="structbr__x509__trust__anchor_1a71b8c4a0218e48d7faa711952d32b0e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__trust__anchor_1a71b8c4a0218e48d7faa711952d32b0e1" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="261" refid="structbr__x509__trust__anchor_1a7eb4fab6abb7b3e2cb7b46799d8d8db6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref><sp/><ref refid="structbr__x509__trust__anchor_1a7eb4fab6abb7b3e2cb7b46799d8d8db6" kindref="member">pkey</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}<sp/><ref refid="structbr__x509__trust__anchor" kindref="compound">br_x509_trust_anchor</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="bearssl__x509_8h_1a5f63e9c9bf9ef4ee76354f4662ea0d74" refkind="member"><highlight class="preprocessor">#define<sp/>BR_X509_TA_CA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>Key<sp/>type:<sp/>combination<sp/>of<sp/>a<sp/>basic<sp/>key<sp/>type<sp/>(low<sp/>4<sp/>bits)<sp/>and<sp/>some</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>optional<sp/>flags.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>For<sp/>a<sp/>public<sp/>key,<sp/>the<sp/>basic<sp/>key<sp/>type<sp/>only<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>For<sp/>an<sp/>expected<sp/>key<sp/>type,<sp/>the<sp/>flags<sp/>indicate<sp/>the<sp/>intended<sp/>purpose(s)</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>key;<sp/>the<sp/>basic<sp/>key<sp/>type<sp/>may<sp/>be<sp/>set<sp/>to<sp/>0<sp/>to<sp/>indicate<sp/>that<sp/>any</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>key<sp/>type<sp/>compatible<sp/>with<sp/>the<sp/>indicated<sp/>purpose<sp/>is<sp/>acceptable.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="284" refid="bearssl__x509_8h_1abbcac225e09cbd86978e9273013d9fdb" refkind="member"><highlight class="preprocessor">#define<sp/>BR_KEYTYPE_RSA<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="bearssl__x509_8h_1a3a1aac0260adb768632b555740b5dfe4" refkind="member"><highlight class="preprocessor">#define<sp/>BR_KEYTYPE_EC<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="bearssl__x509_8h_1ad0585c052f9a73cc7b83f7ab9a1c9b28" refkind="member"><highlight class="preprocessor">#define<sp/>BR_KEYTYPE_KEYX<sp/><sp/><sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="bearssl__x509_8h_1a2b2bd4c6ec8d26754645743ca26ba9ac" refkind="member"><highlight class="preprocessor">#define<sp/>BR_KEYTYPE_SIGN<sp/><sp/><sp/>0x20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>start_chain<sp/><sp/><sp/>Called<sp/>when<sp/>a<sp/>new<sp/>chain<sp/>is<sp/>started.<sp/>If<sp/>&apos;server_name&apos;</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>NULL<sp/>and<sp/>non-empty,<sp/>then<sp/>it<sp/>is<sp/>a<sp/>name<sp/>that</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>be<sp/>looked<sp/>for<sp/>in<sp/>the<sp/>EE<sp/>certificate<sp/>(in<sp/>the</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAN<sp/>extension<sp/>as<sp/>dNSName,<sp/>or<sp/>in<sp/>the<sp/>subjectDN&apos;s<sp/>CN</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>there<sp/>is<sp/>no<sp/>SAN<sp/>extension).</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>caller<sp/>ensures<sp/>that<sp/>the<sp/>provided<sp/>&apos;server_name&apos;</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>remains<sp/>valid<sp/>throughout<sp/>validation.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>start_cert<sp/><sp/><sp/><sp/>Begins<sp/>a<sp/>new<sp/>certificate<sp/>in<sp/>the<sp/>chain.<sp/>The<sp/>provided</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>is<sp/>in<sp/>bytes;<sp/>this<sp/>is<sp/>the<sp/>total<sp/>certificate<sp/>length.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>append<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>some<sp/>additional<sp/>bytes<sp/>for<sp/>the<sp/>current<sp/>certificate.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>end_cert<sp/><sp/><sp/><sp/><sp/><sp/>Ends<sp/>the<sp/>current<sp/>certificate.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>end_chain<sp/><sp/><sp/><sp/><sp/>Called<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>chain.<sp/>Returned<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>on<sp/>success,<sp/>or<sp/>a<sp/>non-zero<sp/>error<sp/>code.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>get_pkey<sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>EE<sp/>certificate<sp/>public<sp/>key.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>For<sp/>a<sp/>complete<sp/>chain,<sp/>start_chain()<sp/>and<sp/>end_chain()<sp/>are<sp/>always</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>called.<sp/>For<sp/>each<sp/>certificate,<sp/>start_cert(),<sp/>some<sp/>append()<sp/>calls,<sp/>then</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>end_cert()<sp/>are<sp/>called,<sp/>in<sp/>that<sp/>order.<sp/>There<sp/>may<sp/>be<sp/>no<sp/>append()<sp/>call</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>at<sp/>all<sp/>if<sp/>the<sp/>certificate<sp/>is<sp/>empty<sp/>(which<sp/>is<sp/>not<sp/>valid<sp/>but<sp/>may<sp/>happen</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>if<sp/>the<sp/>peer<sp/>sends<sp/>exactly<sp/>that).</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>get_pkey()<sp/>shall<sp/>return<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>structure<sp/>that<sp/>is<sp/>valid<sp/>as</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>long<sp/>as<sp/>a<sp/>new<sp/>chain<sp/>is<sp/>not<sp/>started.<sp/>This<sp/>may<sp/>be<sp/>a<sp/>sub-structure</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>within<sp/>the<sp/>context<sp/>for<sp/>the<sp/>engine.<sp/>This<sp/>function<sp/>MAY<sp/>return<sp/>a<sp/>valid</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>pointer<sp/>to<sp/>a<sp/>public<sp/>key<sp/>even<sp/>in<sp/>some<sp/>cases<sp/>of<sp/>validation<sp/>failure,</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>depending<sp/>on<sp/>the<sp/>validation<sp/>engine.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="bearssl__x509_8h_1acf3af5c1ad4007b178e4c6d68ce5bb0d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__x509__class__" kindref="compound">br_x509_class_</ref><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref>;</highlight></codeline>
<codeline lineno="369" refid="structbr__x509__class__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbr__x509__class__" kindref="compound">br_x509_class_</ref><sp/>{</highlight></codeline>
<codeline lineno="373" refid="structbr__x509__class___1a93c4a22bc7c439b5e32033d561b5fe85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class___1a93c4a22bc7c439b5e32033d561b5fe85" kindref="member">context_size</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="structbr__x509__class___1a61fcfd55c81fd2d32edeedd64714c7e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__x509__class___1a61fcfd55c81fd2d32edeedd64714c7e2" kindref="member">start_chain</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*server_name);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="structbr__x509__class___1a7f09733a83c0badbb24128d26440ff55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__x509__class___1a7f09733a83c0badbb24128d26440ff55" kindref="member">start_cert</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>**ctx,<sp/>uint32_t<sp/>length);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="structbr__x509__class___1a132f22c46f8798f0e2cce6d14b49140d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__x509__class___1a132f22c46f8798f0e2cce6d14b49140d" kindref="member">append</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>**ctx,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="structbr__x509__class___1afd2f28171e46b4a1408101d54a59b18c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structbr__x509__class___1afd2f28171e46b4a1408101d54a59b18c" kindref="member">end_cert</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>**ctx);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="structbr__x509__class___1a362ee4b09649989960014aa9b3bf2fdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>(*<ref refid="structbr__x509__class___1a362ee4b09649989960014aa9b3bf2fdc" kindref="member">end_chain</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>**ctx);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="structbr__x509__class___1a307c5d22b156e8affd3f7f3f0b7f87ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref><sp/>*(*get_pkey)(</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*usages);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="structbr__x509__knownkey__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="481" refid="structbr__x509__knownkey__context_1a22524872202ea576776e904a80aea92f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>*<ref refid="structbr__x509__knownkey__context_1a22524872202ea576776e904a80aea92f" kindref="member">vtable</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref><sp/>pkey;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>usages;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">}<sp/><ref refid="structbr__x509__knownkey__context" kindref="compound">br_x509_knownkey_context</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/><ref refid="bearssl__x509_8h_1abb114e00d31b7520ea44323cd3a4f884" kindref="member">br_x509_knownkey_vtable</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1af89092ad96523f50ef0c104d38a58e62" kindref="member">br_x509_knownkey_init_rsa</ref>(<ref refid="structbr__x509__knownkey__context" kindref="compound">br_x509_knownkey_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>usages);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a79ce369dcf609ec27926fe8825eb8dfb" kindref="member">br_x509_knownkey_init_ec</ref>(<ref refid="structbr__x509__knownkey__context" kindref="compound">br_x509_knownkey_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>usages);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>The<sp/>minimal<sp/>X.509<sp/>engine<sp/>has<sp/>some<sp/>state<sp/>buffers<sp/>which<sp/>must<sp/>be<sp/>large</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>enough<sp/>to<sp/>simultaneously<sp/>accommodate:</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>--<sp/>the<sp/>public<sp/>key<sp/>extracted<sp/>from<sp/>the<sp/>current<sp/>certificate;</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>--<sp/>the<sp/>signature<sp/>on<sp/>the<sp/>current<sp/>certificate<sp/>or<sp/>on<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>certificate;</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>--<sp/>the<sp/>public<sp/>key<sp/>extracted<sp/>from<sp/>the<sp/>EE<sp/>certificate.</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>We<sp/>store<sp/>public<sp/>key<sp/>elements<sp/>in<sp/>their<sp/>raw<sp/>unsigned<sp/>big-endian</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>encoding.<sp/>We<sp/>want<sp/>to<sp/>support<sp/>up<sp/>to<sp/>RSA-4096<sp/>with<sp/>a<sp/>short<sp/>(up<sp/>to<sp/>64</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>bits)<sp/>public<sp/>exponent,<sp/>thus<sp/>a<sp/>buffer<sp/>for<sp/>a<sp/>public<sp/>key<sp/>must<sp/>have</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/>length<sp/>at<sp/>least<sp/>520<sp/>bytes.<sp/>Similarly,<sp/>a<sp/>RSA-4096<sp/>signature<sp/>has<sp/>length</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>512<sp/>bytes.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>Though<sp/>RSA<sp/>public<sp/>exponents<sp/>can<sp/>formally<sp/>be<sp/>as<sp/>large<sp/>as<sp/>the<sp/>modulus</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>(mathematically,<sp/>even<sp/>larger<sp/>exponents<sp/>would<sp/>work,<sp/>but<sp/>PKCS#1<sp/>forbids</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/>them),<sp/>exponents<sp/>that<sp/>do<sp/>not<sp/>fit<sp/>on<sp/>32<sp/>bits<sp/>are<sp/>extremely<sp/>rare,</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>notably<sp/>because<sp/>some<sp/>widespread<sp/>implementations<sp/>(e.g.<sp/>Microsoft&apos;s</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>CryptoAPI)<sp/>don&apos;t<sp/>support<sp/>them.<sp/>Moreover,<sp/>large<sp/>public<sp/>exponent<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>seem<sp/>to<sp/>imply<sp/>any<sp/>tangible<sp/>security<sp/>benefit,<sp/>and<sp/>they<sp/>increase<sp/>the</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>cost<sp/>of<sp/>public<sp/>key<sp/>operations.<sp/>The<sp/>X.509<sp/>&quot;minimal&quot;<sp/>engine<sp/>will<sp/>tolerate</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>public<sp/>exponents<sp/>of<sp/>arbitrary<sp/>size<sp/>as<sp/>long<sp/>as<sp/>the<sp/>modulus<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>exponent<sp/>can<sp/>fit<sp/>together<sp/>in<sp/>the<sp/>dedicated<sp/>buffer.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>EC<sp/>public<sp/>keys<sp/>are<sp/>shorter<sp/>than<sp/>RSA<sp/>public<sp/>keys;<sp/>even<sp/>with<sp/>curve</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>NIST<sp/>P-521<sp/>(the<sp/>largest<sp/>curve<sp/>we<sp/>care<sp/>to<sp/>support),<sp/>a<sp/>public<sp/>key<sp/>is</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>encoded<sp/>over<sp/>133<sp/>bytes<sp/>only.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_X509_BUFSIZE_KEY<sp/><sp/><sp/>520</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_X509_BUFSIZE_SIG<sp/><sp/><sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="structbr__name__element" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="602" refid="structbr__name__element_1ae21b72b8ccfe1f2da35a43d307e16a76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__name__element_1ae21b72b8ccfe1f2da35a43d307e16a76" kindref="member">oid</ref>;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="structbr__name__element_1a63622d35b5d168c6bbcdf28d50b32210" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__name__element_1a63622d35b5d168c6bbcdf28d50b32210" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="structbr__name__element_1a4dfc9930093f0dbbaa94dd8684d58716" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__name__element_1a4dfc9930093f0dbbaa94dd8684d58716" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="624" refid="structbr__name__element_1a19c2c4bf8e97473e995130193eec553b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structbr__name__element_1a19c2c4bf8e97473e995130193eec553b" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">}<sp/><ref refid="structbr__name__element" kindref="compound">br_name_element</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="structbr__x509__minimal__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/>*vtable;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Structure<sp/>for<sp/>returning<sp/>the<sp/>EE<sp/>public<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref><sp/>pkey;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CPU<sp/>for<sp/>the<sp/>T0<sp/>virtual<sp/>machine.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dp;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*rp;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>cpu;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dp_stack[32];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rp_stack[32];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Server<sp/>name<sp/>to<sp/>match<sp/>with<sp/>the<sp/>SAN<sp/>/<sp/>CN<sp/>of<sp/>the<sp/>EE<sp/>certificate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*server_name;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validated<sp/>key<sp/>usages.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key_usages;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Explicitly<sp/>set<sp/>date<sp/>and<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>days,<sp/>seconds;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>certificate<sp/>length<sp/>(in<sp/>bytes).<sp/>Set<sp/>to<sp/>0<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>certificate<sp/>has<sp/>been<sp/>fully<sp/>processed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cert_length;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>certificates<sp/>processed<sp/>so<sp/>far<sp/>in<sp/>the<sp/>current<sp/>chain.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>incremented<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>processing<sp/>of<sp/>a<sp/>certificate,</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>it<sp/>is<sp/>0<sp/>for<sp/>the<sp/>EE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_certs;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Certificate<sp/>data<sp/>chunk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hbuf;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hlen;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>pad<sp/>serves<sp/>as<sp/>destination<sp/>for<sp/>various<sp/>operations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pad[256];</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>for<sp/>EE<sp/>public<sp/>key<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ee_pkey_data[BR_X509_BUFSIZE_KEY];</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>for<sp/>currently<sp/>decoded<sp/>public<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pkey_data[BR_X509_BUFSIZE_KEY];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Signature<sp/>type:<sp/>signer<sp/>key<sp/>type,<sp/>offset<sp/>to<sp/>the<sp/>hash</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>OID<sp/>(in<sp/>the<sp/>T0<sp/>data<sp/>block)<sp/>and<sp/>hash<sp/>function</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>length<sp/>(TBS<sp/>hash<sp/>length).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cert_signer_key_type;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>cert_sig_hash_oid;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cert_sig_hash_len;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Current/last<sp/>certificate<sp/>signature.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cert_sig[BR_X509_BUFSIZE_SIG];</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>cert_sig_len;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minimum<sp/>RSA<sp/>key<sp/>length<sp/>(difference<sp/>in<sp/>bytes<sp/>from<sp/>128).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>min_rsa_size;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configured<sp/>trust<sp/>anchors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__trust__anchor" kindref="compound">br_x509_trust_anchor</ref><sp/>*trust_anchors;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trust_anchors_num;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Multi-hasher<sp/>for<sp/>the<sp/>TBS.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>do_mhash;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__multihash__context" kindref="compound">br_multihash_context</ref><sp/>mhash;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tbs_hash[64];</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Simple<sp/>hasher<sp/>for<sp/>the<sp/>subject/issuer<sp/>DN.</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>do_dn_hash;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dn_hash_impl;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionbr__hash__compat__context" kindref="compound">br_hash_compat_context</ref><sp/>dn_hash;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>current_dn_hash[64];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>next_dn_hash[64];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>saved_dn_hash[64];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Name<sp/>elements<sp/>to<sp/>gather.</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__name__element" kindref="compound">br_name_element</ref><sp/>*name_elts;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_name_elts;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Public<sp/>key<sp/>cryptography<sp/>implementations<sp/>(signature<sp/>verification).</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref><sp/>irsa;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bearssl__ec_8h_1abaff5c9daad6e7dc61e4a1004ef1c8c8" kindref="member">br_ecdsa_vrfy</ref><sp/>iecdsa;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__impl" kindref="compound">br_ec_impl</ref><sp/>*iec;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">}<sp/><ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__class__" kindref="compound">br_x509_class</ref><sp/><ref refid="bearssl__x509_8h_1aee76f2097e6c267a77e458e11b237c62" kindref="member">br_x509_minimal_vtable</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a183044724b9ff13c4d6b88bb4b91f376" kindref="member">br_x509_minimal_init</ref>(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dn_hash_impl,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__trust__anchor" kindref="compound">br_x509_trust_anchor</ref><sp/>*trust_anchors,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trust_anchors_num);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal">br_x509_minimal_set_hash(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*impl)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>br_multihash_setimpl(&amp;ctx-&gt;mhash,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>impl);</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">br_x509_minimal_set_rsa(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref><sp/>irsa)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;irsa<sp/>=<sp/>irsa;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal">br_x509_minimal_set_ecdsa(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__impl" kindref="compound">br_ec_impl</ref><sp/>*iec,<sp/><ref refid="bearssl__ec_8h_1abaff5c9daad6e7dc61e4a1004ef1c8c8" kindref="member">br_ecdsa_vrfy</ref><sp/>iecdsa)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;iecdsa<sp/>=<sp/>iecdsa;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;iec<sp/>=<sp/>iec;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1aa15bdbcb9fa20f20184b9f4689452a70" kindref="member">br_x509_minimal_init_full</ref>(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__trust__anchor" kindref="compound">br_x509_trust_anchor</ref><sp/>*trust_anchors,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trust_anchors_num);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal">br_x509_minimal_set_time(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>days,<sp/>uint32_t<sp/>seconds)</highlight></codeline>
<codeline lineno="871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;days<sp/>=<sp/>days;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;seconds<sp/>=<sp/>seconds;</highlight></codeline>
<codeline lineno="874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">br_x509_minimal_set_minrsa(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_length)</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;min_rsa_size<sp/>=<sp/>(int16_t)(byte_length<sp/>-<sp/>128);</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">br_x509_minimal_set_name_elements(<ref refid="structbr__x509__minimal__context" kindref="compound">br_x509_minimal_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__name__element" kindref="compound">br_name_element</ref><sp/>*elts,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_elts)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;name_elts<sp/>=<sp/>elts;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;num_name_elts<sp/>=<sp/>num_elts;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="924" refid="structbr__x509__decoder__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Structure<sp/>for<sp/>returning<sp/>the<sp/>public<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref><sp/>pkey;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CPU<sp/>for<sp/>the<sp/>T0<sp/>virtual<sp/>machine.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dp;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*rp;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>cpu;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dp_stack[32];</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rp_stack[32];</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>pad<sp/>serves<sp/>as<sp/>destination<sp/>for<sp/>various<sp/>operations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pad[256];</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flag<sp/>set<sp/>when<sp/>decoding<sp/>succeeds.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>decoded;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Validity<sp/>dates.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>notbefore_days,<sp/>notbefore_seconds;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>notafter_days,<sp/>notafter_seconds;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>&quot;CA&quot;<sp/>flag.<sp/>This<sp/>is<sp/>set<sp/>to<sp/>true<sp/>if<sp/>the<sp/>certificate<sp/>contains</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>Basic<sp/>Constraints<sp/>extension<sp/>that<sp/>asserts<sp/>CA<sp/>status.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>isCA;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DN<sp/>processing:<sp/>the<sp/>subject<sp/>DN<sp/>is<sp/>extracted<sp/>and<sp/>pushed<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provided<sp/>callback.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>copy_dn;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*append_dn_ctx;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*append_dn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Certificate<sp/>data<sp/>chunk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hbuf;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hlen;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>for<sp/>decoded<sp/>public<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pkey_data[BR_X509_BUFSIZE_KEY];</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Type<sp/>of<sp/>key<sp/>and<sp/>hash<sp/>function<sp/>used<sp/>in<sp/>the<sp/>certificate<sp/>signature.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>signer_key_type;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>signer_hash_id;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal">}<sp/><ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref>;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a1b34a7f2ce9f8c9086491551f848ad0f" kindref="member">br_x509_decoder_init</ref>(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*append_dn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len),</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*append_dn_ctx);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a8d0fe7d0e8f5a5a6420bf1af831b2ad5" kindref="member">br_x509_decoder_push</ref>(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__pkey" kindref="compound">br_x509_pkey</ref><sp/>*</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">br_x509_decoder_get_pkey(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;decoded<sp/>&amp;&amp;<sp/>ctx-&gt;err<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ctx-&gt;pkey;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal">br_x509_decoder_last_error(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;err<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;err;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctx-&gt;decoded)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a8b445cbe2575b9599185da86056517f2" kindref="member">BR_ERR_X509_TRUNCATED</ref>;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">br_x509_decoder_isCA(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;isCA;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">br_x509_decoder_get_signer_key_type(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;signer_key_type;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">br_x509_decoder_get_signer_hash_id(<ref refid="structbr__x509__decoder__context" kindref="compound">br_x509_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;signer_hash_id;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098" refid="structbr__x509__certificate" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100" refid="structbr__x509__certificate_1a05ee770fbbc9ab1bbe4e932af3f3a22e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__x509__certificate_1a05ee770fbbc9ab1bbe4e932af3f3a22e" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="1102" refid="structbr__x509__certificate_1aef9b6a9e5470288040f251b892fa1b4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__x509__certificate_1aef9b6a9e5470288040f251b892fa1b4f" kindref="member">data_len</ref>;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}<sp/><ref refid="structbr__x509__certificate" kindref="compound">br_x509_certificate</ref>;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114" refid="structbr__skey__decoder__context" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_DOXYGEN_IGNORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Structure<sp/>for<sp/>returning<sp/>the<sp/>private<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>rsa;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref><sp/>ec;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>key;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CPU<sp/>for<sp/>the<sp/>T0<sp/>virtual<sp/>machine.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*dp;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*rp;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ip;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>cpu;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dp_stack[32];</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rp_stack[32];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Private<sp/>key<sp/>data<sp/>chunk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hbuf;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hlen;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>pad<sp/>serves<sp/>as<sp/>destination<sp/>for<sp/>various<sp/>operations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pad[256];</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decoded<sp/>key<sp/>type;<sp/>0<sp/>until<sp/>decoding<sp/>is<sp/>complete.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key_type;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>for<sp/>the<sp/>private<sp/>key<sp/>elements.<sp/>It<sp/>shall<sp/>be<sp/>large<sp/>enough</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>accommodate<sp/>all<sp/>elements<sp/>for<sp/>a<sp/>RSA-4096<sp/>private<sp/>key<sp/>(roughly</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>five<sp/>2048-bit<sp/>integers,<sp/>possibly<sp/>a<sp/>bit<sp/>more).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key_data[3<sp/>*<sp/>BR_X509_BUFSIZE_SIG];</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}<sp/><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref>;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a4b00a6191bf93b916c58f461145f0987" kindref="member">br_skey_decoder_init</ref>(<ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1ab56c19464ac61076ecab2bcbd080b8ea" kindref="member">br_skey_decoder_push</ref>(<ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">br_skey_decoder_last_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;err<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;err;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;key_type<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a8b445cbe2575b9599185da86056517f2" kindref="member">BR_ERR_X509_TRUNCATED</ref>;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal">br_skey_decoder_key_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;err<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;key_type;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">br_skey_decoder_get_rsa(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;err<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>ctx-&gt;key_type<sp/>==<sp/><ref refid="bearssl__x509_8h_1abbcac225e09cbd86978e9273013d9fdb" kindref="member">BR_KEYTYPE_RSA</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ctx-&gt;key.rsa;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref><sp/>*</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">br_skey_decoder_get_ec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__skey__decoder__context" kindref="compound">br_skey_decoder_context</ref><sp/>*ctx)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;err<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>ctx-&gt;key_type<sp/>==<sp/><ref refid="bearssl__x509_8h_1a3a1aac0260adb768632b555740b5dfe4" kindref="member">BR_KEYTYPE_EC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ctx-&gt;key.ec;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1abf188fc6765c2320040d547b650e0553" kindref="member">br_encode_rsa_raw_der</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlen);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1aa2d52c6998d6260a885285aacb7ffde1" kindref="member">br_encode_rsa_pkcs8_der</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlen);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1a98b3401f11002d17cb8305ff57ab893a" kindref="member">br_encode_ec_raw_der</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__x509_8h_1ae64c72a25d5f3a3d8ddd8105de16a8a8" kindref="member">br_encode_ec_pkcs8_der</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__private__key" kindref="compound">br_ec_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__ec__public__key" kindref="compound">br_ec_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381" refid="bearssl__x509_8h_1af95b588de4303cf590c2f18d038e6f82" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ENCODE_PEM_RSA_RAW<sp/><sp/><sp/><sp/><sp/><sp/>&quot;RSA<sp/>PRIVATE<sp/>KEY&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386" refid="bearssl__x509_8h_1a2db01781a6e7322133e640ef82de0af1" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ENCODE_PEM_EC_RAW<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;EC<sp/>PRIVATE<sp/>KEY&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391" refid="bearssl__x509_8h_1a348912c232920f05f810d4474be6053a" refkind="member"><highlight class="preprocessor">#define<sp/>BR_ENCODE_PEM_PKCS8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;PRIVATE<sp/>KEY&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/docs/lib/bearssl/bearssl_x509.h"/>
  </compounddef>
</doxygen>
