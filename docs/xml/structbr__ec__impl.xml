<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structbr__ec__impl" kind="struct" language="C++" prot="public">
    <compoundname>br_ec_impl</compoundname>
    <includes refid="bearssl__ec_8h" local="no">bearssl_ec.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbr__ec__impl_1ab69ca9dac77a15e383b4f87aa9bca444" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t br_ec_impl::supported_curves</definition>
        <argsstring></argsstring>
        <name>supported_curves</name>
        <briefdescription>
<para>Supported curves. </para>        </briefdescription>
        <detaileddescription>
<para>This word is a bitfield: bit <computeroutput>x</computeroutput> is set if the curve of ID <computeroutput>x</computeroutput> is supported. E.g. an implementation supporting both NIST P-256 (secp256r1, ID 23) and NIST P-384 (secp384r1, ID 24) will have value <computeroutput>0x01800000</computeroutput> in this field. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="279" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbr__ec__impl_1aefb8a81a4434ba81fd669874d9bc6ab8" prot="public" static="no" mutable="no">
        <type>const unsigned char *(*</type>
        <definition>const unsigned char*(* br_ec_impl::generator) (int curve, size_t *len)</definition>
        <argsstring>)(int curve, size_t *len)</argsstring>
        <name>generator</name>
        <briefdescription>
<para>Get the conventional generator. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the conventional generator (encoded curve point) for the specified curve. This function MUST NOT be called if the curve is not supported.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>curve identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>receiver for the encoded generator length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded generator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="292" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbr__ec__impl_1a41234ee4172eadd1c59b5f5ef5540b81" prot="public" static="no" mutable="no">
        <type>const unsigned char *(*</type>
        <definition>const unsigned char*(* br_ec_impl::order) (int curve, size_t *len)</definition>
        <argsstring>)(int curve, size_t *len)</argsstring>
        <name>order</name>
        <briefdescription>
<para>Get the subgroup order. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the order of the subgroup generated by the conventional generator, for the specified curve. Unsigned big-endian encoding is used. This function MUST NOT be called if the curve is not supported.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>curve identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>receiver for the encoded order length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encoded order. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="306" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbr__ec__impl_1a8b786258f39d2d26e03e96dec95a6d23" prot="public" static="no" mutable="no">
        <type>size_t(*</type>
        <definition>size_t(* br_ec_impl::xoff) (int curve, size_t *len)</definition>
        <argsstring>)(int curve, size_t *len)</argsstring>
        <name>xoff</name>
        <briefdescription>
<para>Get the offset and length for the X coordinate. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the offset and length (in bytes) of the X coordinate in an encoded non-zero point.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>curve identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>receiver for the X coordinate length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the offset for the X coordinate (in bytes). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="318" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbr__ec__impl_1abc4f4ce448754b7f93632a284bfe4b3d" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* br_ec_impl::mul) (unsigned char *G, size_t Glen, const unsigned char *x, size_t xlen, int curve)</definition>
        <argsstring>)(unsigned char *G, size_t Glen, const unsigned char *x, size_t xlen, int curve)</argsstring>
        <name>mul</name>
        <briefdescription>
<para>Multiply a curve point by an integer. </para>        </briefdescription>
        <detaileddescription>
<para>The source point is provided in array <computeroutput>G</computeroutput> (of size <computeroutput>Glen</computeroutput> bytes); the multiplication result is written over it. The multiplier <computeroutput>x</computeroutput> (of size <computeroutput>xlen</computeroutput> bytes) uses unsigned big-endian encoding.</para><para>Rules:</para><para><itemizedlist>
<listitem><para>The specified curve MUST be supported.</para></listitem><listitem><para>The source point must be a valid point on the relevant curve subgroup (and not the &quot;point at infinity&quot; either). If this is not the case, then this function returns an error (0).</para></listitem><listitem><para>The multiplier integer MUST be non-zero and less than the curve subgroup order. If this property does not hold, then the result is indeterminate and an error code is not guaranteed.</para></listitem></itemizedlist>
</para><para>Returned value is 1 on success, 0 on error. On error, the contents of <computeroutput>G</computeroutput> are indeterminate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>point to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Glen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the encoded point (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier (unsigned big-endian). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>curve identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="350" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbr__ec__impl_1a54a7c34d0e99d453bbb588ae8ad813e1" prot="public" static="no" mutable="no">
        <type>size_t(*</type>
        <definition>size_t(* br_ec_impl::mulgen) (unsigned char *R, const unsigned char *x, size_t xlen, int curve)</definition>
        <argsstring>)(unsigned char *R, const unsigned char *x, size_t xlen, int curve)</argsstring>
        <name>mulgen</name>
        <briefdescription>
<para>Multiply the generator by an integer. </para>        </briefdescription>
        <detaileddescription>
<para>The multiplier MUST be non-zero and less than the curve subgroup order. Results are indeterminate if this property does not hold.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier (unsigned big-endian). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>curve identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encoded result point length (in bytes). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="366" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbr__ec__impl_1afc5304c88c29ed502f0f0a8a77cec71a" prot="public" static="no" mutable="no">
        <type>uint32_t(*</type>
        <definition>uint32_t(* br_ec_impl::muladd) (unsigned char *A, const unsigned char *B, size_t len, const unsigned char *x, size_t xlen, const unsigned char *y, size_t ylen, int curve)</definition>
        <argsstring>)(unsigned char *A, const unsigned char *B, size_t len, const unsigned char *x, size_t xlen, const unsigned char *y, size_t ylen, int curve)</argsstring>
        <name>muladd</name>
        <briefdescription>
<para>Multiply two points by two integers and add the results. </para>        </briefdescription>
        <detaileddescription>
<para>The point <computeroutput>x*A + y*B</computeroutput> is computed and written back in the <computeroutput>A</computeroutput> array.</para><para>Rules:</para><para><itemizedlist>
<listitem><para>The specified curve MUST be supported.</para></listitem><listitem><para>The source points (<computeroutput>A</computeroutput> and <computeroutput>B</computeroutput>) must be valid points on the relevant curve subgroup (and not the &quot;point at
    infinity&quot; either). If this is not the case, then this function returns an error (0).</para></listitem><listitem><para>If the <computeroutput>B</computeroutput> pointer is <computeroutput>NULL</computeroutput>, then the conventional subgroup generator is used. With some implementations, this may be faster than providing a pointer to the generator.</para></listitem><listitem><para>The multiplier integers (<computeroutput>x</computeroutput> and <computeroutput>y</computeroutput>) MUST be non-zero and less than the curve subgroup order. If either integer is zero, then an error is reported, but if one of them is not lower than the subgroup order, then the result is indeterminate and an error code is not guaranteed.</para></listitem><listitem><para>If the final result is the point at infinity, then an error is returned.</para></listitem></itemizedlist>
</para><para>Returned value is 1 on success, 0 on error. On error, the contents of <computeroutput>A</computeroutput> are indeterminate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>first point to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>second point to multiply (<computeroutput>NULL</computeroutput> for the generator). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>common length of the encoded points (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier for <computeroutput>A</computeroutput> (unsigned big-endian). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of multiplier for <computeroutput>A</computeroutput> (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier for <computeroutput>A</computeroutput> (unsigned big-endian). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ylen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of multiplier for <computeroutput>A</computeroutput> (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>curve identifier. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_ec.h" line="412" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Type for an EC implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/docs/lib/bearssl/bearssl_ec.h" line="270" column="1" bodyfile="/docs/lib/bearssl/bearssl_ec.h" bodystart="270" bodyend="415"/>
    <listofallmembers>
      <member refid="structbr__ec__impl_1aefb8a81a4434ba81fd669874d9bc6ab8" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>generator</name></member>
      <member refid="structbr__ec__impl_1abc4f4ce448754b7f93632a284bfe4b3d" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>mul</name></member>
      <member refid="structbr__ec__impl_1afc5304c88c29ed502f0f0a8a77cec71a" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>muladd</name></member>
      <member refid="structbr__ec__impl_1a54a7c34d0e99d453bbb588ae8ad813e1" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>mulgen</name></member>
      <member refid="structbr__ec__impl_1a41234ee4172eadd1c59b5f5ef5540b81" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>order</name></member>
      <member refid="structbr__ec__impl_1ab69ca9dac77a15e383b4f87aa9bca444" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>supported_curves</name></member>
      <member refid="structbr__ec__impl_1a8b786258f39d2d26e03e96dec95a6d23" prot="public" virt="non-virtual"><scope>br_ec_impl</scope><name>xoff</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
