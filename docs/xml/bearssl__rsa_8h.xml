<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bearssl__rsa_8h" kind="file" language="C++">
    <compoundname>bearssl_rsa.h</compoundname>
    <includes refid="stddef_8h" local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="bearssl__hash_8h" local="yes">bearssl_hash.h</includes>
    <includedby refid="bearssl__x509_8h" local="yes">/docs/lib/bearssl/bearssl_x509.h</includedby>
    <incdepgraph>
      <node id="790">
        <label>stddef.h</label>
        <link refid="stddef_8h_source"/>
        <childnode refid="791" relation="include">
        </childnode>
      </node>
      <node id="793">
        <label>stdint_.h</label>
      </node>
      <node id="789">
        <label>/docs/lib/bearssl/bearssl_rsa.h</label>
        <link refid="bearssl__rsa_8h"/>
        <childnode refid="790" relation="include">
        </childnode>
        <childnode refid="792" relation="include">
        </childnode>
        <childnode refid="794" relation="include">
        </childnode>
      </node>
      <node id="791">
        <label>stddef_.h</label>
      </node>
      <node id="795">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="796" relation="include">
        </childnode>
      </node>
      <node id="794">
        <label>bearssl_hash.h</label>
        <link refid="bearssl__hash_8h"/>
        <childnode refid="790" relation="include">
        </childnode>
        <childnode refid="792" relation="include">
        </childnode>
        <childnode refid="795" relation="include">
        </childnode>
      </node>
      <node id="792">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="793" relation="include">
        </childnode>
      </node>
      <node id="796">
        <label>string_.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="797">
        <label>/docs/lib/bearssl/bearssl_rsa.h</label>
        <link refid="bearssl__rsa_8h"/>
        <childnode refid="798" relation="include">
        </childnode>
      </node>
      <node id="798">
        <label>/docs/lib/bearssl/bearssl_x509.h</label>
        <link refid="bearssl__x509_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbr__rsa__public__key" prot="public">br_rsa_public_key</innerclass>
    <innerclass refid="structbr__rsa__private__key" prot="public">br_rsa_private_key</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bearssl__rsa_8h_1a815e649c36eaeaaca75435b8964a1981" prot="public" static="no">
        <name>BR_HASH_OID_SHA1</name>
        <initializer>((const unsigned char *)&quot;\x05\x2B\x0E\x03\x02\x1A&quot;)</initializer>
        <briefdescription>
<para>Type for a RSA signature generation engine (PSS). </para>        </briefdescription>
        <detaileddescription>
<para>Parameters are:</para><para><itemizedlist>
<listitem><para>An initialized PRNG for salt generation. If the salt length is zero (<computeroutput>salt_len</computeroutput> parameter), then the PRNG is optional (this is not the typical case, as the security proof of RSA/PSS is tighter when a non-empty salt is used).</para></listitem><listitem><para>The hash function which was used to hash the message.</para></listitem><listitem><para>The hash function to use with MGF1 within the PSS padding. This is not necessarily the same function as the one used to hash the message.</para></listitem><listitem><para>The hashed message.</para></listitem><listitem><para>The salt length, in bytes.</para></listitem><listitem><para>The RSA private key.</para></listitem><listitem><para>The output buffer, that receives the signature.</para></listitem></itemizedlist>
</para><para>Returned value is 1 on success, 0 on error. Error conditions include a too small modulus for the provided hash and salt lengths, or some invalid key parameters. The signature length is exactly <computeroutput>(sk-&gt;n_bitlen+7)/8</computeroutput> bytes.</para><para>This function is expected to be constant-time with regards to the private key bytes (lengths of the modulus and the individual factors may leak, though) and to the hashed data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>PRNG for salt generation (<computeroutput>NULL</computeroutput> if <computeroutput>salt_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function used to hash the signed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hashed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the signature value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. Encoded OID for SHA-1 (in RSA PKCS#1 signatures). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="474" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__rsa_8h_1ab29aa8ea85eac4489f5891204ef71a8c" prot="public" static="no">
        <name>BR_HASH_OID_SHA224</name>
        <initializer>((const unsigned char *)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x04&quot;)</initializer>
        <briefdescription>
<para>Encoded OID for SHA-224 (in RSA PKCS#1 signatures). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="480" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__rsa_8h_1ace154a99e1432b1a066d356eebfdadfa" prot="public" static="no">
        <name>BR_HASH_OID_SHA256</name>
        <initializer>((const unsigned char *)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01&quot;)</initializer>
        <briefdescription>
<para>Encoded OID for SHA-256 (in RSA PKCS#1 signatures). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="486" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__rsa_8h_1a6a55f643d23cb3ac74082094d7906aad" prot="public" static="no">
        <name>BR_HASH_OID_SHA384</name>
        <initializer>((const unsigned char *)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x02&quot;)</initializer>
        <briefdescription>
<para>Encoded OID for SHA-384 (in RSA PKCS#1 signatures). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="492" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__rsa_8h_1ae7bd98226f182dbaf9f914ac5fb80580" prot="public" static="no">
        <name>BR_HASH_OID_SHA512</name>
        <initializer>((const unsigned char *)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x03&quot;)</initializer>
        <briefdescription>
<para>Encoded OID for SHA-512 (in RSA PKCS#1 signatures). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="498" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__rsa_8h_1a15e8845949a1bf95c679c62557b61237" prot="public" static="no">
        <name>BR_RSA_KBUF_PRIV_SIZE</name>
        <param><defname>size</defname></param>
        <initializer>(5 * (((size) + 15) &gt;&gt; 4))</initializer>
        <briefdescription>
<para>Get buffer size to hold RSA private key elements. </para>        </briefdescription>
        <detaileddescription>
<para>This macro returns the length (in bytes) of the buffer needed to receive the elements of a RSA private key, as generated by one of the <computeroutput>br_rsa_*_keygen()</computeroutput> functions. If the provided size is a constant expression, then the whole macro evaluates to a constant expression.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>target key size (modulus size, in bits) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the private key buffer, in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1274" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="1274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bearssl__rsa_8h_1ae8cd0870bccef433f66997fbfa95d044" prot="public" static="no">
        <name>BR_RSA_KBUF_PUB_SIZE</name>
        <param><defname>size</defname></param>
        <initializer>(4 + (((size) + 7) &gt;&gt; 3))</initializer>
        <briefdescription>
<para>Get buffer size to hold RSA public key elements. </para>        </briefdescription>
        <detaileddescription>
<para>This macro returns the length (in bytes) of the buffer needed to receive the elements of a RSA public key, as generated by one of the <computeroutput>br_rsa_*_keygen()</computeroutput> functions. If the provided size is a constant expression, then the whole macro evaluates to a constant expression.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>target key size (modulus size, in bits) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the public key buffer, in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1287" column="9" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="1287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_rsa_public) (unsigned char *x, size_t xlen, const br_rsa_public_key *pk)</definition>
        <argsstring>)(unsigned char *x, size_t xlen, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_public</name>
        <briefdescription>
<para>Type for a RSA public key engine. </para>        </briefdescription>
        <detaileddescription>
<para>The public key engine performs the modular exponentiation of the provided value with the public exponent. The value is modified in place.</para><para>The value length (<computeroutput>xlen</computeroutput>) is verified to have <emphasis>exactly</emphasis> the same length as the modulus (actual modulus length, without extra leading zeros in the modulus representation in memory). If the length does not match, then this function returns 0 and <computeroutput>x[]</computeroutput> is unmodified.</para><para>It <computeroutput>xlen</computeroutput> is correct, then <computeroutput>x[]</computeroutput> is modified. Returned value is 1 on success, 0 on error. Error conditions include an oversized <computeroutput>x[]</computeroutput> (the array has the same length as the modulus, but the numerical value is not lower than the modulus) and an invalid modulus (e.g. an even integer). If an error is reported, then the new contents of <computeroutput>x[]</computeroutput> are unspecified.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the operand (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="230" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_rsa_pkcs1_vrfy) (const unsigned char *x, size_t xlen, const unsigned char *hash_oid, size_t hash_len, const br_rsa_public_key *pk, unsigned char *hash_out)</definition>
        <argsstring>)(const unsigned char *x, size_t xlen, const unsigned char *hash_oid, size_t hash_len, const br_rsa_public_key *pk, unsigned char *hash_out)</argsstring>
        <name>br_rsa_pkcs1_vrfy</name>
        <briefdescription>
<para>Type for a RSA signature verification engine (PKCS#1 v1.5). </para>        </briefdescription>
        <detaileddescription>
<para>Parameters are:</para><para><itemizedlist>
<listitem><para>The signature itself. The provided array is NOT modified.</para></listitem><listitem><para>The encoded OID for the hash function. The provided array must begin with a single byte that contains the length of the OID value (in bytes), followed by exactly that many bytes. This parameter may also be <computeroutput>NULL</computeroutput>, in which case the raw hash value should be used with the PKCS#1 v1.5 &quot;type 1&quot; padding (as used in SSL/TLS up to TLS-1.1, with a 36-byte hash value).</para></listitem><listitem><para>The hash output length, in bytes.</para></listitem><listitem><para>The public key.</para></listitem><listitem><para>An output buffer for the hash value. The caller must still compare it with the hash of the data over which the signature is computed.</para></listitem></itemizedlist>
</para><para><bold>Constraints:</bold></para><para><itemizedlist>
<listitem><para>Hash length MUST be no more than 64 bytes.</para></listitem><listitem><para>OID value length MUST be no more than 32 bytes (i.e. <computeroutput>hash_oid[0]</computeroutput> must have a value in the 0..32 range, inclusive).</para></listitem></itemizedlist>
</para><para>This function verifies that the signature length (<computeroutput>xlen</computeroutput>) matches the modulus length (this function returns 0 on mismatch). If the modulus size exceeds the maximum supported RSA size, then the function also returns 0.</para><para>Returned value is 1 on success, 0 on error.</para><para>Implementations of this type need not be constant-time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>expected hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="278" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_rsa_private) (unsigned char *x, const br_rsa_private_key *sk)</definition>
        <argsstring>)(unsigned char *x, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_private</name>
        <briefdescription>
<para>Type for a RSA signature verification engine (PSS). </para>        </briefdescription>
        <detaileddescription>
<para>Parameters are:</para><para><itemizedlist>
<listitem><para>The signature itself. The provided array is NOT modified.</para></listitem><listitem><para>The hash function which was used to hash the message.</para></listitem><listitem><para>The hash function to use with MGF1 within the PSS padding. This is not necessarily the same hash function as the one which was used to hash the signed message.</para></listitem><listitem><para>The hashed message (as an array of bytes).</para></listitem><listitem><para>The PSS salt length (in bytes).</para></listitem><listitem><para>The public key.</para></listitem></itemizedlist>
</para><para><bold>Constraints:</bold></para><para><itemizedlist>
<listitem><para>Hash message length MUST be no more than 64 bytes.</para></listitem></itemizedlist>
</para><para>Note that, contrary to PKCS#1 v1.5 signature, the hash value of the signed data cannot be extracted from the signature; it must be provided to the verification function.</para><para>This function verifies that the signature length (<computeroutput>xlen</computeroutput>) matches the modulus length (this function returns 0 on mismatch). If the modulus size exceeds the maximum supported RSA size, then the function also returns 0.</para><para>Returned value is 1 on success, 0 on error.</para><para>Implementations of this type need not be constant-time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function applied on the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value of the signed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>PSS salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. Type for a RSA encryption engine (OAEP).</para></simplesect>
Parameters are:</para><para><itemizedlist>
<listitem><para>A source of random bytes. The source must be already initialized.</para></listitem><listitem><para>A hash function, used internally with the mask generation function (MGF1).</para></listitem><listitem><para>A label. The <computeroutput>label</computeroutput> pointer may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero (an empty label, which is the default in PKCS#1 v2.2).</para></listitem><listitem><para>The public key.</para></listitem><listitem><para>The destination buffer. Its maximum length (in bytes) is provided; if that length is lower than the public key length, then an error is reported.</para></listitem><listitem><para>The source message.</para></listitem></itemizedlist>
</para><para>The encrypted message output has exactly the same length as the modulus (mathematical length, in bytes, not counting extra leading zeros in the modulus representation in the public key).</para><para>The source message (<computeroutput>src</computeroutput>, length <computeroutput>src_len</computeroutput>) may overlap with the destination buffer (<computeroutput>dst</computeroutput>, length <computeroutput>dst_max_len</computeroutput>).</para><para>This function returns the actual encrypted message length, in bytes; on error, zero is returned. An error is reported if the output buffer is not large enough, or the public is invalid, or the public key modulus exceeds the maximum supported RSA size.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>source of random bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer length (maximum encrypted data size). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>message to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_len</parametername>
</parameternamelist>
<parameterdescription>
<para>source message length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encrypted message length (in bytes), or 0 on error. Type for a RSA private key engine.</para></simplesect>
The <computeroutput>x[]</computeroutput> buffer is modified in place, and its length is inferred from the modulus length (<computeroutput>x[]</computeroutput> is assumed to have a length of <computeroutput>(sk-&gt;n_bitlen+7)/8</computeroutput> bytes).</para><para>Returned value is 1 on success, 0 on error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="386" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_rsa_pkcs1_sign) (const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, const br_rsa_private_key *sk, unsigned char *x)</definition>
        <argsstring>)(const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, const br_rsa_private_key *sk, unsigned char *x)</argsstring>
        <name>br_rsa_pkcs1_sign</name>
        <briefdescription>
<para>Type for a RSA signature generation engine (PKCS#1 v1.5). </para>        </briefdescription>
        <detaileddescription>
<para>Parameters are:</para><para><itemizedlist>
<listitem><para>The encoded OID for the hash function. The provided array must begin with a single byte that contains the length of the OID value (in bytes), followed by exactly that many bytes. This parameter may also be <computeroutput>NULL</computeroutput>, in which case the raw hash value should be used with the PKCS#1 v1.5 &quot;type 1&quot; padding (as used in SSL/TLS up to TLS-1.1, with a 36-byte hash value).</para></listitem><listitem><para>The hash value computes over the data to sign (its length is expressed in bytes).</para></listitem><listitem><para>The RSA private key.</para></listitem><listitem><para>The output buffer, that receives the signature.</para></listitem></itemizedlist>
</para><para>Returned value is 1 on success, 0 on error. Error conditions include a too small modulus for the provided hash OID and value, or some invalid key parameters. The signature length is exactly <computeroutput>(sk-&gt;n_bitlen+7)/8</computeroutput> bytes.</para><para>This function is expected to be constant-time with regards to the private key bytes (lengths of the modulus and the individual factors may leak, though) and to the hashed data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the signature value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="424" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_rsa_oaep_decrypt) (const br_hash_class *dig, const void *label, size_t label_len, const br_rsa_private_key *sk, void *data, size_t *len)</definition>
        <argsstring>)(const br_hash_class *dig, const void *label, size_t label_len, const br_rsa_private_key *sk, void *data, size_t *len)</argsstring>
        <name>br_rsa_oaep_decrypt</name>
        <briefdescription>
<para>Type for a RSA decryption engine (OAEP). </para>        </briefdescription>
        <detaileddescription>
<para>Parameters are:</para><para><itemizedlist>
<listitem><para>A hash function, used internally with the mask generation function (MGF1).</para></listitem><listitem><para>A label. The <computeroutput>label</computeroutput> pointer may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero (an empty label, which is the default in PKCS#1 v2.2).</para></listitem><listitem><para>The private key.</para></listitem><listitem><para>The source and destination buffer. The buffer initially contains the encrypted message; the buffer contents are altered, and the decrypted message is written at the start of that buffer (decrypted message is always shorter than the encrypted message).</para></listitem></itemizedlist>
</para><para>If decryption fails in any way, then <computeroutput>*len</computeroutput> is unmodified, and the function returns 0. Otherwise, <computeroutput>*len</computeroutput> is set to the decrypted message length, and 1 is returned. The implementation is responsible for checking that the input message length matches the key modulus length, and that the padding is correct.</para><para>Implementations MUST use constant-time check of the validity of the OAEP padding, at least until the leading byte and hash value have been checked. Whether overall decryption worked, and the length of the decrypted message, may leak.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input/output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>encrypted/decrypted message length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="538" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* br_rsa_compute_modulus) (void *n, const br_rsa_private_key *sk)</definition>
        <argsstring>)(void *n, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_compute_modulus</name>
        <briefdescription>
<para>Type for RSA key pair generator implementation. </para>        </briefdescription>
        <detaileddescription>
<para>This function generates a new RSA key pair whose modulus has bit length <computeroutput>size</computeroutput> bits. The private key elements are written in the <computeroutput>kbuf_priv</computeroutput> buffer, and pointer values and length fields to these elements are populated in the provided private key structure <computeroutput>sk</computeroutput>. Similarly, the public key elements are written in <computeroutput>kbuf_pub</computeroutput>, with pointers and lengths set in <computeroutput>pk</computeroutput>.</para><para>If <computeroutput>pk</computeroutput> is <computeroutput>NULL</computeroutput>, then <computeroutput>kbuf_pub</computeroutput> may be <computeroutput>NULL</computeroutput>, and only the private key is set.</para><para>If <computeroutput>pubexp</computeroutput> is not zero, then its value will be used as public exponent. Valid RSA public exponent values are odd integers greater than 1. If <computeroutput>pubexp</computeroutput> is zero, then the public exponent will have value 3.</para><para>The provided PRNG (<computeroutput>rng_ctx</computeroutput>) must have already been initialized and seeded.</para><para>Returned value is 1 on success, 0 on error. An error is reported if the requested range is outside of the supported key sizes, or if an invalid non-zero public exponent value is provided. Supported range starts at 512 bits, and up to an implementation-defined maximum (by default 4096 bits). Note that key sizes up to 768 bits have been broken in practice, and sizes lower than 2048 bits are usually considered to be weak and should not be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>source PRNG context (already initialized) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key structure (destination) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_priv</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for private key elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key structure (destination), or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_pub</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for public key elements, or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>target RSA modulus size (in bits) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>public exponent to use, or zero </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error (invalid parameters) RSA key pair generation with the &quot;i15&quot; engine.</para></simplesect>
<simplesect kind="see"><para>br_rsa_keygen</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>source PRNG context (already initialized) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key structure (destination) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_priv</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for private key elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key structure (destination), or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_pub</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for public key elements, or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>target RSA modulus size (in bits) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>public exponent to use, or zero </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error (invalid parameters) RSA key pair generation with the &quot;i31&quot; engine.</para></simplesect>
<simplesect kind="see"><para>br_rsa_keygen</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>source PRNG context (already initialized) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key structure (destination) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_priv</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for private key elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key structure (destination), or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_pub</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for public key elements, or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>target RSA modulus size (in bits) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>public exponent to use, or zero </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error (invalid parameters) RSA key pair generation with the &quot;i62&quot; engine.</para></simplesect>
This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput>br_rsa_i62_keygen_get()</computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para>br_rsa_keygen</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>source PRNG context (already initialized) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key structure (destination) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_priv</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for private key elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key structure (destination), or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kbuf_pub</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for public key elements, or <computeroutput>NULL</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>target RSA modulus size (in bits) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>public exponent to use, or zero </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error (invalid parameters) Get the RSA &quot;i62&quot; implementation (key pair generation), if available.</para></simplesect>
<simplesect kind="return"><para>the implementation, or 0. Get &quot;default&quot; RSA implementation (key pair generation).</para></simplesect>
This returns the preferred implementation of RSA (key pair generation) on the current system.</para><para><simplesect kind="return"><para>the default implementation. Type for a modulus computing function.</para></simplesect>
Such a function computes the public modulus from the private key. The encoded modulus (unsigned big-endian) is written on <computeroutput>n</computeroutput>, and the size (in bytes) is returned. If <computeroutput>n</computeroutput> is <computeroutput>NULL</computeroutput>, then the size is returned but the modulus itself is not computed.</para><para>If the key size exceeds an internal limit, 0 is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modulus length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1407" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="1407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* br_rsa_compute_pubexp) (const br_rsa_private_key *sk)</definition>
        <argsstring>)(const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_compute_pubexp</name>
        <briefdescription>
<para>Type for a public exponent computing function. </para>        </briefdescription>
        <detaileddescription>
<para>Such a function recomputes the public exponent from the private key. 0 is returned if any of the following occurs:</para><para><itemizedlist>
<listitem><para>Either <computeroutput>p</computeroutput> or <computeroutput>q</computeroutput> is not equal to 3 modulo 4.</para></listitem><listitem><para>The public exponent does not fit on 32 bits.</para></listitem><listitem><para>An internal limit is exceeded.</para></listitem><listitem><para>The private key is invalid in some way.</para></listitem></itemizedlist>
</para><para>For all private keys produced by the key generator functions (<computeroutput>br_rsa_keygen</computeroutput> type), this function succeeds and returns the true public exponent. The public exponent is always an odd integer greater than 1.</para><para><simplesect kind="return"><para>the public exponent, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1462" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="1462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* br_rsa_compute_privexp) (void *d, const br_rsa_private_key *sk, uint32_t pubexp)</definition>
        <argsstring>)(void *d, const br_rsa_private_key *sk, uint32_t pubexp)</argsstring>
        <name>br_rsa_compute_privexp</name>
        <briefdescription>
<para>Type for a private exponent computing function. </para>        </briefdescription>
        <detaileddescription>
<para>An RSA private key (<computeroutput><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref></computeroutput>) contains two reduced private exponents, which are sufficient to perform private key operations. However, standard encoding formats for RSA private keys require also a copy of the complete private exponent (non-reduced), which this function recomputes.</para><para>This function suceeds if all the following conditions hold:</para><para><itemizedlist>
<listitem><para>Both private factors <computeroutput>p</computeroutput> and <computeroutput>q</computeroutput> are equal to 3 modulo 4.</para></listitem><listitem><para>The provided public exponent <computeroutput>pubexp</computeroutput> is correct, and, in particular, is odd, relatively prime to <computeroutput>p-1</computeroutput> and <computeroutput>q-1</computeroutput>, and greater than 1.</para></listitem><listitem><para>No internal storage limit is exceeded.</para></listitem></itemizedlist>
</para><para>For all private keys produced by the key generator functions (<computeroutput>br_rsa_keygen</computeroutput> type), this function succeeds. Note that the API restricts the public exponent to a maximum size of 32 bits.</para><para>The encoded private exponent is written in <computeroutput>d</computeroutput> (unsigned big-endian convention), and the length (in bytes) is returned. If <computeroutput>d</computeroutput> is <computeroutput>NULL</computeroutput>, then the exponent is not written anywhere, but the length is still returned. On error, 0 is returned.</para><para>Not all error conditions are detected when <computeroutput>d</computeroutput> is <computeroutput>NULL</computeroutput>; therefore, the returned value shall be checked also when actually producing the value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>the public exponent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the private exponent length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1527" column="1" bodyfile="/docs/lib/bearssl/bearssl_rsa.h" bodystart="1527" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bearssl__rsa_8h_1ac352f411eca5ec01119c537be37d3656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i32_public</definition>
        <argsstring>(unsigned char *x, size_t xlen, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i32_public</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA public key engine &quot;i32&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the operand (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a9889bf6982e3cf9829138131be3c626f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i32_pkcs1_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const unsigned char *hash_oid, size_t hash_len, const br_rsa_public_key *pk, unsigned char *hash_out)</argsstring>
        <name>br_rsa_i32_pkcs1_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>hash_out</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i32&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>expected hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a9797c7d2aa9b89a9abdc4b9e01bd1067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i32_pss_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const br_hash_class *hf_data, const br_hash_class *hf_mgf1, const void *hash, size_t salt_len, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i32_pss_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_data</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_mgf1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>salt_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i32&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_pss_vrfy</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function applied on the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value of the signed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>PSS salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a1022010003c6d57134a077a04007c00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i32_private</definition>
        <argsstring>(unsigned char *x, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i32_private</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>RSA private key engine &quot;i32&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ad7c1d1ddec99983263e387a0dfee8d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i32_pkcs1_sign</definition>
        <argsstring>(const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, const br_rsa_private_key *sk, unsigned char *x)</argsstring>
        <name>br_rsa_i32_pkcs1_sign</name>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i32&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a66b7b887dee035f0a7e9c9f069607324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_public</definition>
        <argsstring>(unsigned char *x, size_t xlen, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i31_public</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i32&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_pss_sign</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>PRNG for salt generation (<computeroutput>NULL</computeroutput> if <computeroutput>salt_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function used to hash the signed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hashed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the signature value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. RSA public key engine &quot;i31&quot;.</para></simplesect>
<simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the operand (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a040cfd6374d2d5ba134e089f99116d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_pkcs1_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const unsigned char *hash_oid, size_t hash_len, const br_rsa_public_key *pk, unsigned char *hash_out)</argsstring>
        <name>br_rsa_i31_pkcs1_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>hash_out</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i31&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>expected hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ad16d4cf5173707740d3d8996abb7fe44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_pss_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const br_hash_class *hf_data, const br_hash_class *hf_mgf1, const void *hash, size_t salt_len, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i31_pss_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_data</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_mgf1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>salt_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i31&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_pss_vrfy</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function applied on the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value of the signed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>PSS salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ac81516db5646d1e323333623180ca737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_private</definition>
        <argsstring>(unsigned char *x, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i31_private</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>RSA private key engine &quot;i31&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ab4294ed643d96474d3bca79aa5e650fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_pkcs1_sign</definition>
        <argsstring>(const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, const br_rsa_private_key *sk, unsigned char *x)</argsstring>
        <name>br_rsa_i31_pkcs1_sign</name>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i31&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="717" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1aaa865f120975ed6ddf1d3dab08ca1c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i62_public</definition>
        <argsstring>(unsigned char *x, size_t xlen, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i62_public</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i31&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_pss_sign</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>PRNG for salt generation (<computeroutput>NULL</computeroutput> if <computeroutput>salt_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function used to hash the signed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hashed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the signature value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. RSA public key engine &quot;i62&quot;.</para></simplesect>
This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput><ref refid="bearssl__rsa_8h_1a6f5c8547d3d6b6b49588d8f7d05a3bcc" kindref="member">br_rsa_i62_public_get()</ref></computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the operand (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1af4c246e8c57c031fb2803967765dee04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i62_pkcs1_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const unsigned char *hash_oid, size_t hash_len, const br_rsa_public_key *pk, unsigned char *hash_out)</argsstring>
        <name>br_rsa_i62_pkcs1_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>hash_out</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i62&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para>This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput><ref refid="bearssl__rsa_8h_1a93198c035a3951982f8a5cda79ef362d" kindref="member">br_rsa_i62_pkcs1_vrfy_get()</ref></computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>expected hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a507516c2b4238e824703565668ba47b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i62_pss_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const br_hash_class *hf_data, const br_hash_class *hf_mgf1, const void *hash, size_t salt_len, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i62_pss_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_data</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_mgf1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>salt_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i62&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para>This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput>br_rsa_i62_pss_vrfy_get()</computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para>br_rsa_pss_vrfy</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function applied on the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value of the signed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>PSS salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ae0b0d182b913b50de9863e82c6caef04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i62_private</definition>
        <argsstring>(unsigned char *x, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i62_private</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>RSA private key engine &quot;i62&quot;. </para>        </briefdescription>
        <detaileddescription>
<para>This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput><ref refid="bearssl__rsa_8h_1a399ad7529be433ec208042eeaf22534b" kindref="member">br_rsa_i62_private_get()</ref></computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a9d71305804fa9038ced239be59559b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i62_pkcs1_sign</definition>
        <argsstring>(const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, const br_rsa_private_key *sk, unsigned char *x)</argsstring>
        <name>br_rsa_i62_pkcs1_sign</name>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i62&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para>This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput><ref refid="bearssl__rsa_8h_1a7bb17eeae232d6a22e73a1ec4fcd6308" kindref="member">br_rsa_i62_pkcs1_sign_get()</ref></computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a6f5c8547d3d6b6b49588d8f7d05a3bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref></type>
        <definition>br_rsa_public br_rsa_i62_public_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_i62_public_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i62&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para>This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput>br_rsa_i62_pss_sign_get()</computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para>br_rsa_pss_sign</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>PRNG for salt generation (<computeroutput>NULL</computeroutput> if <computeroutput>salt_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function used to hash the signed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hashed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the signature value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. Get the RSA &quot;i62&quot; implementation (public key operations), if available.</para></simplesect>
<simplesect kind="return"><para>the implementation, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a93198c035a3951982f8a5cda79ef362d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></type>
        <definition>br_rsa_pkcs1_vrfy br_rsa_i62_pkcs1_vrfy_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_i62_pkcs1_vrfy_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the RSA &quot;i62&quot; implementation (PKCS#1 v1.5 signature verification), if available. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the implementation, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="870" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a399ad7529be433ec208042eeaf22534b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></type>
        <definition>br_rsa_private br_rsa_i62_private_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_i62_private_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the RSA &quot;i62&quot; implementation (PSS signature verification), if available. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the implementation, or 0. Get the RSA &quot;i62&quot; implementation (private key operations), if available.</para></simplesect>
<simplesect kind="return"><para>the implementation, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a7bb17eeae232d6a22e73a1ec4fcd6308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref></type>
        <definition>br_rsa_pkcs1_sign br_rsa_i62_pkcs1_sign_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_i62_pkcs1_sign_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the RSA &quot;i62&quot; implementation (PKCS#1 v1.5 signature generation), if available. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the implementation, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a2d54ee6a0c2521dcbf72e53c27bcdfa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref></type>
        <definition>br_rsa_oaep_decrypt br_rsa_i62_oaep_decrypt_get</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_i62_oaep_decrypt_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the RSA &quot;i62&quot; implementation (PSS signature generation), if available. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the implementation, or 0. Get the RSA &quot;i62&quot; implementation (OAEP encryption), if available.</para></simplesect>
<simplesect kind="return"><para>the implementation, or 0. Get the RSA &quot;i62&quot; implementation (OAEP decryption), if available.</para></simplesect>
<simplesect kind="return"><para>the implementation, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1abae12d9326f85deebe73b30d8587bea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_public</definition>
        <argsstring>(unsigned char *x, size_t xlen, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i15_public</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA public key engine &quot;i15&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the operand (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="933" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a523c19243ff86b7721d296673cc65743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_pkcs1_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const unsigned char *hash_oid, size_t hash_len, const br_rsa_public_key *pk, unsigned char *hash_out)</argsstring>
        <name>br_rsa_i15_pkcs1_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>hash_out</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i15&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>expected hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a914a7fc59895d3efe6f1d4f97c6675a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_pss_vrfy</definition>
        <argsstring>(const unsigned char *x, size_t xlen, const br_hash_class *hf_data, const br_hash_class *hf_mgf1, const void *hash, size_t salt_len, const br_rsa_public_key *pk)</argsstring>
        <name>br_rsa_i15_pss_vrfy</name>
        <param>
          <type>const unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_data</declname>
        </param>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>hf_mgf1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>salt_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref> *</type>
          <declname>pk</declname>
        </param>
        <briefdescription>
<para>RSA signature verification engine &quot;i15&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_pss_vrfy</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>signature buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlen</parametername>
</parameternamelist>
<parameterdescription>
<para>signature length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function applied on the message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value of the signed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>PSS salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="967" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a060e9e9aca1fe6bfa700c76eda09ebe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_private</definition>
        <argsstring>(unsigned char *x, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i15_private</name>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>RSA private key engine &quot;i15&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to exponentiate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="980" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a0a5650ab032e3492f83f6f3263c74f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_pkcs1_sign</definition>
        <argsstring>(const unsigned char *hash_oid, const unsigned char *hash, size_t hash_len, const br_rsa_private_key *sk, unsigned char *x)</argsstring>
        <name>br_rsa_i15_pkcs1_sign</name>
        <param>
          <type>const unsigned char *</type>
          <declname>hash_oid</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hash_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i15&quot; (PKCS#1 v1.5 signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_oid</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded hash algorithm OID (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_len</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the hash value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="995" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1af697a17ed3b1a0537e154b850ebbdfcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref></type>
        <definition>br_rsa_public br_rsa_public_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_public_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>RSA signature generation engine &quot;i15&quot; (PSS signatures). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_pss_sign</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>PRNG for salt generation (<computeroutput>NULL</computeroutput> if <computeroutput>salt_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_data</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function used to hash the signed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hf_mgf1</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hashed message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt_len</parametername>
</parameternamelist>
<parameterdescription>
<para>salt length (in bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the signature value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. Get &quot;default&quot; RSA implementation (public-key operations).</para></simplesect>
This returns the preferred implementation of RSA (public-key operations) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a3a3334ff0b0072e59d8bf5477bc9c9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></type>
        <definition>br_rsa_private br_rsa_private_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_private_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (private-key operations). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (private-key operations) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1031" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ad0f63d3969b5c2877836e8bc62cf60d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref></type>
        <definition>br_rsa_pkcs1_vrfy br_rsa_pkcs1_vrfy_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_pkcs1_vrfy_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (PKCS#1 v1.5 signature verification). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (signature verification) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1041" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a53c33b40a9e69de7f0920f960b3fe0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref></type>
        <definition>br_rsa_pkcs1_sign br_rsa_pkcs1_sign_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_pkcs1_sign_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (PSS signature verification). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (signature verification) on the current system.</para><para><simplesect kind="return"><para>the default implementation. Get &quot;default&quot; RSA implementation (PKCS#1 v1.5 signature generation).</para></simplesect>
This returns the preferred implementation of RSA (signature generation) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a45b81ba38527f30a820f35e7139fd8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref></type>
        <definition>br_rsa_oaep_decrypt br_rsa_oaep_decrypt_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_oaep_decrypt_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (PSS signature generation). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (signature generation) on the current system.</para><para><simplesect kind="return"><para>the default implementation. Get &quot;default&quot; RSA implementation (OAEP encryption).</para></simplesect>
This returns the preferred implementation of RSA (OAEP encryption) on the current system.</para><para><simplesect kind="return"><para>the default implementation. Get &quot;default&quot; RSA implementation (OAEP decryption).</para></simplesect>
This returns the preferred implementation of RSA (OAEP decryption) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1088" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1af9346eacc5c9e1c92649d5a8c6ff173e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_ssl_decrypt</definition>
        <argsstring>(br_rsa_private core, const br_rsa_private_key *sk, unsigned char *data, size_t len)</argsstring>
        <name>br_rsa_ssl_decrypt</name>
        <param>
          <type><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref></type>
          <declname>core</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>RSA decryption helper, for SSL/TLS. </para>        </briefdescription>
        <detaileddescription>
<para>This function performs the RSA decryption for a RSA-based key exchange in a SSL/TLS server. The provided RSA engine is used. The <computeroutput>data</computeroutput> parameter points to the value to decrypt, of length <computeroutput>len</computeroutput> bytes. On success, the 48-byte pre-master secret is copied into <computeroutput>data</computeroutput>, starting at the first byte of that buffer; on error, the contents of <computeroutput>data</computeroutput> become indeterminate.</para><para>This function first checks that the provided value length (<computeroutput>len</computeroutput>) is not lower than 59 bytes, and matches the RSA modulus length; if neither of this property is met, then this function returns 0 and the buffer is unmodified.</para><para>Otherwise, decryption and then padding verification are performed, both in constant-time. A decryption error, or a bad padding, or an incorrect decrypted value length are reported with a returned value of 0; on success, 1 is returned. The caller (SSL server engine) is supposed to proceed with a random pre-master secret in case of error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>core</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key engine. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input/output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length (in bytes) of the data to decrypt. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a87d081c95ae1340736954f99a20788b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_oaep_decrypt</definition>
        <argsstring>(const br_hash_class *dig, const void *label, size_t label_len, const br_rsa_private_key *sk, void *data, size_t *len)</argsstring>
        <name>br_rsa_i15_oaep_decrypt</name>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>RSA encryption (OAEP) with the &quot;i15&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_oaep_encrypt</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>source of random bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer length (maximum encrypted data size). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>message to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_len</parametername>
</parameternamelist>
<parameterdescription>
<para>source message length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encrypted message length (in bytes), or 0 on error. RSA decryption (OAEP) with the &quot;i15&quot; engine.</para></simplesect>
<simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input/output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>encrypted/decrypted message length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ac73f15d91f0a256781999eabbc0a0f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_oaep_decrypt</definition>
        <argsstring>(const br_hash_class *dig, const void *label, size_t label_len, const br_rsa_private_key *sk, void *data, size_t *len)</argsstring>
        <name>br_rsa_i31_oaep_decrypt</name>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>RSA encryption (OAEP) with the &quot;i31&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_oaep_encrypt</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>source of random bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer length (maximum encrypted data size). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>message to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_len</parametername>
</parameternamelist>
<parameterdescription>
<para>source message length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encrypted message length (in bytes), or 0 on error. RSA decryption (OAEP) with the &quot;i31&quot; engine.</para></simplesect>
<simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input/output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>encrypted/decrypted message length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a2f3971fbb6053759fb95ed7ebfc274da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i32_oaep_decrypt</definition>
        <argsstring>(const br_hash_class *dig, const void *label, size_t label_len, const br_rsa_private_key *sk, void *data, size_t *len)</argsstring>
        <name>br_rsa_i32_oaep_decrypt</name>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>RSA encryption (OAEP) with the &quot;i32&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>br_rsa_oaep_encrypt</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>source of random bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer length (maximum encrypted data size). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>message to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_len</parametername>
</parameternamelist>
<parameterdescription>
<para>source message length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encrypted message length (in bytes), or 0 on error. RSA decryption (OAEP) with the &quot;i32&quot; engine.</para></simplesect>
<simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input/output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>encrypted/decrypted message length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a7a255ca9e14d83df4ae48cb27b7e8cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i62_oaep_decrypt</definition>
        <argsstring>(const br_hash_class *dig, const void *label, size_t label_len, const br_rsa_private_key *sk, void *data, size_t *len)</argsstring>
        <name>br_rsa_i62_oaep_decrypt</name>
        <param>
          <type>const <ref refid="bearssl__hash_8h_1ae38c1b9d539537cc16fc84388b922d86" kindref="member">br_hash_class</ref> *</type>
          <declname>dig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>label</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>label_len</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>RSA encryption (OAEP) with the &quot;i62&quot; engine. </para>        </briefdescription>
        <detaileddescription>
<para>This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput>br_rsa_i62_oaep_encrypt_get()</computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para>br_rsa_oaep_encrypt</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnd</parametername>
</parameternamelist>
<parameterdescription>
<para>source of random bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA public key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer length (maximum encrypted data size). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>message to encrypt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_len</parametername>
</parameternamelist>
<parameterdescription>
<para>source message length (in bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>encrypted message length (in bytes), or 0 on error. RSA decryption (OAEP) with the &quot;i62&quot; engine.</para></simplesect>
This function is defined only on architecture that offer a 64x64-&gt;128 opcode. Use <computeroutput><ref refid="bearssl__rsa_8h_1a2d54ee6a0c2521dcbf72e53c27bcdfa3" kindref="member">br_rsa_i62_oaep_decrypt_get()</ref></computeroutput> to dynamically obtain a pointer to that function.</para><para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dig</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function to use with MGF1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>label value (may be <computeroutput>NULL</computeroutput> if <computeroutput>label_len</computeroutput> is zero). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_len</parametername>
</parameternamelist>
<parameterdescription>
<para>label length, in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input/output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>encrypted/decrypted message length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success, 0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a9ba7b6f414c70aa2ce0437e910217daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_rsa_i15_compute_modulus</definition>
        <argsstring>(void *n, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i15_compute_modulus</name>
        <param>
          <type>void *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>Recompute RSA modulus (&quot;i15&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modulus length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a7c1ce8eac67f8103dba7de9ed961dccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_rsa_i31_compute_modulus</definition>
        <argsstring>(void *n, const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i31_compute_modulus</name>
        <param>
          <type>void *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>Recompute RSA modulus (&quot;i31&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modulus length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a9f2a3b4960034283183588d53d68b51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus</ref></type>
        <definition>br_rsa_compute_modulus br_rsa_compute_modulus_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_compute_modulus_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (recompute modulus). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (recompute modulus) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a77238f40db189250f90dda7462b0a008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i15_compute_pubexp</definition>
        <argsstring>(const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i15_compute_pubexp</name>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>Recompute RSA public exponent (&quot;i15&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp</ref></para></simplesect>
<simplesect kind="return"><para>the public exponent, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a46cb658ac235bb8af2ae5fe90eb5fac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t br_rsa_i31_compute_pubexp</definition>
        <argsstring>(const br_rsa_private_key *sk)</argsstring>
        <name>br_rsa_i31_compute_pubexp</name>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <briefdescription>
<para>Recompute RSA public exponent (&quot;i31&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp</ref></para></simplesect>
<simplesect kind="return"><para>the public exponent, or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a391a384a9e26548d49f19df60e9b5065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp</ref></type>
        <definition>br_rsa_compute_pubexp br_rsa_compute_pubexp_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_compute_pubexp_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (recompute public exponent). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (recompute public exponent) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1a0848962e49d52203e3eb96d73172ed59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_rsa_i15_compute_privexp</definition>
        <argsstring>(void *d, const br_rsa_private_key *sk, uint32_t pubexp)</argsstring>
        <name>br_rsa_i15_compute_privexp</name>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pubexp</declname>
        </param>
        <briefdescription>
<para>Recompute RSA private exponent (&quot;i15&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>the public exponent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the private exponent length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1ac2a223bcba74b6234425560c9d1063c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t br_rsa_i31_compute_privexp</definition>
        <argsstring>(void *d, const br_rsa_private_key *sk, uint32_t pubexp)</argsstring>
        <name>br_rsa_i31_compute_privexp</name>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref> *</type>
          <declname>sk</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pubexp</declname>
        </param>
        <briefdescription>
<para>Recompute RSA private exponent (&quot;i31&quot; engine). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer (or <computeroutput>NULL</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sk</parametername>
</parameternamelist>
<parameterdescription>
<para>RSA private key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubexp</parametername>
</parameternamelist>
<parameterdescription>
<para>the public exponent. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the private exponent length (in bytes), or 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bearssl__rsa_8h_1aaede1ff499ca9a3bd69c33a6757ed1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp</ref></type>
        <definition>br_rsa_compute_privexp br_rsa_compute_privexp_get_default</definition>
        <argsstring>(void)</argsstring>
        <name>br_rsa_compute_privexp_get_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get &quot;default&quot; RSA implementation (recompute private exponent). </para>        </briefdescription>
        <detaileddescription>
<para>This returns the preferred implementation of RSA (recompute private exponent) on the current system.</para><para><simplesect kind="return"><para>the default implementation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/bearssl/bearssl_rsa.h" line="1564" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="1">RSA</heading>
</para><para>This file documents the RSA implementations provided with BearSSL. Note that the SSL engine accesses these implementations through a configurable API, so it is possible to, for instance, run a SSL server which uses a RSA engine which is not based on this code.</para><para><heading level="2">Key Elements</heading>
</para><para>RSA public and private keys consist in lists of big integers. All such integers are represented with big-endian unsigned notation: first byte is the most significant, and the value is positive (so there is no dedicated &quot;sign bit&quot;). Public and private key structures thus contain, for each such integer, a pointer to the first value byte (<computeroutput>unsigned char *</computeroutput>), and a length (<computeroutput>size_t</computeroutput>) which is the number of relevant bytes. As a general rule, minimal-length encoding is not enforced: values may have extra leading bytes of value 0.</para><para>RSA public keys consist in two integers:</para><para><itemizedlist>
<listitem><para>the modulus (<computeroutput>n</computeroutput>);</para></listitem><listitem><para>the public exponent (<computeroutput>e</computeroutput>).</para></listitem></itemizedlist>
</para><para>RSA private keys, as defined in <ulink url="https://tools.ietf.org/html/rfc3447">PKCS#1</ulink>, contain eight integers:</para><para><itemizedlist>
<listitem><para>the modulus (<computeroutput>n</computeroutput>);</para></listitem><listitem><para>the public exponent (<computeroutput>e</computeroutput>);</para></listitem><listitem><para>the private exponent (<computeroutput>d</computeroutput>);</para></listitem><listitem><para>the first prime factor (<computeroutput>p</computeroutput>);</para></listitem><listitem><para>the second prime factor (<computeroutput>q</computeroutput>);</para></listitem><listitem><para>the first reduced exponent (<computeroutput>dp</computeroutput>, which is <computeroutput>d</computeroutput> modulo <computeroutput>p-1</computeroutput>);</para></listitem><listitem><para>the second reduced exponent (<computeroutput>dq</computeroutput>, which is <computeroutput>d</computeroutput> modulo <computeroutput>q-1</computeroutput>);</para></listitem><listitem><para>the CRT coefficient (<computeroutput>iq</computeroutput>, the inverse of <computeroutput>q</computeroutput> modulo <computeroutput>p</computeroutput>).</para></listitem></itemizedlist>
</para><para>However, the implementations defined in BearSSL use only five of these integers: <computeroutput>p</computeroutput>, <computeroutput>q</computeroutput>, <computeroutput>dp</computeroutput>, <computeroutput>dq</computeroutput> and <computeroutput>iq</computeroutput>.</para><para><heading level="2">Security Features and Limitations</heading>
</para><para>The implementations contained in BearSSL have the following limitations and features:</para><para><itemizedlist>
<listitem><para>They are constant-time. This means that the execution time and memory access pattern may depend on the <emphasis>lengths</emphasis> of the private key components, but not on their value, nor on the value of the operand. Note that this property is not achieved through random masking, but &quot;true&quot; constant-time code.</para></listitem><listitem><para>They support only private keys with two prime factors. RSA private keys with three or more prime factors are nominally supported, but rarely used; they may offer faster operations, at the expense of more code and potentially a reduction in security if there are &quot;too many&quot; prime factors.</para></listitem><listitem><para>The public exponent may have arbitrary length. Of course, it is a good idea to keep public exponents small, so that public key operations are fast; but, contrary to some widely deployed implementations, BearSSL has no problem with public exponents longer than 32 bits.</para></listitem><listitem><para>The two prime factors of the modulus need not have the same length (but severely imbalanced factor lengths might reduce security). Similarly, there is no requirement that the first factor (<computeroutput>p</computeroutput>) be greater than the second factor (<computeroutput>q</computeroutput>).</para></listitem><listitem><para>Prime factors and modulus must be smaller than a compile-time limit. This is made necessary by the use of fixed-size stack buffers, and the limit has been adjusted to keep stack usage under 2 kB for the RSA operations. Currently, the maximum modulus size is 4096 bits, and the maximum prime factor size is 2080 bits.</para></listitem><listitem><para>The RSA functions themselves do not enforce lower size limits, except that which is absolutely necessary for the operation to mathematically make sense (e.g. a PKCS#1 v1.5 signature with SHA-1 requires a modulus of at least 361 bits). It is up to users of this code to enforce size limitations when appropriate (e.g. the X.509 validation engine, by default, rejects RSA keys of less than 1017 bits).</para></listitem><listitem><para>Within the size constraints expressed above, arbitrary bit lengths are supported. There is no requirement that prime factors or modulus have a size multiple of 8 or 16.</para></listitem><listitem><para>When verifying PKCS#1 v1.5 signatures, both variants of the hash function identifying header (with and without the ASN.1 NULL) are supported. When producing such signatures, the variant with the ASN.1 NULL is used.</para></listitem></itemizedlist>
</para><para><heading level="2">Implementations</heading>
</para><para>Three RSA implementations are included:</para><para><itemizedlist>
<listitem><para>The <bold>i32</bold> implementation internally represents big integers as arrays of 32-bit integers. It is perfunctory and portable, but not very efficient.</para></listitem><listitem><para>The <bold>i31</bold> implementation uses 32-bit integers, each containing 31 bits worth of integer data. The i31 implementation is somewhat faster than the i32 implementation (the reduced integer size makes carry propagation easier) for a similar code footprint, but uses very slightly larger stack buffers (about 4% bigger).</para></listitem><listitem><para>The <bold>i62</bold> implementation is similar to the i31 implementation, except that it internally leverages the 64x64-&gt;128 multiplication opcode. This implementation is available only on architectures where such an opcode exists. It is much faster than i31.</para></listitem><listitem><para>The <bold>i15</bold> implementation uses 16-bit integers, each containing 15 bits worth of integer data. Multiplication results fit on 32 bits, so this won&apos;t use the &quot;widening&quot; multiplication routine on ARM Cortex M0/M0+, for much better performance and constant-time execution. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>Thomas<sp/>Pornin<sp/>&lt;pornin@bolet.org&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BR_BEARSSL_RSA_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BR_BEARSSL_RSA_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bearssl__hash_8h" kindref="compound">bearssl_hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="structbr__rsa__public__key" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="163" refid="structbr__rsa__public__key_1a3d73ffff37329e2e1c9efdae8ddfa53f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__public__key_1a3d73ffff37329e2e1c9efdae8ddfa53f" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="165" refid="structbr__rsa__public__key_1acae4c476eba789845538804d565d3f55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key_1acae4c476eba789845538804d565d3f55" kindref="member">nlen</ref>;</highlight></codeline>
<codeline lineno="167" refid="structbr__rsa__public__key_1acc109cf04cf03328927471bae376731c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__public__key_1acc109cf04cf03328927471bae376731c" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="169" refid="structbr__rsa__public__key_1a25c48aea2fbaf14e669dc9cf1827cbc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key_1a25c48aea2fbaf14e669dc9cf1827cbc9" kindref="member">elen</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="structbr__rsa__private__key" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183" refid="structbr__rsa__private__key_1a283fea483aeeab2fb03021ce54e1b5ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structbr__rsa__private__key_1a283fea483aeeab2fb03021ce54e1b5ce" kindref="member">n_bitlen</ref>;</highlight></codeline>
<codeline lineno="185" refid="structbr__rsa__private__key_1a591f80a155fc42e1d79e8169fad15d4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__private__key_1a591f80a155fc42e1d79e8169fad15d4a" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="187" refid="structbr__rsa__private__key_1ab6fd51db3cd1ca46172091640c2258aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key_1ab6fd51db3cd1ca46172091640c2258aa" kindref="member">plen</ref>;</highlight></codeline>
<codeline lineno="189" refid="structbr__rsa__private__key_1ac30acdf290d3dc4a686af6b03c245581" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__private__key_1ac30acdf290d3dc4a686af6b03c245581" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="191" refid="structbr__rsa__private__key_1aebb01978bb7b68f16669460b9f3cbcb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key_1aebb01978bb7b68f16669460b9f3cbcb2" kindref="member">qlen</ref>;</highlight></codeline>
<codeline lineno="193" refid="structbr__rsa__private__key_1a1a9343cde32431aca1a7d3b2a367cf97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__private__key_1a1a9343cde32431aca1a7d3b2a367cf97" kindref="member">dp</ref>;</highlight></codeline>
<codeline lineno="195" refid="structbr__rsa__private__key_1aa1abb815bf9961340ca48f96fdd7a879" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key_1aa1abb815bf9961340ca48f96fdd7a879" kindref="member">dplen</ref>;</highlight></codeline>
<codeline lineno="197" refid="structbr__rsa__private__key_1ab236059c4f4ad886af9411b790c0d700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__private__key_1ab236059c4f4ad886af9411b790c0d700" kindref="member">dq</ref>;</highlight></codeline>
<codeline lineno="199" refid="structbr__rsa__private__key_1a2c53fb346f8b1deb36a5c448ec504dbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key_1a2c53fb346f8b1deb36a5c448ec504dbc" kindref="member">dqlen</ref>;</highlight></codeline>
<codeline lineno="201" refid="structbr__rsa__private__key_1aef2776053e415528d6c61ef6bfe69580" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structbr__rsa__private__key_1aef2776053e415528d6c61ef6bfe69580" kindref="member">iq</ref>;</highlight></codeline>
<codeline lineno="203" refid="structbr__rsa__private__key_1aa3bcdfee6999d70f8ea1bafd2b9cec63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key_1aa3bcdfee6999d70f8ea1bafd2b9cec63" kindref="member">iqlen</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_out);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="bearssl__rsa_8h_1a815e649c36eaeaaca75435b8964a1981" refkind="member"><highlight class="preprocessor">#define<sp/>BR_HASH_OID_SHA1<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char<sp/>*)&quot;\x05\x2B\x0E\x03\x02\x1A&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="bearssl__rsa_8h_1ab29aa8ea85eac4489f5891204ef71a8c" refkind="member"><highlight class="preprocessor">#define<sp/>BR_HASH_OID_SHA224<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char<sp/>*)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x04&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="bearssl__rsa_8h_1ace154a99e1432b1a066d356eebfdadfa" refkind="member"><highlight class="preprocessor">#define<sp/>BR_HASH_OID_SHA256<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char<sp/>*)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="bearssl__rsa_8h_1a6a55f643d23cb3ac74082094d7906aad" refkind="member"><highlight class="preprocessor">#define<sp/>BR_HASH_OID_SHA384<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char<sp/>*)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x02&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="bearssl__rsa_8h_1ae7bd98226f182dbaf9f914ac5fb80580" refkind="member"><highlight class="preprocessor">#define<sp/>BR_HASH_OID_SHA512<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char<sp/>*)&quot;\x09\x60\x86\x48\x01\x65\x03\x04\x02\x03&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref>)(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>RSA<sp/>&quot;i32&quot;<sp/>engine.<sp/>Integers<sp/>are<sp/>internally<sp/>represented<sp/>as<sp/>arrays<sp/>of</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>32-bit<sp/>integers,<sp/>and<sp/>the<sp/>core<sp/>multiplication<sp/>primitive<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>32x32-&gt;64<sp/>multiplication.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ac352f411eca5ec01119c537be37d3656" kindref="member">br_rsa_i32_public</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a9889bf6982e3cf9829138131be3c626f" kindref="member">br_rsa_i32_pkcs1_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_out);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a9797c7d2aa9b89a9abdc4b9e01bd1067" kindref="member">br_rsa_i32_pss_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_mgf1,<sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>salt_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a1022010003c6d57134a077a04007c00b" kindref="member">br_rsa_i32_private</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ad7c1d1ddec99983263e387a0dfee8d55" kindref="member">br_rsa_i32_pkcs1_sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>RSA<sp/>&quot;i31&quot;<sp/>engine.<sp/>Similar<sp/>to<sp/>i32,<sp/>but<sp/>only<sp/>31<sp/>bits<sp/>are<sp/>used<sp/>per<sp/>32-bit</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>word.<sp/>This<sp/>uses<sp/>slightly<sp/>more<sp/>stack<sp/>space<sp/>(about<sp/>4%<sp/>more)<sp/>and<sp/>code</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>space,<sp/>but<sp/>it<sp/>quite<sp/>faster.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a66b7b887dee035f0a7e9c9f069607324" kindref="member">br_rsa_i31_public</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a040cfd6374d2d5ba134e089f99116d4b" kindref="member">br_rsa_i31_pkcs1_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_out);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ad16d4cf5173707740d3d8996abb7fe44" kindref="member">br_rsa_i31_pss_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_mgf1,<sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>salt_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ac81516db5646d1e323333623180ca737" kindref="member">br_rsa_i31_private</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ab4294ed643d96474d3bca79aa5e650fe" kindref="member">br_rsa_i31_pkcs1_sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>RSA<sp/>&quot;i62&quot;<sp/>engine.<sp/>Similar<sp/>to<sp/>i31,<sp/>but<sp/>internal<sp/>multiplication<sp/>use</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>64x64-&gt;128<sp/>multiplications.<sp/>This<sp/>is<sp/>available<sp/>only<sp/>on<sp/>architecture</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>that<sp/>offer<sp/>such<sp/>an<sp/>opcode.</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1aaa865f120975ed6ddf1d3dab08ca1c5a" kindref="member">br_rsa_i62_public</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1af4c246e8c57c031fb2803967765dee04" kindref="member">br_rsa_i62_pkcs1_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_out);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a507516c2b4238e824703565668ba47b9" kindref="member">br_rsa_i62_pss_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_mgf1,<sp/></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>salt_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ae0b0d182b913b50de9863e82c6caef04" kindref="member">br_rsa_i62_private</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a9d71305804fa9038ced239be59559b12" kindref="member">br_rsa_i62_pkcs1_sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref><sp/><ref refid="bearssl__rsa_8h_1a6f5c8547d3d6b6b49588d8f7d05a3bcc" kindref="member">br_rsa_i62_public_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref><sp/><ref refid="bearssl__rsa_8h_1a93198c035a3951982f8a5cda79ef362d" kindref="member">br_rsa_i62_pkcs1_vrfy_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref><sp/><ref refid="bearssl__rsa_8h_1a399ad7529be433ec208042eeaf22534b" kindref="member">br_rsa_i62_private_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref><sp/><ref refid="bearssl__rsa_8h_1a7bb17eeae232d6a22e73a1ec4fcd6308" kindref="member">br_rsa_i62_pkcs1_sign_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref><sp/><ref refid="bearssl__rsa_8h_1a2d54ee6a0c2521dcbf72e53c27bcdfa3" kindref="member">br_rsa_i62_oaep_decrypt_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*<sp/>RSA<sp/>&quot;i15&quot;<sp/>engine.<sp/>Integers<sp/>are<sp/>represented<sp/>as<sp/>15-bit<sp/>integers,<sp/>so</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/>*<sp/>the<sp/>code<sp/>uses<sp/>only<sp/>32-bit<sp/>multiplication<sp/>(no<sp/>64-bit<sp/>result),<sp/>which</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*<sp/>is<sp/>vastly<sp/>faster<sp/>(and<sp/>constant-time)<sp/>on<sp/>the<sp/>ARM<sp/>Cortex<sp/>M0/M0+.</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1abae12d9326f85deebe73b30d8587bea5" kindref="member">br_rsa_i15_public</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a523c19243ff86b7721d296673cc65743" kindref="member">br_rsa_i15_pkcs1_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_out);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a914a7fc59895d3efe6f1d4f97c6675a3" kindref="member">br_rsa_i15_pss_vrfy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xlen,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*hf_mgf1,<sp/></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>salt_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__public__key" kindref="compound">br_rsa_public_key</ref><sp/>*pk);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a060e9e9aca1fe6bfa700c76eda09ebe0" kindref="member">br_rsa_i15_private</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a0a5650ab032e3492f83f6f3263c74f76" kindref="member">br_rsa_i15_pkcs1_sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash_oid,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash_len,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a016776655703f032ef525cf4ff42397c" kindref="member">br_rsa_public</ref><sp/><ref refid="bearssl__rsa_8h_1af697a17ed3b1a0537e154b850ebbdfcd" kindref="member">br_rsa_public_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref><sp/><ref refid="bearssl__rsa_8h_1a3a3334ff0b0072e59d8bf5477bc9c9ed" kindref="member">br_rsa_private_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a9ee06c1a4ae5af9e900d877a87ec8b17" kindref="member">br_rsa_pkcs1_vrfy</ref><sp/><ref refid="bearssl__rsa_8h_1ad0f63d3969b5c2877836e8bc62cf60d8" kindref="member">br_rsa_pkcs1_vrfy_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a24180c531a5c88c08cf7e32e96aa2eca" kindref="member">br_rsa_pkcs1_sign</ref><sp/><ref refid="bearssl__rsa_8h_1a53c33b40a9e69de7f0920f960b3fe0f3" kindref="member">br_rsa_pkcs1_sign_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a775a9e7056927e1d41866eec92d190c2" kindref="member">br_rsa_oaep_decrypt</ref><sp/><ref refid="bearssl__rsa_8h_1a45b81ba38527f30a820f35e7139fd8fa" kindref="member">br_rsa_oaep_decrypt_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1af9346eacc5c9e1c92649d5a8c6ff173e" kindref="member">br_rsa_ssl_decrypt</ref>(<ref refid="bearssl__rsa_8h_1a77085d6f13d25d5e211e6954ff30ff6a" kindref="member">br_rsa_private</ref><sp/>core,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a87d081c95ae1340736954f99a20788b5" kindref="member">br_rsa_i15_oaep_decrypt</ref>(</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1ac73f15d91f0a256781999eabbc0a0f01" kindref="member">br_rsa_i31_oaep_decrypt</ref>(</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a2f3971fbb6053759fb95ed7ebfc274da" kindref="member">br_rsa_i32_oaep_decrypt</ref>(</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a7a255ca9e14d83df4ae48cb27b7e8cf7" kindref="member">br_rsa_i62_oaep_decrypt</ref>(</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__hash__class__" kindref="compound">br_hash_class</ref><sp/>*dig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*label,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label_len,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274" refid="bearssl__rsa_8h_1a15e8845949a1bf95c679c62557b61237" refkind="member"><highlight class="preprocessor">#define<sp/>BR_RSA_KBUF_PRIV_SIZE(size)<sp/><sp/><sp/><sp/>(5<sp/>*<sp/>(((size)<sp/>+<sp/>15)<sp/>&gt;&gt;<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287" refid="bearssl__rsa_8h_1ae8cd0870bccef433f66997fbfa95d044" refkind="member"><highlight class="preprocessor">#define<sp/>BR_RSA_KBUF_PUB_SIZE(size)<sp/><sp/><sp/><sp/><sp/>(4<sp/>+<sp/>(((size)<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407" refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__rsa_8h_1a9ba7b6f414c70aa2ce0437e910217daa" kindref="member">br_rsa_i15_compute_modulus</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__rsa_8h_1a7c1ce8eac67f8103dba7de9ed961dccf" kindref="member">br_rsa_i31_compute_modulus</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><ref refid="bearssl__rsa_8h_1a9a30757ef7b79641b27a3431bfe8874e" kindref="member">br_rsa_compute_modulus</ref><sp/><ref refid="bearssl__rsa_8h_1a9f2a3b4960034283183588d53d68b51d" kindref="member">br_rsa_compute_modulus_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462" refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a77238f40db189250f90dda7462b0a008" kindref="member">br_rsa_i15_compute_pubexp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal">uint32_t<sp/><ref refid="bearssl__rsa_8h_1a46cb658ac235bb8af2ae5fe90eb5fac3" kindref="member">br_rsa_i31_compute_pubexp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><ref refid="bearssl__rsa_8h_1ab497818a6f2585fea9387b01f4a922e1" kindref="member">br_rsa_compute_pubexp</ref><sp/><ref refid="bearssl__rsa_8h_1a391a384a9e26548d49f19df60e9b5065" kindref="member">br_rsa_compute_pubexp_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527" refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/>uint32_t<sp/>pubexp);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__rsa_8h_1a0848962e49d52203e3eb96d73172ed59" kindref="member">br_rsa_i15_compute_privexp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/>uint32_t<sp/>pubexp);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bearssl__rsa_8h_1ac2a223bcba74b6234425560c9d1063c8" kindref="member">br_rsa_i31_compute_privexp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbr__rsa__private__key" kindref="compound">br_rsa_private_key</ref><sp/>*sk,<sp/>uint32_t<sp/>pubexp);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><ref refid="bearssl__rsa_8h_1ac7e80273a3a9edc13468c6e479f40f28" kindref="member">br_rsa_compute_privexp</ref><sp/><ref refid="bearssl__rsa_8h_1aaede1ff499ca9a3bd69c33a6757ed1d3" kindref="member">br_rsa_compute_privexp_get_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/docs/lib/bearssl/bearssl_rsa.h"/>
  </compounddef>
</doxygen>
