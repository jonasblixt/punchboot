<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="libfdt_8h" kind="file" language="C++">
    <compoundname>libfdt.h</compoundname>
    <includes refid="libfdt__env_8h" local="no">libfdt_env.h</includes>
    <includes refid="fdt_8h" local="no">fdt.h</includes>
    <incdepgraph>
      <node id="829">
        <label>stddef.h</label>
        <link refid="stddef_8h_source"/>
        <childnode refid="830" relation="include">
        </childnode>
      </node>
      <node id="832">
        <label>stdint_.h</label>
      </node>
      <node id="830">
        <label>stddef_.h</label>
      </node>
      <node id="828">
        <label>libfdt_env.h</label>
        <link refid="libfdt__env_8h_source"/>
        <childnode refid="829" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
      </node>
      <node id="827">
        <label>/docs/lib/fdt/include/libfdt.h</label>
        <link refid="libfdt_8h"/>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="835" relation="include">
        </childnode>
      </node>
      <node id="833">
        <label>string.h</label>
        <link refid="string_8h_source"/>
        <childnode refid="834" relation="include">
        </childnode>
      </node>
      <node id="831">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="832" relation="include">
        </childnode>
      </node>
      <node id="834">
        <label>string_.h</label>
      </node>
      <node id="835">
        <label>fdt.h</label>
        <link refid="fdt_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>: name of the alias th look up</header>
      <description><para>fdt_get_alias - retreive the path referenced by a given alias : pointer to the device tree blob</para><para>fdt_get_alias() retrieves the value of a given alias. That is, the value of the property named &apos;name&apos; in the node /aliases.</para><para>returns: a pointer to the expansion of the alias named &apos;name&apos;, if it exists NULL, if the given alias or the /aliases node does not exist </para></description>
      <memberdef kind="define" id="libfdt_8h_1a69cac5a5447cfd945064ef3da50e8b6d" prot="public" static="no">
        <name>FDT_MAX_NCELLS</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FDT_MAX_NCELLS - maximum value for #address-cells and #size-cells</para><para>This is the maximum value for #address-cells, #size-cells and similar properties that will be processed by libfdt. IEE1275 requires that OF implementations handle values up to 4. Implementations may support larger values, but in practice higher values aren&apos;t used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="884" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a1446c9a325c1348d88007632675f2641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* fdt_get_alias_namelen</definition>
        <argsstring>(const void *fdt, const char *name, int namelen)</argsstring>
        <name>fdt_get_alias_namelen</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>namelen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1af65ebffdb681288cefa41db5ad41d1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* fdt_get_alias</definition>
        <argsstring>(const void *fdt, const char *name)</argsstring>
        <name>fdt_get_alias</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a7b25d4bc3dd83403a39ef84b8a362bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_get_path</definition>
        <argsstring>(const void *fdt, int nodeoffset, char *buf, int buflen)</argsstring>
        <name>fdt_get_path</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_get_path - determine the full path of a node : pointer to the device tree blob : offset of the node whose path to find : character buffer to contain the returned path (will be overwritten) : size of the character buffer at buf</para><para>fdt_get_path() computes the full path of the node at offset nodeoffset, and records that path in the buffer at buf.</para><para>NOTE: This function is expensive, as it must scan the device tree structure from the start to nodeoffset.</para><para>returns: 0, on success buf contains the absolute path of the node at nodeoffset, as a NUL-terminated string. -FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_NOSPACE, the path of the given node is longer than (bufsize-1) characters and will not fit in the given buffer. -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a6c960d975c6644172ccc71fc2c48dbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_supernode_atdepth_offset</definition>
        <argsstring>(const void *fdt, int nodeoffset, int supernodedepth, int *nodedepth)</argsstring>
        <name>fdt_supernode_atdepth_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>supernodedepth</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nodedepth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_supernode_atdepth_offset - find a specific ancestor of a node : pointer to the device tree blob : offset of the node whose parent to find : depth of the ancestor to find : pointer to an integer variable (will be overwritten) or NULL</para><para>fdt_supernode_atdepth_offset() finds an ancestor of the given node at a specific depth from the root (where the root itself has depth 0, its immediate subnodes depth 1 and so forth). So fdt_supernode_atdepth_offset(fdt, nodeoffset, 0, NULL); will always return 0, the offset of the root node. If the node at nodeoffset has depth D, then: fdt_supernode_atdepth_offset(fdt, nodeoffset, D, NULL); will return nodeoffset itself.</para><para>NOTE: This function is expensive, as it must scan the device tree structure from the start to nodeoffset.</para><para>returns:</para><para>structure block offset of the node at node offset&apos;s ancestor of depth supernodedepth (&gt;=0), on success -FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_NOTFOUND, supernodedepth was greater than the depth of nodeoffset -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a2c0d12a5988128f0b674d4ec24b709d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_node_depth</definition>
        <argsstring>(const void *fdt, int nodeoffset)</argsstring>
        <name>fdt_node_depth</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_node_depth - find the depth of a given node : pointer to the device tree blob : offset of the node whose parent to find</para><para>fdt_node_depth() finds the depth of a given node. The root node has depth 0, its immediate subnodes depth 1 and so forth.</para><para>NOTE: This function is expensive, as it must scan the device tree structure from the start to nodeoffset.</para><para>returns: depth of the node at nodeoffset (&gt;=0), on success -FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a2b518dbd88cb783a9bffa1680ab297f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_parent_offset</definition>
        <argsstring>(const void *fdt, int nodeoffset)</argsstring>
        <name>fdt_parent_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_parent_offset - find the parent of a given node : pointer to the device tree blob : offset of the node whose parent to find</para><para>fdt_parent_offset() locates the parent node of a given node (that is, it finds the offset of the node which contains the node at nodeoffset as a subnode).</para><para>NOTE: This function is expensive, as it must scan the device tree structure from the start to nodeoffset, <emphasis>twice</emphasis>.</para><para>returns: structure block offset of the parent of the node at nodeoffset (&gt;=0), on success -FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a99d317b082102ce9a3eea47e86ab5757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_node_offset_by_prop_value</definition>
        <argsstring>(const void *fdt, int startoffset, const char *propname, const void *propval, int proplen)</argsstring>
        <name>fdt_node_offset_by_prop_value</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>propname</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>propval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>proplen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_node_offset_by_prop_value - find nodes with a given property value : pointer to the device tree blob : only find nodes after this offset : property name to check : property value to search for : length of the value in propval</para><para>fdt_node_offset_by_prop_value() returns the offset of the first node after startoffset, which has a property named propname whose value is of length proplen and has value equal to propval; or if startoffset is -1, the very first such node in the tree.</para><para>To iterate through all nodes matching the criterion, the following idiom can be used: offset = fdt_node_offset_by_prop_value(fdt, -1, propname, propval, proplen); while (offset != -FDT_ERR_NOTFOUND) { // other code here offset = fdt_node_offset_by_prop_value(fdt, offset, propname, propval, proplen); }</para><para>Note the -1 in the first call to the function, if 0 is used here instead, the function will never locate the root node, even if it matches the criterion.</para><para>returns: structure block offset of the located node (&gt;= 0, &gt;startoffset), on success -FDT_ERR_NOTFOUND, no node matching the criterion exists in the tree after startoffset -FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a4ff6571f3fe2fa89cfd6dc15f52eaf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_node_offset_by_phandle</definition>
        <argsstring>(const void *fdt, uint32_t phandle)</argsstring>
        <name>fdt_node_offset_by_phandle</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>phandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_node_offset_by_phandle - find the node with a given phandle : pointer to the device tree blob : phandle value</para><para>fdt_node_offset_by_phandle() returns the offset of the node which has the given phandle value. If there is more than one node in the tree with the given phandle (an invalid tree), results are undefined.</para><para>returns: structure block offset of the located node (&gt;= 0), on success -FDT_ERR_NOTFOUND, no node with that phandle exists -FDT_ERR_BADPHANDLE, given phandle value was invalid (0 or -1) -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="793" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ade07583ac432de46013acb3a07eca7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_node_check_compatible</definition>
        <argsstring>(const void *fdt, int nodeoffset, const char *compatible)</argsstring>
        <name>fdt_node_check_compatible</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>compatible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_node_check_compatible: check a node&apos;s compatible property : pointer to the device tree blob : offset of a tree node : string to match against</para><para>fdt_node_check_compatible() returns 0 if the given node contains a &apos;compatible&apos; property with the given string as one of its elements, it returns non-zero otherwise, or on error.</para><para>returns: 0, if the node has a &apos;compatible&apos; property listing the given string 1, if the node has a &apos;compatible&apos; property, but it does not list the given string -FDT_ERR_NOTFOUND, if the given node has no &apos;compatible&apos; property -FDT_ERR_BADOFFSET, if nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a7fee20e876e2af4dd32e987c6c8f104a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_node_offset_by_compatible</definition>
        <argsstring>(const void *fdt, int startoffset, const char *compatible)</argsstring>
        <name>fdt_node_offset_by_compatible</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>compatible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_node_offset_by_compatible - find nodes with a given &apos;compatible&apos; value : pointer to the device tree blob : only find nodes after this offset : &apos;compatible&apos; string to match against</para><para>fdt_node_offset_by_compatible() returns the offset of the first node after startoffset, which has a &apos;compatible&apos; property which lists the given compatible string; or if startoffset is -1, the very first such node in the tree.</para><para>To iterate through all nodes matching the criterion, the following idiom can be used: offset = fdt_node_offset_by_compatible(fdt, -1, compatible); while (offset != -FDT_ERR_NOTFOUND) { // other code here offset = fdt_node_offset_by_compatible(fdt, offset, compatible); }</para><para>Note the -1 in the first call to the function, if 0 is used here instead, the function will never locate the root node, even if it matches the criterion.</para><para>returns: structure block offset of the located node (&gt;= 0, &gt;startoffset), on success -FDT_ERR_NOTFOUND, no node matching the criterion exists in the tree after startoffset -FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a2492648af0491398295fac892cb8b758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_stringlist_contains</definition>
        <argsstring>(const char *strlist, int listlen, const char *str)</argsstring>
        <name>fdt_stringlist_contains</name>
        <param>
          <type>const char *</type>
          <declname>strlist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>listlen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_stringlist_contains - check a string list property for a string : Property containing a list of strings to check : Length of property : String to search for</para><para>This is a utility function provided for convenience. The list contains one or more strings, each terminated by \0, as is found in a device tree &quot;compatible&quot; property.</para><para><simplesect kind="return"><para>: 1 if the string is found in the list, 0 not found, or invalid list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1abc8a070eb5c099eb1718f45134a0915e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_address_cells</definition>
        <argsstring>(const void *fdt, int nodeoffset)</argsstring>
        <name>fdt_address_cells</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_address_cells - retrieve address size for a bus represented in the tree : pointer to the device tree blob : offset of the node to find the address size for</para><para>When the node has a valid #address-cells property, returns its value.</para><para>returns: 0 &lt;= n &lt; FDT_MAX_NCELLS, on success 2, if the node has no #address-cells property -FDT_ERR_BADNCELLS, if the node has a badly formatted or invalid #address-cells property -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a314966b6182211c6d38cc90748c3234b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_size_cells</definition>
        <argsstring>(const void *fdt, int nodeoffset)</argsstring>
        <name>fdt_size_cells</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_size_cells - retrieve address range size for a bus represented in the tree : pointer to the device tree blob : offset of the node to find the address range size for</para><para>When the node has a valid #size-cells property, returns its value.</para><para>returns: 0 &lt;= n &lt; FDT_MAX_NCELLS, on success 2, if the node has no #address-cells property -FDT_ERR_BADNCELLS, if the node has a badly formatted or invalid #size-cells property -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="923" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>: name of the property to nop</header>
      <description><para>fdt_delprop - delete a property : pointer to the device tree blob : offset of the node whose property to nop</para><para>fdt_del_property() will delete the given property.</para><para>This function will delete data from the blob, and will therefore change the offsets of some existing nodes.</para><para>returns: 0, on success -FDT_ERR_NOTFOUND, node does not have the named property -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADLAYOUT, -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para></description>
      <memberdef kind="define" id="libfdt_8h_1a64ff06f7a22f0c7a80f239429b0cf28c" prot="public" static="no">
        <name>fdt_property_string</name>
        <param><defname>fdt</defname></param>
        <param><defname>name</defname></param>
        <param><defname>str</defname></param>
        <initializer><ref refid="structfdt__property" kindref="compound">fdt_property</ref>(fdt, name, str, strlen(str)+1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1116" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1acf3ba20475e7b94a8d31eac14ea7228d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_nop_property</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name)</argsstring>
        <name>fdt_nop_property</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1066" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ac1b08e2054997c7e9814fc0b04acb305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_nop_node</definition>
        <argsstring>(void *fdt, int nodeoffset)</argsstring>
        <name>fdt_nop_node</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_nop_node - replace a node (subtree) with nop tags : pointer to the device tree blob : offset of the node to nop</para><para>fdt_nop_node() will replace a given node&apos;s representation in the blob, including all its subnodes, if any, with FDT_NOP tags, effectively removing it from the tree.</para><para>This function will alter only the bytes in the blob which contain the node and its properties and subnodes, and will not alter or move any other part of the tree.</para><para>returns: 0, on success -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a4dc7458fd1035524255f34a9281f6531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_create</definition>
        <argsstring>(void *buf, int bufsize)</argsstring>
        <name>fdt_create</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ac0274b125d712e01d9022bad43756c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_resize</definition>
        <argsstring>(void *fdt, void *buf, int bufsize)</argsstring>
        <name>fdt_resize</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1097" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1aa19f8fdf0e1719f5f5f45d5301dba4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_add_reservemap_entry</definition>
        <argsstring>(void *fdt, uint64_t addr, uint64_t size)</argsstring>
        <name>fdt_add_reservemap_entry</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1098" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a05d900f8144f846f0ccafbcf97c46078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_finish_reservemap</definition>
        <argsstring>(void *fdt)</argsstring>
        <name>fdt_finish_reservemap</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a70390d95f50f22e8c5c175c0922e5f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_begin_node</definition>
        <argsstring>(void *fdt, const char *name)</argsstring>
        <name>fdt_begin_node</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a525f92c0978941a45a4c3a32793266e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_property</definition>
        <argsstring>(void *fdt, const char *name, const void *val, int len)</argsstring>
        <name>fdt_property</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ae176cf7ebbe070938c5881a26355dd74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_property_u32</definition>
        <argsstring>(void *fdt, const char *name, uint32_t val)</argsstring>
        <name>fdt_property_u32</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1102" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1102" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a4a3ec15864f83c6e84a03eec276ed8b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_property_u64</definition>
        <argsstring>(void *fdt, const char *name, uint64_t val)</argsstring>
        <name>fdt_property_u64</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1107" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1107" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1adebd22ded4e3a8e4414cfd720332a8c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_property_cell</definition>
        <argsstring>(void *fdt, const char *name, uint32_t val)</argsstring>
        <name>fdt_property_cell</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1112" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1112" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ac806fe57ee0d47d0a8621fa82aa5414b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_end_node</definition>
        <argsstring>(void *fdt)</argsstring>
        <name>fdt_end_node</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a64e71b32a23ad494306c69b3cd4ba159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_finish</definition>
        <argsstring>(void *fdt)</argsstring>
        <name>fdt_finish</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1abf455011fdab75e2f9df2c5437a04968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_create_empty_tree</definition>
        <argsstring>(void *buf, int bufsize)</argsstring>
        <name>fdt_create_empty_tree</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1aa493ca8c4e02dbfdc415e74115c794bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_open_into</definition>
        <argsstring>(const void *fdt, void *buf, int bufsize)</argsstring>
        <name>fdt_open_into</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a994a93e82b34bfdaeeb8288551e6fa98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_pack</definition>
        <argsstring>(void *fdt)</argsstring>
        <name>fdt_pack</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a3c35dbaf4263ec1947046c1259f14cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_add_mem_rsv</definition>
        <argsstring>(void *fdt, uint64_t address, uint64_t size)</argsstring>
        <name>fdt_add_mem_rsv</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_add_mem_rsv - add one memory reserve map entry : pointer to the device tree blob , : 64-bit values (native endian)</para><para>Adds a reserve map entry to the given blob reserving a region at address address of length size.</para><para>This function will insert data into the reserve map and will therefore change the indexes of some entries in the table.</para><para>returns: 0, on success -FDT_ERR_NOSPACE, there is insufficient free space in the blob to contain the new reservation entry -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_BADLAYOUT, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a409d3f83af0304a896b32d8552c8669d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_del_mem_rsv</definition>
        <argsstring>(void *fdt, int n)</argsstring>
        <name>fdt_del_mem_rsv</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_del_mem_rsv - remove a memory reserve map entry : pointer to the device tree blob <linebreak/>
: entry to remove</para><para>fdt_del_mem_rsv() removes the n-th memory reserve map entry from the blob.</para><para>This function will delete data from the reservation table and will therefore change the indexes of some entries in the table.</para><para>returns: 0, on success -FDT_ERR_NOTFOUND, there is no entry of the given index (i.e. there are less than n+1 reserve map entries) -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_BADLAYOUT, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a60669f12d277c4c0cc25bba7b9c2d5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_delprop</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name)</argsstring>
        <name>fdt_delprop</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1509" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>: name of the property to change</header>
      <description><para>fdt_appendprop_string - append a string to a property : pointer to the device tree blob : offset of the node whose property to change</para><para>: string value to append to the property</para><para>fdt_appendprop_string() appends the given string to the value of the named property in the given node, or creates a new property with that value if it does not already exist.</para><para>This function may insert data into the blob, and will therefore change the offsets of some existing nodes.</para><para>returns: 0, on success -FDT_ERR_NOSPACE, there is insufficient free space in the blob to contain the new property value -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADLAYOUT, -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_BADLAYOUT, -FDT_ERR_TRUNCATED, standard meanings </para></description>
      <memberdef kind="define" id="libfdt_8h_1adc54252a52b14e31c6b0dbed83532145" prot="public" static="no">
        <name>fdt_setprop_string</name>
        <param><defname>fdt</defname></param>
        <param><defname>nodeoffset</defname></param>
        <param><defname>name</defname></param>
        <param><defname>str</defname></param>
        <initializer>fdt_setprop((fdt), (nodeoffset), (name), (str), strlen(str)+1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1343" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1aa3e45fb11ddbadd86a15953abfd68f63" prot="public" static="no">
        <name>fdt_appendprop_string</name>
        <param><defname>fdt</defname></param>
        <param><defname>nodeoffset</defname></param>
        <param><defname>name</defname></param>
        <param><defname>str</defname></param>
        <initializer>fdt_appendprop((fdt), (nodeoffset), (name), (str), strlen(str)+1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1484" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a6943ff251ae8c4ffea474788215965a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_setprop_inplace</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, const void *val, int len)</argsstring>
        <name>fdt_setprop_inplace</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="958" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1aa0ff5bdd0d38a77ffe25261c971d29a3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_setprop_inplace_u32</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint32_t val)</argsstring>
        <name>fdt_setprop_inplace_u32</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="989" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="989" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1abae04fd5a0fd061f0717ce1671e79698" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_setprop_inplace_u64</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint64_t val)</argsstring>
        <name>fdt_setprop_inplace_u64</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1024" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1024" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a39b5ae524f587a5b8296d46f6595845e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_setprop_inplace_cell</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint32_t val)</argsstring>
        <name>fdt_setprop_inplace_cell</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_setprop_inplace_cell - change the value of a single-cell property</para><para>This is an alternative name for fdt_setprop_inplace_u32() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1036" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1036" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ae9e3e4d33edd50404838414b8f36d158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_setprop</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, const void *val, int len)</argsstring>
        <name>fdt_setprop</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a47a74244b419ad1a3f6586c3b86a013c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_setprop_u32</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint32_t val)</argsstring>
        <name>fdt_setprop_u32</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1262" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1262" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a5cdff5ee217d23aee2cfade78050d82c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_setprop_u64</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint64_t val)</argsstring>
        <name>fdt_setprop_u64</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1297" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1297" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a2e1f923bfc1fc1be9604d526fcdabfbe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_setprop_cell</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint32_t val)</argsstring>
        <name>fdt_setprop_cell</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_setprop_cell - set a property to a single cell value</para><para>This is an alternative name for fdt_setprop_u32() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1309" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1309" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a42f2688a9666e001a8155ebbbd96e559" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_appendprop_u32</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint32_t val)</argsstring>
        <name>fdt_appendprop_u32</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1404" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1404" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ab72100c77d3ceda20da6a423156a2968" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_appendprop_u64</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint64_t val)</argsstring>
        <name>fdt_appendprop_u64</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1439" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1439" bodyend="1444"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a78cceaf72acd53f7f702848451ed3d22" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fdt_appendprop_cell</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, uint32_t val)</argsstring>
        <name>fdt_appendprop_cell</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_appendprop_cell - append a single cell value to a property</para><para>This is an alternative name for fdt_appendprop_u32() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1451" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="1451" bodyend="1455"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>: name of the subnode to locate</header>
      <description><para>fdt_add_subnode - creates a new node : pointer to the device tree blob : structure block offset of a node</para><para>fdt_add_subnode() creates a new node as a subnode of the node at structure block offset parentoffset, with the given name (which should include the unit address, if any).</para><para>This function will insert data into the blob, and will therefore change the offsets of some existing nodes.</para><para>returns: structure block offset of the created nodeequested subnode (&gt;=0), on success -FDT_ERR_NOTFOUND, if the requested subnode does not exist -FDT_ERR_BADOFFSET, if parentoffset did not point to an FDT_BEGIN_NODE tag -FDT_ERR_EXISTS, if the node at parentoffset already has a subnode of the given name -FDT_ERR_NOSPACE, if there is insufficient free space in the blob to contain the new node -FDT_ERR_NOSPACE -FDT_ERR_BADLAYOUT -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings. </para></description>
      <memberdef kind="function" id="libfdt_8h_1a92756de14074ac915bd5b1056453e04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_subnode_offset_namelen</definition>
        <argsstring>(const void *fdt, int parentoffset, const char *name, int namelen)</argsstring>
        <name>fdt_subnode_offset_namelen</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parentoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>namelen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a22dd90f8bea25063fe0debae7683eb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_subnode_offset</definition>
        <argsstring>(const void *fdt, int parentoffset, const char *name)</argsstring>
        <name>fdt_subnode_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parentoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1aa8b4d143366fc7d443f47c1c92a8f8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_path_offset_namelen</definition>
        <argsstring>(const void *fdt, const char *path, int namelen)</argsstring>
        <name>fdt_path_offset_namelen</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>namelen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_path_offset_namelen - find a tree node by its full path : pointer to the device tree blob : full path of the node to locate : number of characters of path to consider</para><para>Identical to fdt_path_offset(), but only consider the first namelen characters of path as the path name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a222c01ef0a514a4cf7586f6de8b17072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_path_offset</definition>
        <argsstring>(const void *fdt, const char *path)</argsstring>
        <name>fdt_path_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_path_offset - find a tree node by its full path : pointer to the device tree blob : full path of the node to locate</para><para>fdt_path_offset() finds a node of a given path in the device tree. Each path component may omit the unit address portion, but the results of this are undefined if any such path component is ambiguous (that is if there are multiple nodes at the relevant level matching the given component, differentiated only by unit address).</para><para>returns: structure block offset of the node with the requested path (&gt;=0), on success -FDT_ERR_BADPATH, given path does not begin with &apos;/&apos; or is invalid -FDT_ERR_NOTFOUND, if the requested node does not exist -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ac564aade4959681f30ee68200e0ba5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* fdt_get_name</definition>
        <argsstring>(const void *fdt, int nodeoffset, int *lenp)</argsstring>
        <name>fdt_get_name</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_get_name - retrieve the name of a given node : pointer to the device tree blob : structure block offset of the starting node : pointer to an integer variable (will be overwritten) or NULL</para><para>fdt_get_name() retrieves the name (including unit address) of the device tree node at structure block offset nodeoffset. If lenp is non-NULL, the length of this name is also returned, in the integer pointed to by lenp.</para><para>returns: pointer to the node&apos;s name, on success If lenp is non-NULL, *lenp contains the length of that name (&gt;=0) NULL, on error if lenp is non-NULL *lenp contains an error code (&lt;0): -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1aba2e2271df9d7cbcbb6ac633bd169bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_first_property_offset</definition>
        <argsstring>(const void *fdt, int nodeoffset)</argsstring>
        <name>fdt_first_property_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_first_property_offset - find the offset of a node&apos;s first property : pointer to the device tree blob : structure block offset of a node</para><para>fdt_first_property_offset() finds the first property of the node at the given structure block offset.</para><para>returns: structure block offset of the property (&gt;=0), on success -FDT_ERR_NOTFOUND, if the requested node has no properties -FDT_ERR_BADOFFSET, if nodeoffset did not point to an FDT_BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ad17c7077eebb6668f09aadda1f6c8fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_next_property_offset</definition>
        <argsstring>(const void *fdt, int offset)</argsstring>
        <name>fdt_next_property_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_next_property_offset - step through a node&apos;s properties : pointer to the device tree blob : structure block offset of a property</para><para>fdt_next_property_offset() finds the property immediately after the one at the given structure block offset. This will be a property of the same node as the given property.</para><para>returns: structure block offset of the next property (&gt;=0), on success -FDT_ERR_NOTFOUND, if the given property is the last in its node -FDT_ERR_BADOFFSET, if nodeoffset did not point to an FDT_PROP tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1aed0ef29b265fbbd7e859230729cfeba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structfdt__property" kindref="compound">fdt_property</ref> *</type>
        <definition>const struct fdt_property* fdt_get_property_by_offset</definition>
        <argsstring>(const void *fdt, int offset, int *lenp)</argsstring>
        <name>fdt_get_property_by_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_get_property_by_offset - retrieve the property at a given offset : pointer to the device tree blob : offset of the property to retrieve : pointer to an integer variable (will be overwritten) or NULL</para><para>fdt_get_property_by_offset() retrieves a pointer to the <ref refid="structfdt__property" kindref="compound">fdt_property</ref> structure within the device tree blob at the given offset. If lenp is non-NULL, the length of the property value is also returned, in the integer pointed to by lenp.</para><para>returns: pointer to the structure representing the property if lenp is non-NULL, *lenp contains the length of the property value (&gt;=0) NULL, on error if lenp is non-NULL, *lenp contains an error code (&lt;0): -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_PROP tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a9ec78ea0fd08982a50310216ff295747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_add_subnode_namelen</definition>
        <argsstring>(void *fdt, int parentoffset, const char *name, int namelen)</argsstring>
        <name>fdt_add_subnode_namelen</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parentoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>namelen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a006872c92462f1a3c962192df483600c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_add_subnode</definition>
        <argsstring>(void *fdt, int parentoffset, const char *name)</argsstring>
        <name>fdt_add_subnode</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parentoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ad67005f5936eebeb182e55d5f36e9f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_del_node</definition>
        <argsstring>(void *fdt, int nodeoffset)</argsstring>
        <name>fdt_del_node</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_del_node - delete a node (subtree) : pointer to the device tree blob : offset of the node to nop</para><para>fdt_del_node() will remove the given node, including all its subnodes if any, from the blob.</para><para>This function will delete data from the blob, and will therefore change the offsets of some existing nodes.</para><para>returns: 0, on success -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADLAYOUT, -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a50813a1a70923f23f61c5b617bc6ed68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* fdt_strerror</definition>
        <argsstring>(int errval)</argsstring>
        <name>fdt_strerror</name>
        <param>
          <type>int</type>
          <declname>errval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1584" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>: name of the property to find</header>
      <description><para>fdt_getprop - retrieve the value of a given property : pointer to the device tree blob : offset of the node whose property to find</para><para>: pointer to an integer variable (will be overwritten) or NULL</para><para>fdt_getprop() retrieves a pointer to the value of the property named &apos;name&apos; of the node at offset nodeoffset (this will be a pointer to within the device blob itself, not a copy of the value). If lenp is non-NULL, the length of the property value is also returned, in the integer pointed to by lenp.</para><para>returns: pointer to the property&apos;s value if lenp is non-NULL, *lenp contains the length of the property value (&gt;=0) NULL, on error if lenp is non-NULL, *lenp contains an error code (&lt;0): -FDT_ERR_NOTFOUND, node does not have named property -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para></description>
      <memberdef kind="function" id="libfdt_8h_1a4ab5d7e2660c4ee1d070bec6fb9b51df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structfdt__property" kindref="compound">fdt_property</ref> *</type>
        <definition>const struct fdt_property* fdt_get_property_namelen</definition>
        <argsstring>(const void *fdt, int nodeoffset, const char *name, int namelen, int *lenp)</argsstring>
        <name>fdt_get_property_namelen</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>namelen</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a67211b32216f08d0b8dbbe7aa6c6aebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const struct <ref refid="structfdt__property" kindref="compound">fdt_property</ref> *</type>
        <definition>const struct fdt_property* fdt_get_property</definition>
        <argsstring>(const void *fdt, int nodeoffset, const char *name, int *lenp)</argsstring>
        <name>fdt_get_property</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a3ef3cd199863ded58e473a71ebdd478c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfdt__property" kindref="compound">fdt_property</ref> *</type>
        <definition>static struct fdt_property* fdt_get_property_w</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, int *lenp)</argsstring>
        <name>fdt_get_property_w</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="497" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="497" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a631207472dcddda9470f5791260da0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* fdt_getprop_by_offset</definition>
        <argsstring>(const void *fdt, int offset, const char **namep, int *lenp)</argsstring>
        <name>fdt_getprop_by_offset</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>namep</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_getprop_by_offset - retrieve the value of a property at a given offset : pointer to the device tree blob : offset of the property to read : pointer to a string variable (will be overwritten) or NULL : pointer to an integer variable (will be overwritten) or NULL</para><para>fdt_getprop_by_offset() retrieves a pointer to the value of the property at structure block offset &apos;offset&apos; (this will be a pointer to within the device blob itself, not a copy of the value). If lenp is non-NULL, the length of the property value is also returned, in the integer pointed to by lenp. If namep is non-NULL, the property&apos;s namne will also be returned in the char * pointed to by namep (this will be a pointer to within the device tree&apos;s string block, not a new copy of the name).</para><para>returns: pointer to the property&apos;s value if lenp is non-NULL, *lenp contains the length of the property value (&gt;=0) if namep is non-NULL *namep contiains a pointer to the property name. NULL, on error if lenp is non-NULL, *lenp contains an error code (&lt;0): -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_PROP tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_TRUNCATED, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1af06aa67642c5e97ec636619a4ac3f19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* fdt_getprop_namelen</definition>
        <argsstring>(const void *fdt, int nodeoffset, const char *name, int namelen, int *lenp)</argsstring>
        <name>fdt_getprop_namelen</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>namelen</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a0a72997fe1eb5a57885bbb988256d08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* fdt_getprop</definition>
        <argsstring>(const void *fdt, int nodeoffset, const char *name, int *lenp)</argsstring>
        <name>fdt_getprop</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a5f92f335859a2a12ea2aeffb171dca5b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* fdt_getprop_w</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, int *lenp)</argsstring>
        <name>fdt_getprop_w</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lenp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="582" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a0689bb9f27bdaaa355855425b4eb7149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t fdt_get_phandle</definition>
        <argsstring>(const void *fdt, int nodeoffset)</argsstring>
        <name>fdt_get_phandle</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_get_phandle - retrieve the phandle of a given node : pointer to the device tree blob : structure block offset of the node</para><para>fdt_get_phandle() retrieves the phandle of the device tree node at structure block offset nodeoffset.</para><para>returns: the phandle of the node at nodeoffset, on success (!= 0, != -1) 0, if the node has no phandle, or another error occurs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="600" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>: name to give the node</header>
      <description><para>fdt_set_name - change the name of a given node : pointer to the device tree blob : structure block offset of a node</para><para>fdt_set_name() replaces the name (including unit address, if any) of the given node with the given string. NOTE: this function can&apos;t efficiently check if the new name is unique amongst the given node&apos;s siblings; results are undefined if this function is invoked with a name equal to one of the given node&apos;s siblings.</para><para>This function may insert or delete data from the blob, and will therefore change the offsets of some existing nodes.</para><para>returns: 0, on success -FDT_ERR_NOSPACE, there is insufficient free space in the blob to contain the new name -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, standard meanings </para></description>
      <memberdef kind="function" id="libfdt_8h_1ada21790bc118086b5bfadd815379ecd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_set_name</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name)</argsstring>
        <name>fdt_set_name</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1201" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>: name of the property to append to</header>
      <description><para>fdt_appendprop - append to or create a property : pointer to the device tree blob : offset of the node whose property to change</para><para>: pointer to data to append to the property value : length of the data to append to the property value</para><para>fdt_appendprop() appends the value to the named property in the given node, creating the property if it does not already exist.</para><para>This function may insert data into the blob, and will therefore change the offsets of some existing nodes.</para><para>returns: 0, on success -FDT_ERR_NOSPACE, there is insufficient free space in the blob to contain the new property value -FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag -FDT_ERR_BADLAYOUT, -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, -FDT_ERR_BADSTRUCTURE, -FDT_ERR_BADLAYOUT, -FDT_ERR_TRUNCATED, standard meanings </para></description>
      <memberdef kind="function" id="libfdt_8h_1a26f2518e2c64f013069c613bee7a83a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_appendprop</definition>
        <argsstring>(void *fdt, int nodeoffset, const char *name, const void *val, int len)</argsstring>
        <name>fdt_appendprop</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodeoffset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="1373" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="libfdt_8h_1ab71fe9f2c75280cd75b42263dd2aa3f1" prot="public" static="no">
        <name>FDT_FIRST_SUPPORTED_VERSION</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="57" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a3d13a6bfa946b38c95d1c327d4139c22" prot="public" static="no">
        <name>FDT_LAST_SUPPORTED_VERSION</name>
        <initializer>0x11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="58" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a93cfa052f4b28df4bfc7d336b692fa07" prot="public" static="no">
        <name>FDT_ERR_NOTFOUND</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="61" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a26af70ef43c09fafd5eb29f10a09278a" prot="public" static="no">
        <name>FDT_ERR_EXISTS</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="63" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a149fb54f14ba915a78319a9570e4eae3" prot="public" static="no">
        <name>FDT_ERR_NOSPACE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="66" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a5025b6b09a009bd2b516e6a831d7ce72" prot="public" static="no">
        <name>FDT_ERR_BADOFFSET</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="73" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a2b7c103b35891f65523585a43b92a748" prot="public" static="no">
        <name>FDT_ERR_BADPATH</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="77" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a0f264f8ba8cc4e98852c8246bc6312bc" prot="public" static="no">
        <name>FDT_ERR_BADPHANDLE</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="81" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a87f75249bba66fc5e21110e00a990a81" prot="public" static="no">
        <name>FDT_ERR_BADSTATE</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="84" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a2b814a0775d93b5da1442fc091e49958" prot="public" static="no">
        <name>FDT_ERR_TRUNCATED</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="90" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1abb777d59bc55628f8736b2b6c799213b" prot="public" static="no">
        <name>FDT_ERR_BADMAGIC</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="93" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ad2a3b277a1e6987ead001fcd2415d88d" prot="public" static="no">
        <name>FDT_ERR_BADVERSION</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="97" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1aef7e5f2183c72ef2b4698bb918d8f2f7" prot="public" static="no">
        <name>FDT_ERR_BADSTRUCTURE</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="102" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ad698818ae8340bbadf1cbbb49e4c968d" prot="public" static="no">
        <name>FDT_ERR_BADLAYOUT</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="106" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a02625761a47e8012c53fb389dd25fadd" prot="public" static="no">
        <name>FDT_ERR_INTERNAL</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="114" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ac99b64a390af02e95d9236e5c1d03780" prot="public" static="no">
        <name>FDT_ERR_BADNCELLS</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="120" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a417a0f3083b9e164446262d59e89cd5a" prot="public" static="no">
        <name>FDT_ERR_MAX</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="124" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a0eaa7f32ec9d4c441e2e3d3c56bfc850" prot="public" static="no">
        <name>fdt_get_header</name>
        <param><defname>fdt</defname></param>
        <param><defname>field</defname></param>
        <initializer>(fdt32_to_cpu(((const struct <ref refid="structfdt__header" kindref="compound">fdt_header</ref> *)(fdt))-&gt;field))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="170" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a783c67f6971d10232c84ecd0aa76f461" prot="public" static="no">
        <name>fdt_magic</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, magic))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="172" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a2acbb1f436008e0830f7e329bbb13cd0" prot="public" static="no">
        <name>fdt_totalsize</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, totalsize))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="173" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ae2ef3611d83ac29bb6de09594ead9969" prot="public" static="no">
        <name>fdt_off_dt_struct</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, off_dt_struct))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="174" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a80994b6320a372f47942ac65f55c0d6c" prot="public" static="no">
        <name>fdt_off_dt_strings</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, off_dt_strings))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="175" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ad34e2939365df0a17061d177356b4e39" prot="public" static="no">
        <name>fdt_off_mem_rsvmap</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, off_mem_rsvmap))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="176" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a13dbe2495fe8e67717bc708c523c781e" prot="public" static="no">
        <name>fdt_version</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, version))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="177" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a6b64d727951727aa9464061496abc1e9" prot="public" static="no">
        <name>fdt_last_comp_version</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, last_comp_version))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="178" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ad5f615bb04034e144f826b3a182ff985" prot="public" static="no">
        <name>fdt_boot_cpuid_phys</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, boot_cpuid_phys))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="179" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1aa0748803d707f2be7d15ebfb815d31b4" prot="public" static="no">
        <name>fdt_size_dt_strings</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, size_dt_strings))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="180" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1a73b5fa0a791f02805b93ea70c6cb30ab" prot="public" static="no">
        <name>fdt_size_dt_struct</name>
        <param><defname>fdt</defname></param>
        <initializer>(fdt_get_header(fdt, size_dt_struct))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="181" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libfdt_8h_1ac26079629e799206fb163a575da52a8a" prot="public" static="no">
        <name>__fdt_set_hdr</name>
        <param><defname>name</defname></param>
        <initializer>static inline void fdt_set_##name(void *fdt, uint32_t val) \
	{ \
		struct <ref refid="structfdt__header" kindref="compound">fdt_header</ref> *fdth = (struct <ref refid="structfdt__header" kindref="compound">fdt_header</ref>*)fdt; \
		fdth-&gt;name = cpu_to_fdt32(val); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="183" column="9" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="libfdt_8h_1a0fb70da665ded79540f3855e021704a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* fdt_offset_ptr</definition>
        <argsstring>(const void *fdt, int offset, unsigned int checklen)</argsstring>
        <name>fdt_offset_ptr</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>checklen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1ab5fff326afde3a9b05b6327aa6e5a7bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* fdt_offset_ptr_w</definition>
        <argsstring>(void *fdt, int offset, int checklen)</argsstring>
        <name>fdt_offset_ptr_w</name>
        <param>
          <type>void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>checklen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="131" column="1" bodyfile="/docs/lib/fdt/include/libfdt.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a2634793f3f530d97ca208c56b50accf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t fdt_next_tag</definition>
        <argsstring>(const void *fdt, int offset, int *nextoffset)</argsstring>
        <name>fdt_next_tag</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nextoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a6603ac8041afcc7fde5c0b25de765103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_next_node</definition>
        <argsstring>(const void *fdt, int offset, int *depth)</argsstring>
        <name>fdt_next_node</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a0c888491fbef3ded52e45ac4772ea02f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_first_subnode</definition>
        <argsstring>(const void *fdt, int offset)</argsstring>
        <name>fdt_first_subnode</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_first_subnode() - get offset of first direct subnode</para><para>: FDT blob : Offset of node to check <simplesect kind="return"><para>offset of first subnode, or -FDT_ERR_NOTFOUND if there is none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1acc373b28d3daa598bc3aa9a131224773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_next_subnode</definition>
        <argsstring>(const void *fdt, int offset)</argsstring>
        <name>fdt_next_subnode</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_next_subnode() - get offset of next direct subnode</para><para>After first calling fdt_first_subnode(), call this function repeatedly to get direct subnodes of a parent node.</para><para>: FDT blob : Offset of previous subnode <simplesect kind="return"><para>offset of next subnode, or -FDT_ERR_NOTFOUND if there are no more subnodes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1af99b5d93d9b3663edec0276d6c99220f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__fdt_set_hdr</definition>
        <argsstring>(magic) __fdt_set_hdr(totalsize) __fdt_set_hdr(off_dt_struct) __fdt_set_hdr(off_dt_strings) __fdt_set_hdr(off_mem_rsvmap) __fdt_set_hdr(version) __fdt_set_hdr(last_comp_version) __fdt_set_hdr(boot_cpuid_phys) __fdt_set_hdr(size_dt_strings) __fdt_set_hdr(size_dt_struct) int fdt_check_header(const void *fdt)</argsstring>
        <name>__fdt_set_hdr</name>
        <param>
          <type>magic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_check_header - sanity check a device tree or possible device tree : pointer to data which might be a flattened device tree</para><para>fdt_check_header() checks that the given buffer contains what appears to be a flattened device tree with sane information in its header.</para><para>returns: 0, if the buffer appears to contain a valid device tree -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, standard meanings, as above </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a1be79096bbc68a1986e54eb4c57a8007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_move</definition>
        <argsstring>(const void *fdt, void *buf, int bufsize)</argsstring>
        <name>fdt_move</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_move - move a device tree around in memory : pointer to the device tree to move : pointer to memory where the device is to be moved : size of the memory space at buf</para><para>fdt_move() relocates, if possible, the device tree blob located at fdt to the buffer at buf of size bufsize. The buffer may overlap with the existing device tree blob at fdt. Therefore, fdt_move(fdt, fdt, fdt_totalsize(fdt)) should always succeed.</para><para>returns: 0, on success -FDT_ERR_NOSPACE, bufsize is insufficient to contain the device tree -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a5ccdba67e9d56872ef16dcbd405da94a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* fdt_string</definition>
        <argsstring>(const void *fdt, int stroffset)</argsstring>
        <name>fdt_string</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stroffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_string - retrieve a string from the strings block of a device tree : pointer to the device tree blob : offset of the string within the strings block (native endian)</para><para>fdt_string() retrieves a pointer to a single string from the strings block of the device tree blob at fdt.</para><para>returns: a pointer to the string, on success NULL, if stroffset is out of bounds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a79fa5b76564c75c9fb00fe8ca3ba3eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_num_mem_rsv</definition>
        <argsstring>(const void *fdt)</argsstring>
        <name>fdt_num_mem_rsv</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_num_mem_rsv - retrieve the number of memory reserve map entries : pointer to the device tree blob</para><para>Returns the number of entries in the device tree blob&apos;s memory reservation map. This does not include the terminating 0,0 entry or any other (0,0) entries reserved for expansion.</para><para>returns: the number of entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="libfdt_8h_1a4c50a267dcbd5c24256040e5c60362e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fdt_get_mem_rsv</definition>
        <argsstring>(const void *fdt, int n, uint64_t *address, uint64_t *size)</argsstring>
        <name>fdt_get_mem_rsv</name>
        <param>
          <type>const void *</type>
          <declname>fdt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fdt_get_mem_rsv - retrieve one memory reserve map entry : pointer to the device tree blob , : pointers to 64-bit variables</para><para>On success, *address and *size will contain the address and size of the n-th reserve map entry from the device tree blob, in native-endian format.</para><para>returns: 0, on success -FDT_ERR_BADMAGIC, -FDT_ERR_BADVERSION, -FDT_ERR_BADSTATE, standard meanings </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/docs/lib/fdt/include/libfdt.h" line="284" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_LIBFDT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LIBFDT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libfdt<sp/>-<sp/>Flat<sp/>Device<sp/>Tree<sp/>manipulation</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2006<sp/>David<sp/>Gibson,<sp/>IBM<sp/>Corporation.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>libfdt<sp/>is<sp/>dual<sp/>licensed:<sp/>you<sp/>can<sp/>use<sp/>it<sp/>either<sp/>under<sp/>the<sp/>terms<sp/>of</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>GPL,<sp/>or<sp/>the<sp/>BSD<sp/>license,<sp/>at<sp/>your<sp/>option.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>a)<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>St,<sp/>Fifth<sp/>Floor,<sp/>Boston,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Alternatively,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>b)<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disclaimer.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libfdt_env.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fdt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_FIRST_SUPPORTED_VERSION<sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_LAST_SUPPORTED_VERSION<sp/><sp/>0x11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes:<sp/>informative<sp/>error<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_NOTFOUND<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_NOTFOUND:<sp/>The<sp/>requested<sp/>node<sp/>or<sp/>property<sp/>does<sp/>not<sp/>exist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_EXISTS<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_EXISTS:<sp/>Attemped<sp/>to<sp/>create<sp/>a<sp/>node<sp/>or<sp/>property<sp/>which</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>already<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_NOSPACE<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_NOSPACE:<sp/>Operation<sp/>needed<sp/>to<sp/>expand<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>tree,<sp/>but<sp/>its<sp/>buffer<sp/>did<sp/>not<sp/>have<sp/>sufficient<sp/>space<sp/>to</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>contain<sp/>the<sp/>expanded<sp/>tree.<sp/>Use<sp/>fdt_open_into()<sp/>to<sp/>move<sp/>the</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>device<sp/>tree<sp/>to<sp/>a<sp/>buffer<sp/>with<sp/>more<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes:<sp/>codes<sp/>for<sp/>bad<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADOFFSET<sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADOFFSET:<sp/>Function<sp/>was<sp/>passed<sp/>a<sp/>structure<sp/>block</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>offset<sp/>which<sp/>is<sp/>out-of-bounds,<sp/>or<sp/>which<sp/>points<sp/>to<sp/>an</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>unsuitable<sp/>part<sp/>of<sp/>the<sp/>structure<sp/>for<sp/>the<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADPATH<sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADPATH:<sp/>Function<sp/>was<sp/>passed<sp/>a<sp/>badly<sp/>formatted<sp/>path</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(e.g.<sp/>missing<sp/>a<sp/>leading<sp/>/<sp/>for<sp/>a<sp/>function<sp/>which<sp/>requires<sp/>an</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>absolute<sp/>path)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADPHANDLE<sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADPHANDLE:<sp/>Function<sp/>was<sp/>passed<sp/>an<sp/>invalid<sp/>phandle</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>value.<sp/><sp/>phandle<sp/>values<sp/>of<sp/>0<sp/>and<sp/>-1<sp/>are<sp/>not<sp/>permitted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADSTATE<sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADSTATE:<sp/>Function<sp/>was<sp/>passed<sp/>an<sp/>incomplete<sp/>device</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>tree<sp/>created<sp/>by<sp/>the<sp/>sequential-write<sp/>functions,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>not<sp/>sufficiently<sp/>complete<sp/>for<sp/>the<sp/>requested<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>codes:<sp/>codes<sp/>for<sp/>bad<sp/>device<sp/>tree<sp/>blobs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_TRUNCATED<sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_TRUNCATED:<sp/>Structure<sp/>block<sp/>of<sp/>the<sp/>given<sp/>device<sp/>tree</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>ends<sp/>without<sp/>an<sp/>FDT_END<sp/>tag.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADMAGIC<sp/><sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADMAGIC:<sp/>Given<sp/>&quot;device<sp/>tree&quot;<sp/>appears<sp/>not<sp/>to<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>device<sp/>tree<sp/>at<sp/>all<sp/>-<sp/>it<sp/>is<sp/>missing<sp/>the<sp/>flattened<sp/>device</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>tree<sp/>magic<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADVERSION<sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADVERSION:<sp/>Given<sp/>device<sp/>tree<sp/>has<sp/>a<sp/>version<sp/>which</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>can&apos;t<sp/>be<sp/>handled<sp/>by<sp/>the<sp/>requested<sp/>operation.<sp/><sp/>For</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>read-write<sp/>functions,<sp/>this<sp/>may<sp/>mean<sp/>that<sp/>fdt_open_into()<sp/>is</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>required<sp/>to<sp/>convert<sp/>the<sp/>tree<sp/>to<sp/>the<sp/>expected<sp/>version.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADSTRUCTURE<sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADSTRUCTURE:<sp/>Given<sp/>device<sp/>tree<sp/>has<sp/>a<sp/>corrupt</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>structure<sp/>block<sp/>or<sp/>other<sp/>serious<sp/>error<sp/>(e.g.<sp/>misnested</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>nodes,<sp/>or<sp/>subnodes<sp/>preceding<sp/>properties).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADLAYOUT<sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADLAYOUT:<sp/>For<sp/>read-write<sp/>functions,<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>device<sp/>tree<sp/>has<sp/>it&apos;s<sp/>sub-blocks<sp/>in<sp/>an<sp/>order<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>function<sp/>can&apos;t<sp/>handle<sp/>(memory<sp/>reserve<sp/>map,<sp/>then<sp/>structure,</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>then<sp/>strings).<sp/><sp/>Use<sp/>fdt_open_into()<sp/>to<sp/>reorganize<sp/>the<sp/>tree</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>into<sp/>a<sp/>form<sp/>suitable<sp/>for<sp/>the<sp/>read-write<sp/>operations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>&quot;Can&apos;t<sp/>happen&quot;<sp/>error<sp/>indicating<sp/>a<sp/>bug<sp/>in<sp/>libfdt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_INTERNAL<sp/><sp/><sp/><sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_INTERNAL:<sp/>libfdt<sp/>has<sp/>failed<sp/>an<sp/>internal<sp/>assertion.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Should<sp/>never<sp/>be<sp/>returned,<sp/>if<sp/>it<sp/>is,<sp/>it<sp/>indicates<sp/>a<sp/>bug<sp/>in</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>libfdt<sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Errors<sp/>in<sp/>device<sp/>tree<sp/>content<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_BADNCELLS<sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FDT_ERR_BADNCELLS:<sp/>Device<sp/>tree<sp/>has<sp/>a<sp/>#address-cells,<sp/>#size-cells</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>similar<sp/>property<sp/>with<sp/>a<sp/>bad<sp/>format<sp/>or<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FDT_ERR_MAX<sp/><sp/><sp/><sp/><sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low-level<sp/>functions<sp/>(you<sp/>probably<sp/>don&apos;t<sp/>need<sp/>these)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt_offset_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>checklen);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt_offset_ptr_w(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>checklen)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)fdt_offset_ptr(fdt,<sp/>offset,<sp/>checklen);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">uint32_t<sp/>fdt_next_tag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nextoffset);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traversal<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_next_node(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*depth);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_first_subnode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_next_subnode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>General<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_get_header(fdt,<sp/>field)<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(fdt32_to_cpu(((const<sp/>struct<sp/>fdt_header<sp/>*)(fdt))-&gt;field))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_magic(fdt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>magic))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_totalsize(fdt)<sp/><sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>totalsize))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_off_dt_struct(fdt)<sp/><sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>off_dt_struct))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_off_dt_strings(fdt)<sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>off_dt_strings))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_off_mem_rsvmap(fdt)<sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>off_mem_rsvmap))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_version(fdt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>version))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_last_comp_version(fdt)<sp/><sp/>(fdt_get_header(fdt,<sp/>last_comp_version))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_boot_cpuid_phys(fdt)<sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>boot_cpuid_phys))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_size_dt_strings(fdt)<sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>size_dt_strings))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_size_dt_struct(fdt)<sp/><sp/><sp/><sp/><sp/>(fdt_get_header(fdt,<sp/>size_dt_struct))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__fdt_set_hdr(name)<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>void<sp/>fdt_set_##name(void<sp/>*fdt,<sp/>uint32_t<sp/>val)<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>fdt_header<sp/>*fdth<sp/>=<sp/>(struct<sp/>fdt_header*)fdt;<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdth-&gt;name<sp/>=<sp/>cpu_to_fdt32(val);<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">__fdt_set_hdr(magic)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">__fdt_set_hdr(totalsize)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">__fdt_set_hdr(off_dt_struct)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">__fdt_set_hdr(off_dt_strings)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">__fdt_set_hdr(off_mem_rsvmap)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">__fdt_set_hdr(version)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">__fdt_set_hdr(last_comp_version)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">__fdt_set_hdr(boot_cpuid_phys)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">__fdt_set_hdr(size_dt_strings)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">__fdt_set_hdr(size_dt_struct)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__fdt_set_hdr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_check_header(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_move(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read-only<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fdt_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stroffset);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_num_mem_rsv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_get_mem_rsv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>uint64_t<sp/>*address,<sp/>uint64_t<sp/>*size);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_subnode_offset_namelen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parentoffset,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen);</highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_subnode_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parentoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_path_offset_namelen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_path_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fdt_get_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_first_property_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_next_property_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfdt__property" kindref="compound">fdt_property</ref><sp/>*fdt_get_property_by_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfdt__property" kindref="compound">fdt_property</ref><sp/>*fdt_get_property_namelen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfdt__property" kindref="compound">fdt_property</ref><sp/>*fdt_get_property(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfdt__property" kindref="compound">fdt_property</ref><sp/>*fdt_get_property_w(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structfdt__property" kindref="compound">fdt_property</ref><sp/>*)(uintptr_t)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdt_get_property(fdt,<sp/>nodeoffset,<sp/>name,<sp/>lenp);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt_getprop_by_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**namep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt_getprop_namelen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt_getprop(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt_getprop_w(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lenp)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)fdt_getprop(fdt,<sp/>nodeoffset,<sp/>name,<sp/>lenp);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">uint32_t<sp/>fdt_get_phandle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fdt_get_alias_namelen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fdt_get_alias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_get_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_supernode_atdepth_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>supernodedepth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodedepth);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_node_depth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_parent_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_node_offset_by_prop_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startoffset,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*propname,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*propval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proplen);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_node_offset_by_phandle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/>uint32_t<sp/>phandle);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_node_check_compatible(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*compatible);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_node_offset_by_compatible(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startoffset,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*compatible);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_stringlist_contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strlist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>listlen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read-only<sp/>functions<sp/>(addressing<sp/>related)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor">#define<sp/>FDT_MAX_NCELLS<sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_address_cells(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_size_cells(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write-in-place<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_inplace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_inplace_u32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt32_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt32(val);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_setprop_inplace(fdt,<sp/>nodeoffset,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_inplace_u64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>val)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt64_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt64(val);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_setprop_inplace(fdt,<sp/>nodeoffset,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_inplace_cell(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_setprop_inplace_u32(fdt,<sp/>nodeoffset,<sp/>name,<sp/>val);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_nop_property(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_nop_node(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Sequential<sp/>write<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_create(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_resize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_add_reservemap_entry(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/>uint64_t<sp/>addr,<sp/>uint64_t<sp/>size);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_finish_reservemap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_begin_node(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfdt__property" kindref="compound">fdt_property</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_property_u32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt32_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt32(val);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfdt__property" kindref="compound">fdt_property</ref>(fdt,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_property_u64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>val)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt64_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt64(val);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfdt__property" kindref="compound">fdt_property</ref>(fdt,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_property_cell(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_property_u32(fdt,<sp/>name,<sp/>val);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fdt_property_string(fdt,<sp/>name,<sp/>str)<sp/>\</highlight></codeline>
<codeline lineno="1117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fdt_property(fdt,<sp/>name,<sp/>str,<sp/>strlen(str)+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_end_node(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_finish(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read-write<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_create_empty_tree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_open_into(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_pack(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_add_mem_rsv(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/>uint64_t<sp/>address,<sp/>uint64_t<sp/>size);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_del_mem_rsv(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_set_name(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_u32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt32_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt32(val);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_setprop(fdt,<sp/>nodeoffset,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_u64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>val)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt64_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt64(val);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_setprop(fdt,<sp/>nodeoffset,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_setprop_cell(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_setprop_u32(fdt,<sp/>nodeoffset,<sp/>name,<sp/>val);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="preprocessor">#define<sp/>fdt_setprop_string(fdt,<sp/>nodeoffset,<sp/>name,<sp/>str)<sp/>\</highlight></codeline>
<codeline lineno="1344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fdt_setprop((fdt),<sp/>(nodeoffset),<sp/>(name),<sp/>(str),<sp/>strlen(str)+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_appendprop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_appendprop_u32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt32_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt32(val);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_appendprop(fdt,<sp/>nodeoffset,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_appendprop_u64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint64_t<sp/>val)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>fdt64_t<sp/>tmp<sp/>=<sp/>cpu_to_fdt64(val);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_appendprop(fdt,<sp/>nodeoffset,<sp/>name,<sp/>&amp;tmp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tmp));</highlight></codeline>
<codeline lineno="1444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_appendprop_cell(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdt_appendprop_u32(fdt,<sp/>nodeoffset,<sp/>name,<sp/>val);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="preprocessor">#define<sp/>fdt_appendprop_string(fdt,<sp/>nodeoffset,<sp/>name,<sp/>str)<sp/>\</highlight></codeline>
<codeline lineno="1485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fdt_appendprop((fdt),<sp/>(nodeoffset),<sp/>(name),<sp/>(str),<sp/>strlen(str)+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_delprop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_add_subnode_namelen(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parentoffset,</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_add_subnode(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parentoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fdt_del_node(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fdt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeoffset);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Debugging<sp/>/<sp/>informational<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fdt_strerror(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errval);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_LIBFDT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/docs/lib/fdt/include/libfdt.h"/>
  </compounddef>
</doxygen>
