# Freescale i.MX6 series single/dual/quad core processor

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME imx6ul
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
        set _DAP_TAPID $DAP_TAPID
} else {
        set _DAP_TAPID 0x5ba00477
}

#jtag newtap auto0 tap -irlen 2 -expected-id 0x00000000

jtag newtap $_CHIPNAME dap -irlen 4 -ircapture 0x01 -irmask 0x0f \
        -expected-id $_DAP_TAPID

# SDMA / no IDCODE
jtag newtap $_CHIPNAME sdma -irlen 4 -ircapture 0x00 -irmask 0x0f

# System JTAG Controller
if { [info exists SJC_TAPID] } {
        set _SJC_TAPID $SJC_TAPID
} else {
        set _SJC_TAPID 0x0891d01d
}
set _SJC_TAPID2 0x1891d01d 

jtag newtap $_CHIPNAME sjc -irlen 5 -ircapture 0x01 -irmask 0x1f \
        -expected-id $_SJC_TAPID -expected-id $_SJC_TAPID2 

set _TARGETNAME $_CHIPNAME.cpu.0
target create $_TARGETNAME cortex_a -dap $_CHIPNAME.dap -coreid 0 -dbgbase 0x82130000

# some TCK cycles are required to activate the DEBUG power domain
jtag configure $_CHIPNAME.sjc -event post-reset "runtest 100"

#reset_config [none|trst_only|srst_only|trst_and_srst]
#          [srst_pulls_trst|trst_pulls_srst|combined|separate]
#          [srst_gates_jtag|srst_nogate] [trst_push_pull|trst_open_drain]
#          [srst_push_pull|srst_open_drain]
#          [connect_deassert_srst|connect_assert_srst]

reset_config srst_only
adapter_nsrst_delay 200000
jtag_ntrst_delay 200000


proc imx6_dbginit {target} {
        # General Cortex A8/A9 debug initialisation
        cortex_a dbginit
        echo dbginit...
}

proc imx6ul_reset { } {
    
    echo Reset...
}

proc imx6ul_reset_init { } {


mww 0x020c4068 0xffffffff
mww 0x020c406c 0xffffffff
mww 0x020c4070 0xffffffff
mww 0x020c4074 0xffffffff
mww 0x020c4078 0xffffffff
mww 0x020c407c 0xffffffff
mww 0x020c4080 0xffffffff
mww 0x020c4084 0xffffffff

mww 0x020E04B4 0x000C0000
mww 0x020E04AC 0x00000000
mww 0x020E027C 0x00000030
mww 0x020E0250 0x00000030
mww 0x020E024C 0x00000030
mww 0x020E0490 0x00000030
mww 0x020E0288 0x00000030
mww 0x020E0270 0x00000000
mww 0x020E0260 0x00000030
mww 0x020E0264 0x00000030
mww 0x020E04A0 0x00000030
mww 0x020E0494 0x00020000
mww 0x020E0280 0x00000030
mww 0x020E0284 0x00000030
mww 0x020E04B0 0x00020000
mww 0x020E0498 0x00000030
mww 0x020E04A4 0x00000030
mww 0x020E0244 0x00000030
mww 0x020E0248 0x00000030

mww 0x021B001C 0x00008000
mww 0x021B0800 0xA1390003
mww 0x021B080C 0x00140008
mww 0x021B083C 0x01540150

mww 0x021B0848 0x40405656
mww 0x021B0850 0x40404E4A
mww 0x021B081C 0x33333333
mww 0x021B0820 0x33333333
mww 0x021B082C 0xf3333333
mww 0x021B0830 0x00333333
mww 0x021B08C0 0x00922012
mww 0x021B08b8 0x00000800
mww 0x021B0004 0x0002002D
mww 0x021B0008 0x1B333030
mww 0x021B000C 0x8b8f5253
mww 0x021B0010 0xB66b0b63
mww 0x021B0014 0x01FF00DB
mww 0x021B0018 0x00211740
mww 0x021B001C 0x00008000
mww 0x021B002C 0x000026D2
mww 0x021B0030 0x008f1023
mww 0x021B0040 0x00000043
mww 0x021B0000 0x82180000
mww 0x021B001C 0x02008032
mww 0x021B001C 0x00008033
#Load MR1, 
mww 0x021B001C 0x00048031
mww 0x021B001C 0x05208030
mww 0x021B001C 0x04008040
mww 0x021B0020 0x00000800
mww 0x021B0818 0x00000227
mww 0x021B0004 0x0002552D
mww 0x021B0404 0x00001076
mww 0x021B001C 0x00000000

    echo "DRAM init done..."
}

# Slow speed to be sure it will work
adapter_khz 30000
echo "TARGET: $_TARGETNAME"
$_TARGETNAME configure -event reset-start { adapter_khz 30000 }

$_TARGETNAME configure -event reset-assert-post "imx6_dbginit $_TARGETNAME"
$_TARGETNAME configure -event reset-init "imx6ul_reset_init"


$_TARGETNAME configure -event gdb-attach { halt }

