[tool.ruff]
line-length = 100
extend-exclude = [
    "pki",
    "doc",
    "scripts/genconfig.py",
    "scripts/kconfiglib.py",
    "scripts/menuconfig.py",
]
target-version = "py38"

[tool.ruff.lint]
# See: https://docs.astral.sh/ruff/rules/ for details
select = ["D", "N", "F", "W", "E", "I", "SIM", "PTH", "PERF"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.mypy]
warn_return_any = true
exclude = [
    "^build.*",
    "^doc.*",
    "^scripts/menuconfig\\.py$"
]

[tool.cibuildwheel]
skip = ["*-musl*", "pp*", "*linux_i686", "*win32*"]

[tool.cibuildwheel.linux]
before-all = "yum install -y libusbx-devel"

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel "
repair-wheel-command = "delvewheel show {wheel} --ignore-in-wheel && delvewheel repair -w {dest_dir} --ignore-in-wheel {wheel} --add-path vcpkg_installed\\x64-windows\\bin"

# The 'PB_MACOS_ARCH' environment variable is picked up by setup.py to link
# against the correct libusb library. I've not found a nicer way to figure
# out the target architecture in setup.py when cross compiling on an x86_64 host.
[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = "PB_MACOS_ARCH=arm64"

[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
environment = "PB_MACOS_ARCH=x86_64"

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]
repair-wheel-command = "DYLD_LIBRARY_PATH=libusb_{delocate_archs}/1.0.26/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
